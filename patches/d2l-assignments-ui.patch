From 3ba47ea0dee11db1c1069644e56663c93eb68cfc Mon Sep 17 00:00:00 2001
From: Vincent Wong <Vincent.Wong@D2L.com>
Date: Mon, 14 Jan 2019 15:30:33 -0800
Subject: [PATCH 1/4] Polymer 3 Conversion

---
 .eslintignore                                 |    2 +
 .eslintrc.json                                |    2 +-
 .gitignore                                    |    3 +-
 bower.json                                    |   63 -
 d2l-assignment-attachment-behavior.html       |   57 -
 d2l-assignment-attachment-behavior.js         |   52 +
 d2l-assignment-behavior.html                  |   82 -
 d2l-assignment-behavior.js                    |   77 +
 d2l-assignment-editor-data.html               |  371 ----
 d2l-assignment-editor-data.js                 |  365 ++++
 d2l-assignment-editor.html                    |  743 --------
 d2l-assignment-editor.js                      |  685 ++++++++
 d2l-assignment-html-editor.html               |  153 --
 d2l-assignment-html-editor.js                 |  137 ++
 d2l-assignment-input.html                     |   87 -
 d2l-assignment-input.js                       |   72 +
 d2l-assignment-text-area.html                 |   76 -
 d2l-assignment-text-area.js                   |   71 +
 d2l-assignment-ui.html                        |    8 +-
 d2l-assignment-viewer-data.html               |  319 ----
 d2l-assignment-viewer-data.js                 |  312 ++++
 d2l-assignment-viewer.html                    |  499 ------
 d2l-assignment-viewer.js                      |  481 ++++++
 ...bubble-styles.html => d2l-bubble-styles.js |   14 +-
 d2l-field-styles.html => d2l-field-styles.js  |   14 +-
 d2l-loaded-assignment-viewer.html             |  333 ----
 d2l-loaded-assignment-viewer.js               |  316 ++++
 d2l-planned-assignment-viewer-data.html       |   80 -
 d2l-planned-assignment-viewer-data.js         |   73 +
 d2l-planned-assignment-viewer.html            |   87 -
 d2l-planned-assignment-viewer.js              |   89 +
 demo/d2l-assignment-editor.html               |   97 +-
 demo/d2l-assignment-viewer.html               |   74 +-
 index.html                                    |   16 -
 localize-behavior.html                        |   48 -
 localize-behavior.js                          |   45 +
 package.json                                  |   59 +-
 polymer.json                                  |    3 +-
 sass/link-button.scss                         |    2 +-
 sass/select.scss                              |    2 +-
 .../assignment-attachment-behavior.html       |   14 -
 .../assignment-attachment-behavior.js         |    8 +
 ...l-assignment-attachment-behavior_test.html |   99 +-
 test/d2l-assignment-editor_test.html          | 1519 +++++++++--------
 test/d2l-assignment-viewer_test.html          |  915 +++++-----
 test/fixtures/assignment.js                   |   78 +-
 test/index.html                               |    4 +-
 47 files changed, 4267 insertions(+), 4439 deletions(-)
 delete mode 100644 bower.json
 delete mode 100644 d2l-assignment-attachment-behavior.html
 create mode 100644 d2l-assignment-attachment-behavior.js
 delete mode 100644 d2l-assignment-behavior.html
 create mode 100644 d2l-assignment-behavior.js
 delete mode 100644 d2l-assignment-editor-data.html
 create mode 100644 d2l-assignment-editor-data.js
 delete mode 100644 d2l-assignment-editor.html
 create mode 100644 d2l-assignment-editor.js
 delete mode 100644 d2l-assignment-html-editor.html
 create mode 100644 d2l-assignment-html-editor.js
 delete mode 100644 d2l-assignment-input.html
 create mode 100644 d2l-assignment-input.js
 delete mode 100644 d2l-assignment-text-area.html
 create mode 100644 d2l-assignment-text-area.js
 delete mode 100644 d2l-assignment-viewer-data.html
 create mode 100644 d2l-assignment-viewer-data.js
 delete mode 100644 d2l-assignment-viewer.html
 create mode 100644 d2l-assignment-viewer.js
 rename d2l-bubble-styles.html => d2l-bubble-styles.js (89%)
 rename d2l-field-styles.html => d2l-field-styles.js (78%)
 delete mode 100644 d2l-loaded-assignment-viewer.html
 create mode 100644 d2l-loaded-assignment-viewer.js
 delete mode 100644 d2l-planned-assignment-viewer-data.html
 create mode 100644 d2l-planned-assignment-viewer-data.js
 delete mode 100644 d2l-planned-assignment-viewer.html
 create mode 100644 d2l-planned-assignment-viewer.js
 delete mode 100644 index.html
 delete mode 100644 localize-behavior.html
 create mode 100644 localize-behavior.js
 delete mode 100644 test-resources/behavior-elements/assignment-attachment-behavior.html
 create mode 100644 test-resources/behavior-elements/assignment-attachment-behavior.js

diff --git a/.eslintignore b/.eslintignore
index c28b034..2746b53 100644
--- a/.eslintignore
+++ b/.eslintignore
@@ -1 +1,3 @@
 gulpfile.js
+test/acceptance/*
+reports
diff --git a/.eslintrc.json b/.eslintrc.json
index dbcf77f..95346a6 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -1,5 +1,5 @@
 {
-  "extends": "brightspace/polymer-config",
+  "extends": "brightspace/polymer-3-config",
   "globals": {
 	  "moment": false
   }
diff --git a/.gitignore b/.gitignore
index f12a4e9..a31bb10 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,7 +1,8 @@
-bower_components
 node_modules/
 build
 css/**
 
 package-lock.json
 *.log
+
+node_modules
diff --git a/bower.json b/bower.json
deleted file mode 100644
index edf1744..0000000
--- a/bower.json
+++ /dev/null
@@ -1,63 +0,0 @@
-{
-  "name": "d2l-assignments-ui",
-  "version": "2.41.0",
-  "description": "Brightspace assignments editor and viewer components",
-  "main": "d2l-assignment-editor.html",
-  "license": "Apache-2.0",
-  "ignore": [
-    "demo",
-    "test",
-    ".editorconfig",
-    ".gitignore",
-    ".travis.yml",
-    "package.json"
-  ],
-  "dependencies": {
-    "polymer": "Polymer/polymer#1.9.1 - 2",
-    "d2l-tooltip": "BrightspaceUI/tooltip#^2.0.7",
-    "d2l-inputs": "^1.0.6",
-    "d2l-button": "^4.0.3",
-    "d2l-colors": "^3.0.1",
-    "d2l-icons": "^4.13.0",
-    "d2l-link": "^4.0.2",
-    "d2l-typography": "^6.0.0",
-    "d2l-offscreen": "^3.0.0",
-    "s-html": "Brightspace/s-html#^1.0.0",
-    "d2l-datetime-picker": "BrightspaceUI/datetime-picker#^3.3.0",
-    "vaadin-date-picker": "Brightspace/vaadin-date-picker#^1.2.6",
-    "d2l-loading-spinner": "^6.0.3",
-    "d2l-attachments-ui": "^2.0.0",
-    "d2l-alert": "Brightspace/alert#^3.0.1",
-    "fetch": "^2.0.3",
-    "d2l-hm-constants-behavior": "Brightspace/d2l-hm-constants-behavior#^5.0.0",
-    "lazy-imports": "^2.0.0",
-    "d2l-fetch": "brightspace/d2l-fetch#^1.8.0",
-    "siren-parser-import": "Brightspace/siren-parser-import#^7.0.0",
-    "d2l-html-editor": "Brightspace/d2l-html-editor#^0.2.19",
-    "d2l-more-less": "^4.2.2",
-    "vui-input": "^2.1.0",
-    "d2l-localize-behavior": "^1.1.0"
-  },
-  "devDependencies": {
-    "iron-component-page": "PolymerElements/iron-component-page#^2.0.0",
-    "iron-demo-helpers": "PolymerElements/iron-demo-helpers#^2.0.0",
-    "iron-test-helpers": "PolymerElements/iron-test-helpers#^2.0.0",
-    "web-component-tester": "^6.0.0",
-    "webcomponentsjs": "webcomponents/webcomponentsjs#^1.0.5"
-  },
-  "variants": {
-    "1.x": {
-      "dependencies": {
-        "polymer": "^1.9.3"
-      },
-      "resolutions": {
-        "webcomponentsjs": "webcomponents/webcomponentsjs#^0.7.24"
-      }
-    }
-  },
-  "resolutions": {
-    "webcomponentsjs": "^1.0.5",
-    "d2l-icons": "^4.13.0",
-    "d2l-colors": "^3.0.1"
-  }
-}
diff --git a/d2l-assignment-attachment-behavior.html b/d2l-assignment-attachment-behavior.html
deleted file mode 100644
index 3b1ed4b..0000000
--- a/d2l-assignment-attachment-behavior.html
+++ /dev/null
@@ -1,57 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-
-<script>
-	'use strict';
-	/** @polymerBehavior window.D2L.AssignmentAttachmentBehavior*/
-	var AttachmentBehavior = {
-		linkToAttachment: function(linkEntity) {
-			var deleteAction = linkEntity.getActionByName('delete');
-			var linkUrl = linkEntity.properties.href || '';
-
-			var attachment = {
-				name: linkEntity.properties.name,
-				id: linkUrl,
-				url: linkUrl,
-				isDeleted: false,
-				deleteAction: deleteAction
-			};
-			return attachment;
-		},
-		newLinkToAttachment: function(link) {
-			var linkUrl = link.url;
-
-			// Select a single url to be linkUrl, cannot be an array
-			if (Array.isArray(linkUrl)) {
-				if (linkUrl.length > 1) {
-					linkUrl = linkUrl.filter(function(singleUrl) {
-						return singleUrl.rel.indexOf('self') > -1;
-					});
-				}
-				linkUrl = linkUrl[0].href;
-			}
-
-			var attachment = {
-				name: link.name,
-				id: linkUrl,
-				url: linkUrl,
-				isDeleted: false
-			};
-
-			if (link.type) {
-				attachment.type = link.type;
-			}
-
-			if (link.generator) {
-				attachment.generator = link.generator;
-			}
-
-			return attachment;
-		}
-	};
-
-	window.D2L = window.D2L || {};
-	window.D2L.AssignmentAttachmentBehavior = [
-		AttachmentBehavior
-	];
-
-</script>
diff --git a/d2l-assignment-attachment-behavior.js b/d2l-assignment-attachment-behavior.js
new file mode 100644
index 0000000..b576a3d
--- /dev/null
+++ b/d2l-assignment-attachment-behavior.js
@@ -0,0 +1,52 @@
+import '@polymer/polymer/polymer-legacy.js';
+/** @polymerBehavior window.D2L.AssignmentAttachmentBehavior*/
+var AttachmentBehavior = {
+	linkToAttachment: function(linkEntity) {
+		var deleteAction = linkEntity.getActionByName('delete');
+		var linkUrl = linkEntity.properties.href || '';
+
+		var attachment = {
+			name: linkEntity.properties.name,
+			id: linkUrl,
+			url: linkUrl,
+			isDeleted: false,
+			deleteAction: deleteAction
+		};
+		return attachment;
+	},
+	newLinkToAttachment: function(link) {
+		var linkUrl = link.url;
+
+		// Select a single url to be linkUrl, cannot be an array
+		if (Array.isArray(linkUrl)) {
+			if (linkUrl.length > 1) {
+				linkUrl = linkUrl.filter(function(singleUrl) {
+					return singleUrl.rel.indexOf('self') > -1;
+				});
+			}
+			linkUrl = linkUrl[0].href;
+		}
+
+		var attachment = {
+			name: link.name,
+			id: linkUrl,
+			url: linkUrl,
+			isDeleted: false
+		};
+
+		if (link.type) {
+			attachment.type = link.type;
+		}
+
+		if (link.generator) {
+			attachment.generator = link.generator;
+		}
+
+		return attachment;
+	}
+};
+
+window.D2L = window.D2L || {};
+window.D2L.AssignmentAttachmentBehavior = [
+	AttachmentBehavior
+];
diff --git a/d2l-assignment-behavior.html b/d2l-assignment-behavior.html
deleted file mode 100644
index caa014e..0000000
--- a/d2l-assignment-behavior.html
+++ /dev/null
@@ -1,82 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<script src="../fetch/fetch.js"></script>
-<link rel="import" href="../d2l-fetch/d2l-fetch.html">
-
-<script>
-	'use strict';
-	/** @polymerBehavior window.D2L.AssignmentBehavior*/
-	var AssignmentBehavior = {
-		callUrl: function(url, method, body) {
-			var headersObject = {
-				accept: 'application/vnd.siren+json'
-			};
-			var requestObject = {
-				headers: new Headers(headersObject),
-				method: method || 'GET'
-			};
-			if (body) {
-				requestObject.body = body;
-			}
-
-			if (this.apiConfig && typeof this.apiConfig.getToken === 'function') {
-				return this.apiConfig.getToken().then(function(token) {
-					headersObject.authorization = 'Bearer ' + token;
-					requestObject.headers = new Headers(headersObject);
-					var request = new Request(url, requestObject);
-					return window.d2lfetch.fetch(request);
-				});
-			}
-
-			requestObject.headers = new Headers(headersObject);
-			var request = new Request(url, requestObject);
-			return window.d2lfetch.fetch(request);
-		},
-		findLinkByRel: function(links, rel) {
-			if (links) {
-				return links.find(function(link) {
-					return link.rel && link.rel.indexOf(rel) > -1;
-				});
-			}
-		},
-		populateUrlsFromLinks: function(links) {
-			var urls = [];
-			if (links) {
-				var internalActivityId = this.findLinkByRel(links, 'https://activities.api.brightspace.com/rels/internal-activity-id');
-				if (internalActivityId) {
-					urls.push(internalActivityId);
-				}
-				var assignment = this.findLinkByRel(links, 'self');
-				if (assignment) {
-					assignment.rel.push('https://api.brightspace.com/rels/assignment');
-					assignment.type = 'application/vnd.siren+json';
-					urls.push(assignment);
-				}
-				var activity = this.findLinkByRel(links, 'https://activities.api.brightspace.com/rels/activity-usage');
-				if (activity) {
-					activity.type = 'application/vnd.siren+json';
-					urls.push(activity);
-				}
-			}
-			return urls;
-		},
-		getAssignmentUrl: function(url) {
-			if (typeof url  === 'string') {
-				return url;
-			} else if (Array.isArray(url)) {
-				var assignmentUrl = url.find(function(link) {
-					if (link.rel && link.rel.indexOf('https://api.brightspace.com/rels/assignment') > -1) {
-						return link;
-					}
-				});
-				return assignmentUrl ? assignmentUrl.href : '';
-			} else if (typeof url === 'object') {
-				return url.href;
-			}
-		}
-	};
-	window.D2L = window.D2L || {};
-	window.D2L.AssignmentBehavior = [
-		AssignmentBehavior
-	];
-
-</script>
diff --git a/d2l-assignment-behavior.js b/d2l-assignment-behavior.js
new file mode 100644
index 0000000..9fac563
--- /dev/null
+++ b/d2l-assignment-behavior.js
@@ -0,0 +1,77 @@
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-fetch/d2l-fetch.js';
+import 'whatwg-fetch/fetch.js';
+/** @polymerBehavior window.D2L.AssignmentBehavior*/
+var AssignmentBehavior = {
+	callUrl: function(url, method, body) {
+		var headersObject = {
+			accept: 'application/vnd.siren+json'
+		};
+		var requestObject = {
+			headers: new Headers(headersObject),
+			method: method || 'GET'
+		};
+		if (body) {
+			requestObject.body = body;
+		}
+
+		if (this.apiConfig && typeof this.apiConfig.getToken === 'function') {
+			return this.apiConfig.getToken().then(function(token) {
+				headersObject.authorization = 'Bearer ' + token;
+				requestObject.headers = new Headers(headersObject);
+				var request = new Request(url, requestObject);
+				return window.d2lfetch.fetch(request);
+			});
+		}
+
+		requestObject.headers = new Headers(headersObject);
+		var request = new Request(url, requestObject);
+		return window.d2lfetch.fetch(request);
+	},
+	findLinkByRel: function(links, rel) {
+		if (links) {
+			return links.find(function(link) {
+				return link.rel && link.rel.indexOf(rel) > -1;
+			});
+		}
+	},
+	populateUrlsFromLinks: function(links) {
+		var urls = [];
+		if (links) {
+			var internalActivityId = this.findLinkByRel(links, 'https://activities.api.brightspace.com/rels/internal-activity-id');
+			if (internalActivityId) {
+				urls.push(internalActivityId);
+			}
+			var assignment = this.findLinkByRel(links, 'self');
+			if (assignment) {
+				assignment.rel.push('https://api.brightspace.com/rels/assignment');
+				assignment.type = 'application/vnd.siren+json';
+				urls.push(assignment);
+			}
+			var activity = this.findLinkByRel(links, 'https://activities.api.brightspace.com/rels/activity-usage');
+			if (activity) {
+				activity.type = 'application/vnd.siren+json';
+				urls.push(activity);
+			}
+		}
+		return urls;
+	},
+	getAssignmentUrl: function(url) {
+		if (typeof url  === 'string') {
+			return url;
+		} else if (Array.isArray(url)) {
+			var assignmentUrl = url.find(function(link) {
+				if (link.rel && link.rel.indexOf('https://api.brightspace.com/rels/assignment') > -1) {
+					return link;
+				}
+			});
+			return assignmentUrl ? assignmentUrl.href : '';
+		} else if (typeof url === 'object') {
+			return url.href;
+		}
+	}
+};
+window.D2L = window.D2L || {};
+window.D2L.AssignmentBehavior = [
+	AssignmentBehavior
+];
diff --git a/d2l-assignment-editor-data.html b/d2l-assignment-editor-data.html
deleted file mode 100644
index 5b62674..0000000
--- a/d2l-assignment-editor-data.html
+++ /dev/null
@@ -1,371 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="./localize-behavior.html">
-<link rel="import" href="../siren-parser-import/siren-parser.html">
-<link rel="import" href="./d2l-assignment-attachment-behavior.html">
-<link rel="import" href="./d2l-assignment-behavior.html">
-
-<dom-module id="d2l-assignment-editor-data">
-	<script>
-	Polymer({
-
-		is: 'd2l-assignment-editor-data',
-
-		behaviors: [
-			D2L.PolymerBehaviors.Assignment.LocalizeBehavior,
-			window.D2L.AssignmentAttachmentBehavior,
-			window.D2L.AssignmentBehavior
-		],
-		properties: {
-			url: {
-				type: String
-			},
-			apiConfig: {
-				type: Object,
-				value: null
-			},
-			loaded: {
-				type: String
-			},
-			resource: {
-				type: Object
-			},
-			name: {
-				type: String,
-				notify: true
-			},
-			instructions: {
-				type: String,
-				notify: true
-			},
-			dueDate: {
-				type: String,
-				notify: true
-			},
-			addToGrades: {
-				type: Boolean,
-				notify: true
-			},
-			outOf: {
-				type: String,
-				notify: true
-			},
-			canAddGrade: {
-				type: Boolean,
-				notify: true
-			},
-			attachmentsToSave: {
-				type: Array,
-				notify: true
-			},
-			existingAttachments: {
-				type: Array,
-				notify: true
-			},
-			isNewAssignment: Boolean,
-			linkAttachmentFeatureEnabled: {
-				type: Boolean,
-				notify: true
-			},
-			isDraft: {
-				type: Boolean,
-				notify: true
-			},
-			availableCompletionTypes: {
-				type: Object,
-				notify: true
-			},
-			availableSubmissionTypes: {
-				type: Object,
-				notify: true
-			},
-			submissionType: {
-				type: Number,
-				notify: true
-			},
-			completionType: {
-				type: Number,
-				notify: true
-			}
-		},
-		load: function() {
-			var _this = this;
-			var assignmentUrl = this.getAssignmentUrl(this.url);
-			if (!assignmentUrl) {
-				return;
-			}
-			this.callUrl(assignmentUrl)
-				.then(function(response) {
-					if (response.ok) {
-						response.json()
-							.then(function(body) {
-								_this.resource = window.D2L.Hypermedia.Siren.Parse(body);
-								var action = _this.resource.getActionByName('quick-create-folder');
-								if (action) {
-									_this.loaded = true;
-									_this.setInitialValues();
-									_this.canAddGrade = action.getFieldByName('addToGrades') && !_this._fieldHasClass(action, 'addToGrades', 'disabled');
-									_this.linkAttachmentFeatureEnabled = action.hasClass('link-attachment');
-								}
-								_this.fire('d2l-assignment-editor-loaded', _this.loaded);
-							});
-					} else {
-						_this.fire('d2l-assignment-editor-loaded', false);
-					}
-				}).catch(function() {
-					_this.fire('d2l-assignment-editor-loaded', false);
-				});
-		},
-		_existingFileToAttachment: function(file) {
-			var fileUrl = file.getLinkByRel('self').href;
-			var deleteAction = file.getActionByName('delete');
-			return {
-				type: 'Document',
-				name: file.properties.name,
-				id: fileUrl,
-				url: fileUrl,
-				isDeleted: false,
-				deleteAction: deleteAction
-			};
-		},
-		_newFileToAttachment: function(file) {
-			var objectURL = URL.createObjectURL(file);
-			return {
-				type: 'Document',
-				file: file,
-				name: file.name,
-				id: objectURL,
-				url: objectURL,
-				isDeleted: false
-			};
-		},
-		_saveLink: function(attachment, linkAttachAction) {
-			var formData = new FormData();
-			formData.append('href', attachment.url);
-			formData.append('name', attachment.name);
-
-			return this.callUrl(linkAttachAction.href, linkAttachAction.method, formData);
-		},
-		_saveFile: function(attachment, fileUploadAction) {
-			var file = attachment.file;
-			var formData = new FormData();
-			formData.append('file', file, file.name);
-
-			return this.callUrl(fileUploadAction.href, fileUploadAction.method, formData);
-		},
-		_removeFile: function(fileRemoveAction) {
-			return this.callUrl(fileRemoveAction.href, fileRemoveAction.method);
-		},
-		_getAddDeletePromises: function(attachments, attachmentsToSave, existingAttachments) {
-			var _this = this;
-			var promiseArray = [];
-			if (attachments && attachments.hasActionByName('add-file')) {
-				var addFileLink = attachments.getActionByName('add-file');
-				if (addFileLink) {
-					attachmentsToSave.forEach(function(file) {
-						if (!file.isDeleted && file.type === 'Document') {
-							promiseArray.push(_this._saveFile(file, addFileLink));
-						}
-					});
-				}
-			}
-			if (attachments && attachments.hasActionByName('add-link')) {
-				var addLink = attachments.getActionByName('add-link');
-				if (addLink) {
-					attachmentsToSave.forEach(function(link) {
-						if (!link.isDeleted && (link.type !== 'Document')) {
-							promiseArray.push(_this._saveLink(link, addLink));
-						}
-					});
-				}
-			}
-			var filesToDelete = (existingAttachments || []).filter(function(item) {
-				return item.isDeleted && !!item.deleteAction;
-			});
-			filesToDelete.forEach(function(attachment) {
-				promiseArray.push(_this._removeFile(attachment.deleteAction));
-			});
-			return promiseArray;
-		},
-		save: function(name, instructions, dueDate, addToGrades, maximumGrade, attachmentsToSave, existingAttachments, isDraft, submissionType, completionType) {
-			var action = this.resource ? this.resource.getActionByName('quick-create-folder') : null;
-			var data = this._validate(action, name, instructions, dueDate, addToGrades, maximumGrade, isDraft, submissionType, completionType);
-
-			if (!data) {
-				return;
-			}
-
-			if (!this.resource) {
-				this.fire('d2l-assignment-save-failed', data);
-				return;
-			}
-			var _this = this;
-
-			this.callUrl(action.href, action.method, data)
-				.then(function(response) {
-					if (response.ok) {
-						response.json()
-							.then(function(body) {
-								var resource = window.D2L.Hypermedia.Siren.Parse(body);
-								var self = resource.getLinkByRel('self');
-								if (self) {
-									var attachments = resource.getSubEntityByRel('https://assignments.api.brightspace.com/rels/attachments');
-									var promises = _this._getAddDeletePromises(attachments, attachmentsToSave, existingAttachments);
-									var idObj = {
-										id: self.href,
-										isNewAssignment: _this.isNewAssignment,
-										attachment: existingAttachments.concat(attachmentsToSave),
-										urls: _this.populateUrlsFromLinks(resource.links)
-									};
-									Promise.all(promises).then(function(results) { // eslint-disable-line no-undef
-										var savePartialFail = results.some(function(response) {
-											return !response.ok;
-										});
-
-										var message = (savePartialFail) ?
-											'd2l-assignment-save-partial-fail' : 'd2l-assignment-save-complete';
-
-										_this.fire(message, idObj);
-									}, function() {
-										_this.fire('d2l-assignment-save-partial-fail', idObj);
-									});
-								} else {
-									_this.fire('d2l-assignment-save-failed', data);
-								}
-							});
-					} else {
-						_this.fire('d2l-assignment-save-failed', data);
-					}
-				});
-		},
-		setInitialValues: function() {
-			var properties = this.getInitialValues();
-			this.name = properties.name;
-			this.instructions = properties.instructions;
-			this.dueDate = properties.dueDate;
-			this.addToGrades = properties.addToGrades;
-			this.outOf = properties.outOf;
-			this.existingAttachments = properties.existingAttachments;
-			this.attachmentsToSave = properties.attachmentsToSave;
-			this.isDraft = properties.isDraft;
-			this.availableSubmissionTypes = properties.availableSubmissionTypes;
-			this.availableCompletionTypes = properties.availableCompletionTypes;
-		},
-		getInitialValues: function() {
-			var _this = this;
-			var action = this.resource.getActionByName('quick-create-folder');
-			var properties = {};
-			if (action) {
-				properties.name = this._getFieldValue(action, 'name');
-				properties.instructions = this._getFieldValue(action, 'instructions');
-				properties.dueDate = this._getFieldValue(action, 'dueDate');
-				properties.addToGrades = this._getFieldValue(action, 'addToGrades');
-				properties.outOf = this._getFieldValue(action, 'outOf').toString();
-				properties.isDraft = this._getFieldValue(action, 'draft');
-				properties.availableSubmissionTypes = this._getFieldValue(action, 'submissionType');
-				properties.availableCompletionTypes = this._getFieldValue(action, 'completionType');
-			}
-
-			var attachments = this.resource.getSubEntityByRel('https://assignments.api.brightspace.com/rels/attachments');
-			properties.existingAttachments = [];
-
-			if (attachments && attachments.hasEntityByRel('https://assignments.api.brightspace.com/rels/file')) {
-				attachments.getSubEntitiesByRel('https://assignments.api.brightspace.com/rels/file')
-					.forEach(function(fileEntity) {
-						properties.existingAttachments.push(_this._existingFileToAttachment(fileEntity));
-					});
-			}
-
-			if (attachments && attachments.hasEntityByRel('https://assignments.api.brightspace.com/rels/link')) {
-				attachments.getSubEntitiesByRel('https://assignments.api.brightspace.com/rels/link')
-					.forEach(function(linkEntity) {
-						properties.existingAttachments.push(_this.linkToAttachment(linkEntity));
-					});
-			}
-
-			properties.attachmentsToSave = [];
-			return properties;
-		},
-		_fieldHasClass: function(action, fieldName, className) {
-			var field = action.getFieldByName(fieldName);
-			return field && (field.class || []).indexOf(className) > -1;
-		},
-		_getFieldValue: function(action, name) {
-			var field = action.getFieldByName(name);
-			if (field) {
-				return field.value;
-			}
-			return '';
-		},
-		_validate: function(action, name, instructions, dueDate, addToGrades, maximumGrade, isDraft, submissionType, completionType) {
-			var validatedName = name && name.trim();
-			var validatedMaximumGrade = !addToGrades || this._validateGrade(maximumGrade);
-			var fields = [];
-			if (!validatedName) {
-				fields.push('name');
-			}
-			if (!validatedMaximumGrade) {
-				fields.push('maximumGrade');
-			}
-			if (fields.length) {
-				this.fire('d2l-assignment-save-failed', {
-					fields: fields
-				});
-				return;
-			}
-
-			var data = new FormData();
-			data.append('name', validatedName);
-
-			var oldInstructions = action ? this._getFieldValue(action, 'instructions') : '';
-			if ((instructions || oldInstructions) && instructions !== oldInstructions) {
-				data.append('instructions', instructions);
-			}
-
-			var validatedDate = this._processDate(dueDate);
-			var resetDueDate = !validatedDate && action && this._getFieldValue(action, 'dueDate');
-			if (validatedDate || resetDueDate) {
-				data.append('dueDate', resetDueDate ? '' : validatedDate);
-			}
-
-			data.append('addToGrades', addToGrades);
-
-			if (addToGrades) {
-				data.append('maxGradePoint', validatedMaximumGrade);
-			}
-
-			if (this.isNewAssignment) {
-				data.append('draft', isDraft);
-			}
-
-			if (submissionType) {
-				data.append('submissionType', submissionType);
-			}
-
-			if (completionType) {
-				data.append('completionType', completionType);
-			}
-
-			return data;
-		},
-		_processDate: function(date) {
-			var validateDate = new Date(date);
-			var validatedDate;
-			try {
-				validatedDate = validateDate.toISOString();
-			} catch (e) {
-				//
-			}
-			return validatedDate;
-		},
-		_validateGrade: function(grade) {
-			var parsedNumber = this.parseNumber(grade);
-			if (typeof parsedNumber === 'number' && parsedNumber >= 0.01 && parsedNumber <= 9999999999) {
-				return parsedNumber;
-			} else {
-				return false;
-			}
-		}
-	});
-	</script>
-
-</dom-module>
diff --git a/d2l-assignment-editor-data.js b/d2l-assignment-editor-data.js
new file mode 100644
index 0000000..9b33be7
--- /dev/null
+++ b/d2l-assignment-editor-data.js
@@ -0,0 +1,365 @@
+import '@polymer/polymer/polymer-legacy.js';
+import './localize-behavior.js';
+import 'siren-parser/siren-parser.js';
+import './d2l-assignment-attachment-behavior.js';
+import './d2l-assignment-behavior.js';
+Polymer({
+
+	is: 'd2l-assignment-editor-data',
+
+	behaviors: [
+		D2L.PolymerBehaviors.Assignment.LocalizeBehavior,
+		window.D2L.AssignmentAttachmentBehavior,
+		window.D2L.AssignmentBehavior
+	],
+	properties: {
+		url: {
+			type: String
+		},
+		apiConfig: {
+			type: Object,
+			value: null
+		},
+		loaded: {
+			type: String
+		},
+		resource: {
+			type: Object
+		},
+		name: {
+			type: String,
+			notify: true
+		},
+		instructions: {
+			type: String,
+			notify: true
+		},
+		dueDate: {
+			type: String,
+			notify: true
+		},
+		addToGrades: {
+			type: Boolean,
+			notify: true
+		},
+		outOf: {
+			type: String,
+			notify: true
+		},
+		canAddGrade: {
+			type: Boolean,
+			notify: true
+		},
+		attachmentsToSave: {
+			type: Array,
+			notify: true
+		},
+		existingAttachments: {
+			type: Array,
+			notify: true
+		},
+		isNewAssignment: Boolean,
+		linkAttachmentFeatureEnabled: {
+			type: Boolean,
+			notify: true
+		},
+		isDraft: {
+			type: Boolean,
+			notify: true
+		},
+		availableCompletionTypes: {
+			type: Object,
+			notify: true
+		},
+		availableSubmissionTypes: {
+			type: Object,
+			notify: true
+		},
+		submissionType: {
+			type: Number,
+			notify: true
+		},
+		completionType: {
+			type: Number,
+			notify: true
+		}
+	},
+	load: function() {
+		var _this = this;
+		var assignmentUrl = this.getAssignmentUrl(this.url);
+		if (!assignmentUrl) {
+			return;
+		}
+		this.callUrl(assignmentUrl)
+			.then(function(response) {
+				if (response.ok) {
+					response.json()
+						.then(function(body) {
+							_this.resource = window.D2L.Hypermedia.Siren.Parse(body);
+							var action = _this.resource.getActionByName('quick-create-folder');
+							if (action) {
+								_this.loaded = true;
+								_this.setInitialValues();
+								_this.canAddGrade = action.getFieldByName('addToGrades') && !_this._fieldHasClass(action, 'addToGrades', 'disabled');
+								_this.linkAttachmentFeatureEnabled = action.hasClass('link-attachment');
+							}
+							_this.fire('d2l-assignment-editor-loaded', _this.loaded);
+						});
+				} else {
+					_this.fire('d2l-assignment-editor-loaded', false);
+				}
+			}).catch(function() {
+				_this.fire('d2l-assignment-editor-loaded', false);
+			});
+	},
+	_existingFileToAttachment: function(file) {
+		var fileUrl = file.getLinkByRel('self').href;
+		var deleteAction = file.getActionByName('delete');
+		return {
+			type: 'Document',
+			name: file.properties.name,
+			id: fileUrl,
+			url: fileUrl,
+			isDeleted: false,
+			deleteAction: deleteAction
+		};
+	},
+	_newFileToAttachment: function(file) {
+		var objectURL = URL.createObjectURL(file);
+		return {
+			type: 'Document',
+			file: file,
+			name: file.name,
+			id: objectURL,
+			url: objectURL,
+			isDeleted: false
+		};
+	},
+	_saveLink: function(attachment, linkAttachAction) {
+		var formData = new FormData();
+		formData.append('href', attachment.url);
+		formData.append('name', attachment.name);
+
+		return this.callUrl(linkAttachAction.href, linkAttachAction.method, formData);
+	},
+	_saveFile: function(attachment, fileUploadAction) {
+		var file = attachment.file;
+		var formData = new FormData();
+		formData.append('file', file, file.name);
+
+		return this.callUrl(fileUploadAction.href, fileUploadAction.method, formData);
+	},
+	_removeFile: function(fileRemoveAction) {
+		return this.callUrl(fileRemoveAction.href, fileRemoveAction.method);
+	},
+	_getAddDeletePromises: function(attachments, attachmentsToSave, existingAttachments) {
+		var _this = this;
+		var promiseArray = [];
+		if (attachments && attachments.hasActionByName('add-file')) {
+			var addFileLink = attachments.getActionByName('add-file');
+			if (addFileLink) {
+				attachmentsToSave.forEach(function(file) {
+					if (!file.isDeleted && file.type === 'Document') {
+						promiseArray.push(_this._saveFile(file, addFileLink));
+					}
+				});
+			}
+		}
+		if (attachments && attachments.hasActionByName('add-link')) {
+			var addLink = attachments.getActionByName('add-link');
+			if (addLink) {
+				attachmentsToSave.forEach(function(link) {
+					if (!link.isDeleted && (link.type !== 'Document')) {
+						promiseArray.push(_this._saveLink(link, addLink));
+					}
+				});
+			}
+		}
+		var filesToDelete = (existingAttachments || []).filter(function(item) {
+			return item.isDeleted && !!item.deleteAction;
+		});
+		filesToDelete.forEach(function(attachment) {
+			promiseArray.push(_this._removeFile(attachment.deleteAction));
+		});
+		return promiseArray;
+	},
+	save: function(name, instructions, dueDate, addToGrades, maximumGrade, attachmentsToSave, existingAttachments, isDraft, submissionType, completionType) {
+		var action = this.resource ? this.resource.getActionByName('quick-create-folder') : null;
+		var data = this._validate(action, name, instructions, dueDate, addToGrades, maximumGrade, isDraft, submissionType, completionType);
+
+		if (!data) {
+			return;
+		}
+
+		if (!this.resource) {
+			this.fire('d2l-assignment-save-failed', data);
+			return;
+		}
+		var _this = this;
+
+		this.callUrl(action.href, action.method, data)
+			.then(function(response) {
+				if (response.ok) {
+					response.json()
+						.then(function(body) {
+							var resource = window.D2L.Hypermedia.Siren.Parse(body);
+							var self = resource.getLinkByRel('self');
+							if (self) {
+								var attachments = resource.getSubEntityByRel('https://assignments.api.brightspace.com/rels/attachments');
+								var promises = _this._getAddDeletePromises(attachments, attachmentsToSave, existingAttachments);
+								var idObj = {
+									id: self.href,
+									isNewAssignment: _this.isNewAssignment,
+									attachment: existingAttachments.concat(attachmentsToSave),
+									urls: _this.populateUrlsFromLinks(resource.links)
+								};
+								Promise.all(promises).then(function(results) { // eslint-disable-line no-undef
+									var savePartialFail = results.some(function(response) {
+										return !response.ok;
+									});
+
+									var message = (savePartialFail) ?
+										'd2l-assignment-save-partial-fail' : 'd2l-assignment-save-complete';
+
+									_this.fire(message, idObj);
+								}, function() {
+									_this.fire('d2l-assignment-save-partial-fail', idObj);
+								});
+							} else {
+								_this.fire('d2l-assignment-save-failed', data);
+							}
+						});
+				} else {
+					_this.fire('d2l-assignment-save-failed', data);
+				}
+			});
+	},
+	setInitialValues: function() {
+		var properties = this.getInitialValues();
+		this.name = properties.name;
+		this.instructions = properties.instructions;
+		this.dueDate = properties.dueDate;
+		this.addToGrades = properties.addToGrades;
+		this.outOf = properties.outOf;
+		this.existingAttachments = properties.existingAttachments;
+		this.attachmentsToSave = properties.attachmentsToSave;
+		this.isDraft = properties.isDraft;
+		this.availableSubmissionTypes = properties.availableSubmissionTypes;
+		this.availableCompletionTypes = properties.availableCompletionTypes;
+	},
+	getInitialValues: function() {
+		var _this = this;
+		var action = this.resource.getActionByName('quick-create-folder');
+		var properties = {};
+		if (action) {
+			properties.name = this._getFieldValue(action, 'name');
+			properties.instructions = this._getFieldValue(action, 'instructions');
+			properties.dueDate = this._getFieldValue(action, 'dueDate');
+			properties.addToGrades = this._getFieldValue(action, 'addToGrades');
+			properties.outOf = this._getFieldValue(action, 'outOf').toString();
+			properties.isDraft = this._getFieldValue(action, 'draft');
+			properties.availableSubmissionTypes = this._getFieldValue(action, 'submissionType');
+			properties.availableCompletionTypes = this._getFieldValue(action, 'completionType');
+		}
+
+		var attachments = this.resource.getSubEntityByRel('https://assignments.api.brightspace.com/rels/attachments');
+		properties.existingAttachments = [];
+
+		if (attachments && attachments.hasEntityByRel('https://assignments.api.brightspace.com/rels/file')) {
+			attachments.getSubEntitiesByRel('https://assignments.api.brightspace.com/rels/file')
+				.forEach(function(fileEntity) {
+					properties.existingAttachments.push(_this._existingFileToAttachment(fileEntity));
+				});
+		}
+
+		if (attachments && attachments.hasEntityByRel('https://assignments.api.brightspace.com/rels/link')) {
+			attachments.getSubEntitiesByRel('https://assignments.api.brightspace.com/rels/link')
+				.forEach(function(linkEntity) {
+					properties.existingAttachments.push(_this.linkToAttachment(linkEntity));
+				});
+		}
+
+		properties.attachmentsToSave = [];
+		return properties;
+	},
+	_fieldHasClass: function(action, fieldName, className) {
+		var field = action.getFieldByName(fieldName);
+		return field && (field.class || []).indexOf(className) > -1;
+	},
+	_getFieldValue: function(action, name) {
+		var field = action.getFieldByName(name);
+		if (field) {
+			return field.value;
+		}
+		return '';
+	},
+	_validate: function(action, name, instructions, dueDate, addToGrades, maximumGrade, isDraft, submissionType, completionType) {
+		var validatedName = name && name.trim();
+		var validatedMaximumGrade = !addToGrades || this._validateGrade(maximumGrade);
+		var fields = [];
+		if (!validatedName) {
+			fields.push('name');
+		}
+		if (!validatedMaximumGrade) {
+			fields.push('maximumGrade');
+		}
+		if (fields.length) {
+			this.fire('d2l-assignment-save-failed', {
+				fields: fields
+			});
+			return;
+		}
+
+		var data = new FormData();
+		data.append('name', validatedName);
+
+		var oldInstructions = action ? this._getFieldValue(action, 'instructions') : '';
+		if ((instructions || oldInstructions) && instructions !== oldInstructions) {
+			data.append('instructions', instructions);
+		}
+
+		var validatedDate = this._processDate(dueDate);
+		var resetDueDate = !validatedDate && action && this._getFieldValue(action, 'dueDate');
+		if (validatedDate || resetDueDate) {
+			data.append('dueDate', resetDueDate ? '' : validatedDate);
+		}
+
+		data.append('addToGrades', addToGrades);
+
+		if (addToGrades) {
+			data.append('maxGradePoint', validatedMaximumGrade);
+		}
+
+		if (this.isNewAssignment) {
+			data.append('draft', isDraft);
+		}
+
+		if (submissionType) {
+			data.append('submissionType', submissionType);
+		}
+
+		if (completionType) {
+			data.append('completionType', completionType);
+		}
+
+		return data;
+	},
+	_processDate: function(date) {
+		var validateDate = new Date(date);
+		var validatedDate;
+		try {
+			validatedDate = validateDate.toISOString();
+		} catch (e) {
+			//
+		}
+		return validatedDate;
+	},
+	_validateGrade: function(grade) {
+		var parsedNumber = this.parseNumber(grade);
+		if (typeof parsedNumber === 'number' && parsedNumber >= 0.01 && parsedNumber <= 9999999999) {
+			return parsedNumber;
+		} else {
+			return false;
+		}
+	}
+});
diff --git a/d2l-assignment-editor.html b/d2l-assignment-editor.html
deleted file mode 100644
index 217b1dd..0000000
--- a/d2l-assignment-editor.html
+++ /dev/null
@@ -1,743 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../lazy-imports/lazy-imports-behavior.html">
-<link rel="import" href="../d2l-attachments-ui/d2l-attachment-list.html">
-<link rel="import" href="../d2l-attachments-ui/d2l-attachment.html">
-<link rel="import" href="../d2l-button/d2l-button.html">
-<link rel="import" href="../d2l-icons/d2l-icon.html">
-<link rel="import" href="../d2l-icons/tier2-icons.html">
-<link rel="import" href="../d2l-inputs/d2l-input-checkbox.html">
-<link rel="import" href="../d2l-inputs/d2l-input-shared-styles.html">
-<link rel="import" href="d2l-field-styles.html">
-<link rel="import" href="d2l-bubble-styles.html">
-<link rel="import" href="./localize-behavior.html">
-<link rel="import" href="../d2l-loading-spinner/d2l-loading-spinner.html">
-<link rel="import" href="./build/select-styles.html">
-<link rel="import" href="d2l-assignment-editor-data.html">
-<link rel="import" href="d2l-assignment-input.html">
-
-<!--
-`d2l-assignment-editor`
-Create Brightspace assignments
-
-@demo demo/d2l-assignment-editor.html
--->
-
-<dom-module id="d2l-assignment-editor">
-	<link rel="lazy-import" group="datetime" href="../d2l-datetime-picker/d2l-datetime-picker.html">
-	<template strip-whitespace>
-		<style include="select-styles d2l-field-styles d2l-input-styles d2l-bubble-styles">
-			[hidden] {
-				display: none;
-			}
-			:host {
-				display: block;
-				--d2l-button: {
-					width: 100%;
-				};
-			}
-			.container {
-				position: relative;
-			}
-			.assignment-options {
-				display: flex;
-			}
-
-			.assignment-options .date-wrapper {
-				line-height: 0;
-			}
-
-			.assignment-options .d2l-field-label {
-				font-weight: normal;
-			}
-
-			.assignment-options > .grade-section {
-				display: inline-flex;
-				flex: 1 0 auto;
-			}
-
-			.assignment-options > div {
-				display: inline-block;
-			}
-
-			.assignment-options > .spacer {
-				flex: 0 0 20px;
-				height: 0;
-				margin: 0;
-			}
-
-			.assignment-options .add-to-grades-wrapper {
-				margin-right: 18px;
-				padding-top: 45px;
-			}
-
-			:host-context([dir="rtl"]) .assignment-options .add-to-grades-wrapper {
-				margin-right: 0;
-				margin-left: 18px;
-			}
-
-			.assignment-options d2l-input-checkbox,
-			.assignment-options d2l-input-checkbox .d2l-field-label {
-				margin: 0;
-			}
-
-			.assignment-options .add-to-grades-wrapper label {
-				padding-left: 10px;
-				white-space: nowrap;
-			}
-
-			:host-context([dir="rtl"]) .assignment-options .add-to-grades-wrapper label {
-				padding-left: 0;
-				padding-right: 10px;
-			}
-
-			.assignment-options .maximum-grade-wrapper[hidden] {
-				display: none;
-			}
-
-			.assignment-options .maximum-grade-wrapper #maximumGrade {
-				width: 4rem;
-			}
-
-			.assignment-options .maximum-grade-wrapper span {
-				display: inline;
-				margin-left: 20px;
-			}
-
-			:host-context([dir="rtl"]) .assignment-options .maximum-grade-wrapper span {
-				margin-left: 0;
-				margin-right: 20px;
-			}
-
-			d2l-loading-spinner {
-				position: absolute;
-				left: 50%;
-				top: 50%;
-				transform: translate(-50%,-50%);
-				z-index: 1;
-			}
-
-			d2l-datetime-picker {
-				--d2l-datetime-picker-label-width: 95px;
-				--d2l-datetime-picker-label-padding: 25px;
-			}
-
-
-			#title-row {
-				display:flex;
-				flex-flow: row wrap;
-			}
-			#pick-existing-label {
-				font-size: 0.8rem; padding: 0.55rem 0.65rem;
-			}
-			#pick-existing-button {
-				height: 2.46rem
-			}
-
-			.dates-and-grades {
-				margin-bottom: 0;
-			}
-
-			#assignmentSubmissionOptions {
-				margin: 1rem 0 0 0;
-			}
-
-			d2l-assignment-input {
-				flex-grow: 1;
-				overflow-wrap: break-word;
-				word-break: break-word;
-				word-wrap: break-word;
-			}
-
-			@media (max-width: 615px), (max-device-width: 960px) {
-				d2l-icon {
-					display: none;
-				}
-
-				.assignment-options {
-					flex-direction: column;
-				}
-
-				.assignment-options > .spacer {
-					display: none;
-				}
-
-				.assignment-options > .grade-section {
-					margin: 0;
-				}
-
-				.dates-and-grades > div,
-				.dates-and-grades > .grade-section {
-					display: block;
-					margin-bottom: 20px;
-				}
-
-				.assignment-options > div:last-of-type {
-					margin-bottom: 0;
-				}
-
-				.dates-and-grades > div label:nth-child(1) {
-					display: inline-block;
-					width: 70px;
-					text-align: right;
-					margin-right: 20px;
-				}
-
-				:host-context([dir="rtl"]) .assignment-options > div > label:nth-child(1) {
-					text-align: left;
-					margin-right: 0;
-					margin-left: 20px;
-				}
-
-				.assignment-options .add-to-grades-wrapper {
-					margin-left: 95px;
-					padding-top: 0;
-				}
-
-				:host-context([dir="rtl"]) .assignment-options .add-to-grades-wrapper {
-					margin-left: 0;
-					margin-right: 95px;
-				}
-
-				.assignment-options .maximum-grade-wrapper {
-					padding-top: 20px;
-				}
-
-				.completion-type-wrapper {
-					margin-top: 20px;
-				}
-
-				#title-row {
-					display:flex;
-					flex-flow: column wrap;
-				}
-				#pick-existing-label {
-					font-size: 0.8rem;
-    				padding: 0.15rem 0;
-					width: 1rem;
-    				margin: 0 auto; /* center in div */
-				}
-
-				:host-context([dir="rtl"]) .settings-wrapper {
-					margin-left: 0;
-					margin-right: 95px;
-				}
-
-				.settings-wrapper {
-					margin-left: 95px;
-				}
-			}
-
-			.assignment-field {
-				flex: auto;
-			}
-		</style>
-
-		<d2l-assignment-editor-data
-			id="data"
-			url="[[url]]"
-			resource="{{resource}}"
-			loaded="{{loaded}}"
-			name={{name}}
-			instructions={{instructions}}
-			due-date={{dueDate}}
-			add-to-grades={{addToGrades}}
-			out-of={{maximumGrade}}
-			can-add-grade={{_canAddGrade}}
-			attachments-to-save={{attachmentsToSave}}
-			existing-attachments={{existingAttachments}}
-			is-new-assignment=[[isNewAssignment]]
-			link-attachment-feature-enabled={{linkAttachmentFeatureEnabled}}
-			available-completion-types={{availableCompletionTypes}}
-			available-submission-types={{availableSubmissionTypes}}
-			is-draft={{isDraft}}
-			api-config=[[apiConfig]]
-		>
-		</d2l-assignment-editor-data>
-
-		<div class="container">
-			<d2l-loading-spinner id="spinner" size="200" hidden="true"></d2l-loading-spinner>
-			<div id="title-row" class="d2l-field-row full-width">
-				<div class="assignment-field">
-					<input class="d2l-input" type="text" id="name"
-					    aria-required="true"
-						autocomplete="off"
-						aria-label$="[[localize('add_assignment', 'assignment', activityName)]]"
-						maxlength="128"
-						placeholder="[[localize('add_assignment', 'assignment', _lowerActivityName)]]"
-						value="{{name::input}}"	/>
-					<div id="name-error" class="d2l-bubble">
-						<span class="d2l-bubble-content">[[localize('name_required')]]</span>
-					</div>
-				</div>
-				<template is="dom-if" if="[[loadExistingEnabled]]">
-					<span id="pick-existing-label" hidden$="[[!isNewAssignment]]">[[localize('or')]]</span>
-					<d2l-button id="pick-existing-button" on-click="_selectExisting" hidden$="[[!isNewAssignment]]">[[localize('select_existing')]]</d2l-button>
-				</template>
-			</div>
-			<div class="d2l-field-row full-width">
-				<d2l-assignment-input
-					id="instructions"
-					loaded=[[loaded]]
-					aria-label="[[localize('add_instructions')]]"
-					placeholder="[[localize('add_instructions')]]"
-					value={{instructions}}
-					max-rows=10
-					enable-html-editor=[[enableHtmlEditor]]
-					is-emoticons-enabled=[[isEmoticonsEnabled]]
-				></d2l-assignment-input>
-			</div>
-			<div class="d2l-field-row assignment-options dates-and-grades">
-				<div class="date-wrapper">
-					<d2l-datetime-picker
-						name="due-date"
-						id="dueDate"
-						locale="[[language]]"
-						overrides="[[__overrides]]"
-						timezone-name="[[__timezone]]"
-						placeholder="[[localize('no_due_date')]]"
-						datetime={{dueDate}}
-						date-label="[[localize('due_date')]]"
-						time-label="[[localize('time')]]"
-						boundary='{"above":250,"below":120}'></d2l-datetime-picker>
-				</div>
-				<div class="spacer"></div>
-				<div class="grade-section" hidden$="[[!_canAddGrade]]">
-					<div class="add-to-grades-wrapper">
-						<d2l-input-checkbox id="addToGrades"
-							name="add-to-grades"
-							checked="{{addToGrades::change}}"
-						><span>[[localize('add_to_grades')]]<span></d2l-input-checkbox>
-					</div>
-					<div class="maximum-grade-wrapper" hidden$="[[!addToGrades]]">
-						<label for="maximumGrade" class="d2l-field-label">[[localize('max_points')]]</label>
-						<input id="maximumGrade"
-								class="d2l-input"
-								type="text"
-								name="maximum-grade"
-								value="{{maximumGrade::input}}" />
-						<div id="maximum-grade-error" class="d2l-bubble">
-							<span class="d2l-bubble-content">[[localize('invalid_grade')]]</span>
-						</div>
-					</div>
-				</div>
-			</div>
-			<div class="d2l-field-row assignment-options" id="assignmentSubmissionOptions">
-				<div class="assignment-type-wrapper">
-					<label class="d2l-field-label">[[localize('submission_type_label')]]</label>
-					<select class="submission-option-select" id="submissionOptionsSelect" value="{{submissionType::change}}"></select>
-				</div>
-				<div class="spacer"></div>
-				<div class="completion-type-wrapper" id="completionType">
-					<label class="d2l-field-label">[[localize('completion_type_label')]]</label>
-					<select class="submission-option-select" id="completionOptionsSelect" value="{{completionType::change}}" ></select>
-				</div>
-			</div>
-			<div class="settings-wrapper"><slot name="activity-settings"></slot></div>
-			<div class="d2l-field-row full-width" hidden$="[[_hasNoAttachments(attachmentsToSave.length, existingAttachments.length)]]">
-				<d2l-attachment-list show-title>
-					<!-- length properties added to help update the binding when the arrays change -->
-					<template
-						id="attachments"
-						is="dom-repeat"
-						items="[[_getFileList(attachmentsToSave, existingAttachments, attachmentsToSave.length, existingAttachments.length)]]"
-					>
-						<li slot="attachment" class="panel">
-							<d2l-attachment
-								is-edit-mode
-								is-deleted="[[item.isDeleted]]"
-								is-in-focus="[[item.isInFocus]]"
-								attachment-id=[[item.id]]
-								attachment=[[item]]
-								blob=[[item.file]]
-								api-config=[[apiConfig]]
-								is-mobile-view=[[isMobileView]]
-								tenant-url="[[tenantUrl]]"
-							>
-							</d2l-attachment>
-						</li>
-					</template>
-				</d2l-attachment-list>
-			</div>
-		</div>
-	</template>
-
-	<script>
-		Polymer({
-
-			is: 'd2l-assignment-editor',
-
-			behaviors: [
-				D2L.PolymerBehaviors.Assignment.LocalizeBehavior,
-				Polymer.LazyImportsBehavior
-			],
-			listeners: {
-				'd2l-assignment-save-failed': '_failed',
-				'd2l-assignment-save-complete': '_saved',
-				'd2l-attachment-removed': '_onAttachmentRemoved',
-				'd2l-attachment-restored': '_onAttachmentRestored',
-				'd2l-assignment-editor-loaded': '_onAssignmentEditorLoaded'
-			},
-			/**
-				 * Fired when the editor is loaded.
-				 * For new assigments this indicates the user has the ability to create assignments.
-				 * For existing assigments this indicates the user has the ability to edit the assignment.
-				 *
-				 * `e.detail` is set true or false
-				 *
-				 * @event d2l-assignment-editor-loaded
-				 * @param {Object} e Event parameters.
-				 */
-			properties: {
-				name: {
-					type: String,
-					observer: '_nameChanged'
-				},
-				/**
-				 * Instructions for the assignment. Loaded from url if provided.
-				 */
-				instructions: {
-					type: String
-				},
-				/**
-				 * Due date for the assignment. Loaded from url if provided.
-				 * ISO 8601 format
-				 */
-				dueDate: {
-					type: String
-				},
-				/**
-				 * Api url
-				 *
-				 * For new assignments this should be the assignments home URL.
-				 * For editing existing assignments it should be the assignment URL.
-				 */
-				url: {
-					type: String,
-					observer: '_load'
-				},
-				/**
-				 * Whether the component is loaded.
-				 * Depends on user permissions.
-				 *
-				 * This is set as soon as the component is ready for editing.
-				 */
-				loaded: {
-					notify: true,
-					readOnly: true,
-					type: Boolean,
-					value: false
-				},
-				activityName: {
-					type: String,
-					value: 'dropbox'
-				},
-				resource: {
-					type: Object
-				},
-				_lowerActivityName: {
-					type: String,
-					computed: '_toLowerCase(activityName)'
-				},
-				/**
-				 * Whether the Add to Grades checkbox is checked.
-				 * True if a new grade item associated with this assignment should be added to the grade book.
-				 */
-				addToGrades: {
-					type: Boolean,
-					value: false
-				},
-				/**
-				 * The maximum grade an assignment can be out of.
-				 */
-				maximumGrade: {
-					type: String,
-					observer: '_gradeChanged'
-				},
-				_canAddGrade: {
-					type: Boolean,
-					value: false
-				},
-				attachmentsToSave: {
-					type: Array,
-					value: function() {
-						return [];
-					}
-				},
-				existingAttachments: {
-					type: Array,
-					value: function() {
-						return [];
-					}
-				},
-				isNewAssignment: {
-					type: Boolean,
-					value: false
-				},
-				loadExistingEnabled: {
-					type: Boolean,
-					value: false
-				},
-				linkAttachmentFeatureEnabled: {
-					type: Boolean,
-					value: false,
-					notify: true
-				},
-				isDraft: {
-					type: Boolean,
-					value: false
-				},
-				apiConfig: {
-					type: Object,
-					value: null
-				},
-				isMobileView: {
-					type: Boolean,
-					value: false
-				},
-				tenantUrl: {
-					type: String
-				},
-				enableHtmlEditor: {
-					type: Boolean,
-					value: false
-				},
-				isEmoticonsEnabled: {
-					type: Boolean,
-					value: false
-				},
-				availableCompletionTypes: {
-					type: Object,
-					value: null
-				},
-				availableSubmissionTypes: {
-					type: Object,
-					value: null,
-					observer: '_buildSubmissionOptions'
-				},
-				submissionType: {
-					type: Number,
-					observer: '_setCompletionOptions'
-				},
-				completionType: {
-					type: Number
-				}
-			},
-			attached: function() {
-				Polymer.RenderStatus.afterNextRender(this, function() {
-					this.importLazyGroup('datetime');
-				}.bind(this));
-			},
-			_onAttachmentRemoved: function(e) {
-				var attachment = this.$.attachments.modelForElement(e.target).item;
-				this._removeAttachment(attachment, e.target);
-			},
-			_onAttachmentRestored: function(e) {
-				var attachment = this.$.attachments.modelForElement(e.target).item;
-				this._toggleRemoveAttachments(attachment, e.target);
-			},
-			_hasNoAttachments: function(attachmentsToSaveLength, existingAttachmentsLength) {
-				return attachmentsToSaveLength + existingAttachmentsLength === 0;
-			},
-			_selectExisting: function() {
-				this.fire('select-existing-click', {});
-			},
-			/**
-			 * Clears the current assignment fields
-			 *
-			 * @method clear
-			 * @param {boolean} skipFocus If false sets focus to the first field in the component
-			 */
-			clear: function(skipFocus) {
-				this._buildSubmissionOptions();
-				this.$.data.setInitialValues();
-				this._toggleBubble('name', false);
-				this._toggleBubble('maximumGrade', false);
-				this._clearSpinner();
-				if (!skipFocus) {
-					this.focus();
-				}
-			},
-			/**
-			 * Focus on the name field
-			 * @method focus
-			*/
-			focus: function() {
-				this.$.name.focus();
-			},
-			/**
-			 * Saves the current assignment
-			 *
-			 * @method save
-			 */
-			save: function() {
-				var _this = this;
-				this._spinnerTimeout = setTimeout(function() {
-					_this.$.spinner.hidden = false;
-				}, 2000);
-				this.$.data.save(this.name, this.instructions, this.dueDate, this.addToGrades, this.maximumGrade, this.attachmentsToSave, this.existingAttachments, this.isDraft, this.submissionType, this.completionType);
-			},
-			/**
-			 * Checks to see if any of the properties have been changed
-			 *
-			 * @method checkDirty
-			 */
-			checkDirty: function() {
-				var initialValues = this.$.data.getInitialValues();
-				var isDirty =
-					initialValues.name !== this.name
-					|| initialValues.instructions !== this.instructions
-					|| initialValues.dueDate !== this.dueDate
-					|| initialValues.addToGrades !== this.addToGrades
-					|| initialValues.outOf !== this.maximumGrade
-					|| this.existingAttachments.some(function(item) { return !!item.isDeleted; })
-					|| this.attachmentsToSave.length > 0;
-
-				return isDirty;
-			},
-			/**
-			 * Adds the files as attachments
-			 *
-			 * @method addFiles
-			 * @param {FileList} files contains file objects
-			 */
-			addFiles: function(files) {
-				files = files || [];
-				var _this = this;
-
-				Array.prototype.forEach.call(files, function(file) {
-					_this.push('attachmentsToSave', _this.$.data._newFileToAttachment(file));
-				});
-			},
-			addLinks: function(links) {
-				links = links || [];
-				var _this = this;
-
-				links.forEach(function(link) {
-					_this.push('attachmentsToSave', _this.$.data.newLinkToAttachment(link));
-				});
-			},
-			_getFileList: function(attachmentsToAdd, existingAttachments) {
-				var attachmentsToAddClone = attachmentsToAdd.slice(0);
-				if (attachmentsToAddClone.length > 0) attachmentsToAddClone[attachmentsToAddClone.length - 1].isInFocus = true;
-				return existingAttachments.concat(attachmentsToAdd);
-			},
-			_removeFromAttachmentsToAdd: function(removeAttachment) {
-				var index = this.attachmentsToSave.indexOf(removeAttachment);
-				if (index !== -1) {
-					this.splice('attachmentsToSave', index, 1);
-					return true;
-				}
-				return false;
-			},
-			_attachmentIsDeleted: function(attachment) {
-				return attachment.isDeleted;
-			},
-			_toggleRemoveAttachments: function(removeAttachment, target) {
-				this.$.attachments.modelForElement(target).set('item.isDeleted', !removeAttachment.isDeleted);
-			},
-			_removeAttachment: function(removeAttachment, target) {
-				if (this.isNewAssignment) {
-					this._removeFromAttachmentsToAdd(removeAttachment);
-				} else {
-					this._toggleRemoveAttachments(removeAttachment, target);
-				}
-			},
-			_load: function() {
-				this.$.data.load();
-			},
-			_failed: function(e) {
-				this._clearSpinner();
-				if (e.detail.fields) {
-					e.stopPropagation();
-					for (var fieldIndex = 0; fieldIndex < e.detail.fields.length; fieldIndex++) {
-						this._toggleBubble(e.detail.fields[fieldIndex], true);
-					}
-				}
-			},
-			_saved: function() {
-				this._clearSpinner();
-			},
-			_nameChanged: function(newValue, oldValue) {
-				if (!oldValue) {
-					this._toggleBubble('name', false);
-				}
-			},
-			_toggleBubble: function(field, show) {
-				var fieldElement = this.$[field];
-				var bubble = Polymer.dom(fieldElement).nextElementSibling;
-				this.toggleClass('d2l-bubble-show', show, bubble);
-				if (show) {
-					fieldElement.setAttribute('aria-invalid', true);
-					this.fire('d2l-assignment-content-invalid');
-				} else {
-					fieldElement.removeAttribute('aria-invalid');
-					this.fire('d2l-assignment-clear-content-invalid');
-				}
-			},
-			_toggleMaxGradeVisibility: function() {
-				this.addToGrades = !this.addToGrades;
-			},
-			_setMaxGradeCheckbox: function(checked) {
-				this.$.addToGrades.checked = checked;
-				this.addToGrades = checked;
-			},
-			_toLowerCase: function(value) {
-				return value.toLocaleLowerCase(this.language);
-			},
-			_gradeChanged: function() {
-				this._toggleBubble('maximumGrade', false);
-			},
-			_clearSpinner: function() {
-				clearTimeout(this._spinnerTimeout);
-				this.$.spinner.hidden = true;
-			},
-			_onAssignmentEditorLoaded: function(e) {
-				this._setLoaded(e.detail);
-			},
-			_buildSubmissionOptions: function() {
-				if (!this.availableSubmissionTypes) {
-					this.$.assignmentSubmissionOptions.hidden = true;
-				} else {
-					var selectElement = this.$.submissionOptionsSelect;
-					this._clearCompletionOptions(selectElement);
-					this.$.assignmentSubmissionOptions.hidden = false;
-					this.availableSubmissionTypes.forEach(function(type) {
-						var option = document.createElement('option');
-						option.text = type.title;
-						option.value = type.value;
-						selectElement.add(option);
-					});
-					this.submissionType = selectElement.value;
-					this._setCompletionOptions(0);
-				}
-			},
-			_setCompletionOptions: function(e) {
-				var selectElement = this.$.completionOptionsSelect;
-				this._clearCompletionOptions(selectElement);
-				this.availableSubmissionTypes.some(function(submissionType) {
-					if (submissionType.value === parseInt(e)) {
-						if (!submissionType.completionTypes) {
-							this.$.completionType.hidden = true;
-						} else {
-							this.availableCompletionTypes.forEach(function(completionType) {
-								if (submissionType.completionTypes.indexOf(completionType.value) > -1) {
-									var option = document.createElement('option');
-									option.text = completionType.title;
-									option.value = completionType.value;
-									selectElement.add(option);
-								}
-							});
-							this.$.completionType.hidden = false;
-						}
-
-						this.completionType = selectElement.value;
-						return true;
-					}
-				}.bind(this));
-			},
-			_clearCompletionOptions: function(selectElement) {
-				selectElement.options.length = 0;
-			}
-		});
-	</script>
-</dom-module>
diff --git a/d2l-assignment-editor.js b/d2l-assignment-editor.js
new file mode 100644
index 0000000..f093666
--- /dev/null
+++ b/d2l-assignment-editor.js
@@ -0,0 +1,685 @@
+/**
+`d2l-assignment-editor`
+Create Brightspace assignments
+
+@demo demo/d2l-assignment-editor.html
+*/
+/*
+  FIXME(polymer-modulizer): the above comments were extracted
+  from HTML and may be out of place here. Review them and
+  then delete this comment!
+*/
+import '@polymer/polymer/polymer-legacy.js';
+
+import 'lazy-imports/lazy-imports-behavior.js';
+import 'd2l-attachments-ui/d2l-attachment-list.js';
+import 'd2l-attachments-ui/d2l-attachment.js';
+import 'd2l-button/d2l-button.js';
+import 'd2l-icons/d2l-icon.js';
+import 'd2l-icons/tier2-icons.js';
+import 'd2l-inputs/d2l-input-checkbox.js';
+import 'd2l-inputs/d2l-input-shared-styles.js';
+import './d2l-field-styles.js';
+import './d2l-bubble-styles.js';
+import './localize-behavior.js';
+import 'd2l-loading-spinner/d2l-loading-spinner.js';
+import './d2l-assignment-editor-data.js';
+import './d2l-assignment-input.js';
+import 'd2l-datetime-picker/d2l-datetime-picker.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-assignment-editor">
+	
+	<template strip-whitespace="">
+		<style include="select-styles d2l-field-styles d2l-input-styles d2l-bubble-styles">
+			[hidden] {
+				display: none;
+			}
+			:host {
+				display: block;
+				--d2l-button: {
+					width: 100%;
+				};
+			}
+			.container {
+				position: relative;
+			}
+			.assignment-options {
+				display: flex;
+			}
+
+			.assignment-options .date-wrapper {
+				line-height: 0;
+			}
+
+			.assignment-options .d2l-field-label {
+				font-weight: normal;
+			}
+
+			.assignment-options > .grade-section {
+				display: inline-flex;
+				flex: 1 0 auto;
+			}
+
+			.assignment-options > div {
+				display: inline-block;
+			}
+
+			.assignment-options > .spacer {
+				flex: 0 0 20px;
+				height: 0;
+				margin: 0;
+			}
+
+			.assignment-options .add-to-grades-wrapper {
+				margin-right: 18px;
+				padding-top: 45px;
+			}
+
+			:host-context([dir="rtl"]) .assignment-options .add-to-grades-wrapper {
+				margin-right: 0;
+				margin-left: 18px;
+			}
+
+			.assignment-options d2l-input-checkbox,
+			.assignment-options d2l-input-checkbox .d2l-field-label {
+				margin: 0;
+			}
+
+			.assignment-options .add-to-grades-wrapper label {
+				padding-left: 10px;
+				white-space: nowrap;
+			}
+
+			:host-context([dir="rtl"]) .assignment-options .add-to-grades-wrapper label {
+				padding-left: 0;
+				padding-right: 10px;
+			}
+
+			.assignment-options .maximum-grade-wrapper[hidden] {
+				display: none;
+			}
+
+			.assignment-options .maximum-grade-wrapper #maximumGrade {
+				width: 4rem;
+			}
+
+			.assignment-options .maximum-grade-wrapper span {
+				display: inline;
+				margin-left: 20px;
+			}
+
+			:host-context([dir="rtl"]) .assignment-options .maximum-grade-wrapper span {
+				margin-left: 0;
+				margin-right: 20px;
+			}
+
+			d2l-loading-spinner {
+				position: absolute;
+				left: 50%;
+				top: 50%;
+				transform: translate(-50%,-50%);
+				z-index: 1;
+			}
+
+			d2l-datetime-picker {
+				--d2l-datetime-picker-label-width: 95px;
+				--d2l-datetime-picker-label-padding: 25px;
+			}
+
+
+			#title-row {
+				display:flex;
+				flex-flow: row wrap;
+			}
+			#pick-existing-label {
+				font-size: 0.8rem; padding: 0.55rem 0.65rem;
+			}
+			#pick-existing-button {
+				height: 2.46rem
+			}
+
+			.dates-and-grades {
+				margin-bottom: 0;
+			}
+
+			#assignmentSubmissionOptions {
+				margin: 1rem 0 0 0;
+			}
+
+			d2l-assignment-input {
+				flex-grow: 1;
+				overflow-wrap: break-word;
+				word-break: break-word;
+				word-wrap: break-word;
+			}
+
+			@media (max-width: 615px), (max-device-width: 960px) {
+				d2l-icon {
+					display: none;
+				}
+
+				.assignment-options {
+					flex-direction: column;
+				}
+
+				.assignment-options > .spacer {
+					display: none;
+				}
+
+				.assignment-options > .grade-section {
+					margin: 0;
+				}
+
+				.dates-and-grades > div,
+				.dates-and-grades > .grade-section {
+					display: block;
+					margin-bottom: 20px;
+				}
+
+				.assignment-options > div:last-of-type {
+					margin-bottom: 0;
+				}
+
+				.dates-and-grades > div label:nth-child(1) {
+					display: inline-block;
+					width: 70px;
+					text-align: right;
+					margin-right: 20px;
+				}
+
+				:host-context([dir="rtl"]) .assignment-options > div > label:nth-child(1) {
+					text-align: left;
+					margin-right: 0;
+					margin-left: 20px;
+				}
+
+				.assignment-options .add-to-grades-wrapper {
+					margin-left: 95px;
+					padding-top: 0;
+				}
+
+				:host-context([dir="rtl"]) .assignment-options .add-to-grades-wrapper {
+					margin-left: 0;
+					margin-right: 95px;
+				}
+
+				.assignment-options .maximum-grade-wrapper {
+					padding-top: 20px;
+				}
+
+				.completion-type-wrapper {
+					margin-top: 20px;
+				}
+
+				#title-row {
+					display:flex;
+					flex-flow: column wrap;
+				}
+				#pick-existing-label {
+					font-size: 0.8rem;
+					padding: 0.15rem 0;
+					width: 1rem;
+					margin: 0 auto; /* center in div */
+				}
+
+				:host-context([dir="rtl"]) .settings-wrapper {
+					margin-left: 0;
+					margin-right: 95px;
+				}
+
+				.settings-wrapper {
+					margin-left: 95px;
+				}
+			}
+
+			.assignment-field {
+				flex: auto;
+			}
+		</style>
+
+		<d2l-assignment-editor-data id="data" url="[[url]]" resource="{{resource}}" loaded="{{loaded}}" name="{{name}}" instructions="{{instructions}}" due-date="{{dueDate}}" add-to-grades="{{addToGrades}}" out-of="{{maximumGrade}}" can-add-grade="{{_canAddGrade}}" attachments-to-save="{{attachmentsToSave}}" existing-attachments="{{existingAttachments}}" is-new-assignment="[[isNewAssignment]]" link-attachment-feature-enabled="{{linkAttachmentFeatureEnabled}}" available-completion-types="{{availableCompletionTypes}}" available-submission-types="{{availableSubmissionTypes}}" is-draft="{{isDraft}}" api-config="[[apiConfig]]">
+		</d2l-assignment-editor-data>
+
+		<div class="container">
+			<d2l-loading-spinner id="spinner" size="200" hidden="true"></d2l-loading-spinner>
+			<div id="title-row" class="d2l-field-row full-width">
+				<div class="assignment-field">
+					<input class="d2l-input" type="text" id="name" aria-required="true" autocomplete="off" aria-label$="[[localize('add_assignment', 'assignment', activityName)]]" maxlength="128" placeholder="[[localize('add_assignment', 'assignment', _lowerActivityName)]]" value="{{name::input}}">
+					<div id="name-error" class="d2l-bubble">
+						<span class="d2l-bubble-content">[[localize('name_required')]]</span>
+					</div>
+				</div>
+				<template is="dom-if" if="[[loadExistingEnabled]]">
+					<span id="pick-existing-label" hidden$="[[!isNewAssignment]]">[[localize('or')]]</span>
+					<d2l-button id="pick-existing-button" on-click="_selectExisting" hidden$="[[!isNewAssignment]]">[[localize('select_existing')]]</d2l-button>
+				</template>
+			</div>
+			<div class="d2l-field-row full-width">
+				<d2l-assignment-input id="instructions" loaded="[[loaded]]" aria-label="[[localize('add_instructions')]]" placeholder="[[localize('add_instructions')]]" value="{{instructions}}" max-rows="10" enable-html-editor="[[enableHtmlEditor]]" is-emoticons-enabled="[[isEmoticonsEnabled]]"></d2l-assignment-input>
+			</div>
+			<div class="d2l-field-row assignment-options dates-and-grades">
+				<div class="date-wrapper">
+					<d2l-datetime-picker name="due-date" id="dueDate" locale="[[language]]" overrides="[[__overrides]]" timezone-name="[[__timezone]]" placeholder="[[localize('no_due_date')]]" datetime="{{dueDate}}" date-label="[[localize('due_date')]]" time-label="[[localize('time')]]" boundary="{&quot;above&quot;:250,&quot;below&quot;:120}"></d2l-datetime-picker>
+				</div>
+				<div class="spacer"></div>
+				<div class="grade-section" hidden$="[[!_canAddGrade]]">
+					<div class="add-to-grades-wrapper">
+						<d2l-input-checkbox id="addToGrades" name="add-to-grades" checked="{{addToGrades::change}}"><span>[[localize('add_to_grades')]]<span></span></span></d2l-input-checkbox>
+					</div>
+					<div class="maximum-grade-wrapper" hidden$="[[!addToGrades]]">
+						<label for="maximumGrade" class="d2l-field-label">[[localize('max_points')]]</label>
+						<input id="maximumGrade" class="d2l-input" type="text" name="maximum-grade" value="{{maximumGrade::input}}">
+						<div id="maximum-grade-error" class="d2l-bubble">
+							<span class="d2l-bubble-content">[[localize('invalid_grade')]]</span>
+						</div>
+					</div>
+				</div>
+			</div>
+			<div class="d2l-field-row assignment-options" id="assignmentSubmissionOptions">
+				<div class="assignment-type-wrapper">
+					<label class="d2l-field-label">[[localize('submission_type_label')]]</label>
+					<select class="submission-option-select" id="submissionOptionsSelect" value="{{submissionType::change}}"></select>
+				</div>
+				<div class="spacer"></div>
+				<div class="completion-type-wrapper" id="completionType">
+					<label class="d2l-field-label">[[localize('completion_type_label')]]</label>
+					<select class="submission-option-select" id="completionOptionsSelect" value="{{completionType::change}}"></select>
+				</div>
+			</div>
+			<div class="settings-wrapper"><slot name="activity-settings"></slot></div>
+			<div class="d2l-field-row full-width" hidden$="[[_hasNoAttachments(attachmentsToSave.length, existingAttachments.length)]]">
+				<d2l-attachment-list show-title="">
+					<!-- length properties added to help update the binding when the arrays change -->
+					<template id="attachments" is="dom-repeat" items="[[_getFileList(attachmentsToSave, existingAttachments, attachmentsToSave.length, existingAttachments.length)]]">
+						<li slot="attachment" class="panel">
+							<d2l-attachment is-edit-mode="" is-deleted="[[item.isDeleted]]" is-in-focus="[[item.isInFocus]]" attachment-id="[[item.id]]" attachment="[[item]]" blob="[[item.file]]" api-config="[[apiConfig]]" is-mobile-view="[[isMobileView]]" tenant-url="[[tenantUrl]]">
+							</d2l-attachment>
+						</li>
+					</template>
+				</d2l-attachment-list>
+			</div>
+		</div>
+	</template>
+
+	
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
+Polymer({
+
+	is: 'd2l-assignment-editor',
+
+	behaviors: [
+		D2L.PolymerBehaviors.Assignment.LocalizeBehavior,
+		Polymer.LazyImportsBehavior
+	],
+	listeners: {
+		'd2l-assignment-save-failed': '_failed',
+		'd2l-assignment-save-complete': '_saved',
+		'd2l-attachment-removed': '_onAttachmentRemoved',
+		'd2l-attachment-restored': '_onAttachmentRestored',
+		'd2l-assignment-editor-loaded': '_onAssignmentEditorLoaded'
+	},
+	/**
+		 * Fired when the editor is loaded.
+		 * For new assigments this indicates the user has the ability to create assignments.
+		 * For existing assigments this indicates the user has the ability to edit the assignment.
+		 *
+		 * `e.detail` is set true or false
+		 *
+		 * @event d2l-assignment-editor-loaded
+		 * @param {Object} e Event parameters.
+		 */
+	properties: {
+		name: {
+			type: String,
+			observer: '_nameChanged'
+		},
+		/**
+		 * Instructions for the assignment. Loaded from url if provided.
+		 */
+		instructions: {
+			type: String
+		},
+		/**
+		 * Due date for the assignment. Loaded from url if provided.
+		 * ISO 8601 format
+		 */
+		dueDate: {
+			type: String
+		},
+		/**
+		 * Api url
+		 *
+		 * For new assignments this should be the assignments home URL.
+		 * For editing existing assignments it should be the assignment URL.
+		 */
+		url: {
+			type: String,
+			observer: '_load'
+		},
+		/**
+		 * Whether the component is loaded.
+		 * Depends on user permissions.
+		 *
+		 * This is set as soon as the component is ready for editing.
+		 */
+		loaded: {
+			notify: true,
+			readOnly: true,
+			type: Boolean,
+			value: false
+		},
+		activityName: {
+			type: String,
+			value: 'dropbox'
+		},
+		resource: {
+			type: Object
+		},
+		_lowerActivityName: {
+			type: String,
+			computed: '_toLowerCase(activityName)'
+		},
+		/**
+		 * Whether the Add to Grades checkbox is checked.
+		 * True if a new grade item associated with this assignment should be added to the grade book.
+		 */
+		addToGrades: {
+			type: Boolean,
+			value: false
+		},
+		/**
+		 * The maximum grade an assignment can be out of.
+		 */
+		maximumGrade: {
+			type: String,
+			observer: '_gradeChanged'
+		},
+		_canAddGrade: {
+			type: Boolean,
+			value: false
+		},
+		attachmentsToSave: {
+			type: Array,
+			value: function() {
+				return [];
+			}
+		},
+		existingAttachments: {
+			type: Array,
+			value: function() {
+				return [];
+			}
+		},
+		isNewAssignment: {
+			type: Boolean,
+			value: false
+		},
+		loadExistingEnabled: {
+			type: Boolean,
+			value: false
+		},
+		linkAttachmentFeatureEnabled: {
+			type: Boolean,
+			value: false,
+			notify: true
+		},
+		isDraft: {
+			type: Boolean,
+			value: false
+		},
+		apiConfig: {
+			type: Object,
+			value: null
+		},
+		isMobileView: {
+			type: Boolean,
+			value: false
+		},
+		tenantUrl: {
+			type: String
+		},
+		enableHtmlEditor: {
+			type: Boolean,
+			value: false
+		},
+		isEmoticonsEnabled: {
+			type: Boolean,
+			value: false
+		},
+		availableCompletionTypes: {
+			type: Object,
+			value: null
+		},
+		availableSubmissionTypes: {
+			type: Object,
+			value: null,
+			observer: '_buildSubmissionOptions'
+		},
+		submissionType: {
+			type: Number,
+			observer: '_setCompletionOptions'
+		},
+		completionType: {
+			type: Number
+		}
+	},
+	attached: function() {
+		Polymer.RenderStatus.afterNextRender(this, function() {
+			this.importLazyGroup('datetime');
+		}.bind(this));
+	},
+	_onAttachmentRemoved: function(e) {
+		var attachment = this.$.attachments.modelForElement(e.target).item;
+		this._removeAttachment(attachment, e.target);
+	},
+	_onAttachmentRestored: function(e) {
+		var attachment = this.$.attachments.modelForElement(e.target).item;
+		this._toggleRemoveAttachments(attachment, e.target);
+	},
+	_hasNoAttachments: function(attachmentsToSaveLength, existingAttachmentsLength) {
+		return attachmentsToSaveLength + existingAttachmentsLength === 0;
+	},
+	_selectExisting: function() {
+		this.fire('select-existing-click', {});
+	},
+	/**
+	 * Clears the current assignment fields
+	 *
+	 * @method clear
+	 * @param {boolean} skipFocus If false sets focus to the first field in the component
+	 */
+	clear: function(skipFocus) {
+		this._buildSubmissionOptions();
+		this.$.data.setInitialValues();
+		this._toggleBubble('name', false);
+		this._toggleBubble('maximumGrade', false);
+		this._clearSpinner();
+		if (!skipFocus) {
+			this.focus();
+		}
+	},
+	/**
+	 * Focus on the name field
+	 * @method focus
+	*/
+	focus: function() {
+		this.$.name.focus();
+	},
+	/**
+	 * Saves the current assignment
+	 *
+	 * @method save
+	 */
+	save: function() {
+		var _this = this;
+		this._spinnerTimeout = setTimeout(function() {
+			_this.$.spinner.hidden = false;
+		}, 2000);
+		this.$.data.save(this.name, this.instructions, this.dueDate, this.addToGrades, this.maximumGrade, this.attachmentsToSave, this.existingAttachments, this.isDraft, this.submissionType, this.completionType);
+	},
+	/**
+	 * Checks to see if any of the properties have been changed
+	 *
+	 * @method checkDirty
+	 */
+	checkDirty: function() {
+		var initialValues = this.$.data.getInitialValues();
+		var isDirty =
+			initialValues.name !== this.name
+			|| initialValues.instructions !== this.instructions
+			|| initialValues.dueDate !== this.dueDate
+			|| initialValues.addToGrades !== this.addToGrades
+			|| initialValues.outOf !== this.maximumGrade
+			|| this.existingAttachments.some(function(item) { return !!item.isDeleted; })
+			|| this.attachmentsToSave.length > 0;
+
+		return isDirty;
+	},
+	/**
+	 * Adds the files as attachments
+	 *
+	 * @method addFiles
+	 * @param {FileList} files contains file objects
+	 */
+	addFiles: function(files) {
+		files = files || [];
+		var _this = this;
+
+		Array.prototype.forEach.call(files, function(file) {
+			_this.push('attachmentsToSave', _this.$.data._newFileToAttachment(file));
+		});
+	},
+	addLinks: function(links) {
+		links = links || [];
+		var _this = this;
+
+		links.forEach(function(link) {
+			_this.push('attachmentsToSave', _this.$.data.newLinkToAttachment(link));
+		});
+	},
+	_getFileList: function(attachmentsToAdd, existingAttachments) {
+		var attachmentsToAddClone = attachmentsToAdd.slice(0);
+		if (attachmentsToAddClone.length > 0) attachmentsToAddClone[attachmentsToAddClone.length - 1].isInFocus = true;
+		return existingAttachments.concat(attachmentsToAdd);
+	},
+	_removeFromAttachmentsToAdd: function(removeAttachment) {
+		var index = this.attachmentsToSave.indexOf(removeAttachment);
+		if (index !== -1) {
+			this.splice('attachmentsToSave', index, 1);
+			return true;
+		}
+		return false;
+	},
+	_attachmentIsDeleted: function(attachment) {
+		return attachment.isDeleted;
+	},
+	_toggleRemoveAttachments: function(removeAttachment, target) {
+		this.$.attachments.modelForElement(target).set('item.isDeleted', !removeAttachment.isDeleted);
+	},
+	_removeAttachment: function(removeAttachment, target) {
+		if (this.isNewAssignment) {
+			this._removeFromAttachmentsToAdd(removeAttachment);
+		} else {
+			this._toggleRemoveAttachments(removeAttachment, target);
+		}
+	},
+	_load: function() {
+		this.$.data.load();
+	},
+	_failed: function(e) {
+		this._clearSpinner();
+		if (e.detail.fields) {
+			e.stopPropagation();
+			for (var fieldIndex = 0; fieldIndex < e.detail.fields.length; fieldIndex++) {
+				this._toggleBubble(e.detail.fields[fieldIndex], true);
+			}
+		}
+	},
+	_saved: function() {
+		this._clearSpinner();
+	},
+	_nameChanged: function(newValue, oldValue) {
+		if (!oldValue) {
+			this._toggleBubble('name', false);
+		}
+	},
+	_toggleBubble: function(field, show) {
+		var fieldElement = this.$[field];
+		var bubble = Polymer.dom(fieldElement).nextElementSibling;
+		this.toggleClass('d2l-bubble-show', show, bubble);
+		if (show) {
+			fieldElement.setAttribute('aria-invalid', true);
+			this.fire('d2l-assignment-content-invalid');
+		} else {
+			fieldElement.removeAttribute('aria-invalid');
+			this.fire('d2l-assignment-clear-content-invalid');
+		}
+	},
+	_toggleMaxGradeVisibility: function() {
+		this.addToGrades = !this.addToGrades;
+	},
+	_setMaxGradeCheckbox: function(checked) {
+		this.$.addToGrades.checked = checked;
+		this.addToGrades = checked;
+	},
+	_toLowerCase: function(value) {
+		return value.toLocaleLowerCase(this.language);
+	},
+	_gradeChanged: function() {
+		this._toggleBubble('maximumGrade', false);
+	},
+	_clearSpinner: function() {
+		clearTimeout(this._spinnerTimeout);
+		this.$.spinner.hidden = true;
+	},
+	_onAssignmentEditorLoaded: function(e) {
+		this._setLoaded(e.detail);
+	},
+	_buildSubmissionOptions: function() {
+		if (!this.availableSubmissionTypes) {
+			this.$.assignmentSubmissionOptions.hidden = true;
+		} else {
+			var selectElement = this.$.submissionOptionsSelect;
+			this._clearCompletionOptions(selectElement);
+			this.$.assignmentSubmissionOptions.hidden = false;
+			this.availableSubmissionTypes.forEach(function(type) {
+				var option = document.createElement('option');
+				option.text = type.title;
+				option.value = type.value;
+				selectElement.add(option);
+			});
+			this.submissionType = selectElement.value;
+			this._setCompletionOptions(0);
+		}
+	},
+	_setCompletionOptions: function(e) {
+		var selectElement = this.$.completionOptionsSelect;
+		this._clearCompletionOptions(selectElement);
+		this.availableSubmissionTypes.some(function(submissionType) {
+			if (submissionType.value === parseInt(e)) {
+				if (!submissionType.completionTypes) {
+					this.$.completionType.hidden = true;
+				} else {
+					this.availableCompletionTypes.forEach(function(completionType) {
+						if (submissionType.completionTypes.indexOf(completionType.value) > -1) {
+							var option = document.createElement('option');
+							option.text = completionType.title;
+							option.value = completionType.value;
+							selectElement.add(option);
+						}
+					});
+					this.$.completionType.hidden = false;
+				}
+
+				this.completionType = selectElement.value;
+				return true;
+			}
+		}.bind(this));
+	},
+	_clearCompletionOptions: function(selectElement) {
+		selectElement.options.length = 0;
+	}
+});
diff --git a/d2l-assignment-html-editor.html b/d2l-assignment-html-editor.html
deleted file mode 100644
index e5c7139..0000000
--- a/d2l-assignment-html-editor.html
+++ /dev/null
@@ -1,153 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-html-editor/d2l-html-editor-client-framed.html">
-<link rel="import" href="../d2l-html-editor/d2l-html-editor.html">
-<link rel="import" href="../d2l-inputs/d2l-input-shared-styles.html">
-
-<dom-module id="d2l-assignment-html-editor">
-	<template strip-whitespace>
-		<style>
-			d2l-html-editor>.d2l-richtext-editor-container {
-				@apply --d2l-input;
-				padding: 0.4rem 1rem;
-			}
-
-			d2l-html-editor>.d2l-richtext-editor-container:hover,
-			d2l-html-editor>.d2l-richtext-editor-container:focus,
-			d2l-html-editor>.d2l-richtext-editor-container:active,
-			d2l-html-editor>.d2l-richtext-editor-container.html-editor-container-hover {
-				@apply --d2l-input-hover-focus;
-				padding: calc(0.4rem - 1px) calc(1rem - 1px);
-			}
-
-			@media (max-width: 615px),
-			(max-device-width: 960px) {
-				d2l-html-editor>.d2l-richtext-editor-container {
-					height: 3.9rem;
-				}
-			}
-		</style>
-		<div class="html-editor-outer-compact">
-			<d2l-html-editor
-				editor-id=[[_uniqueId]]
-				inline=[[inline]]
-				min-rows=[[minRows]]
-				max-rows=[[maxRows]]
-				app-root=[[_appRoot]]
-				allow-unsafe=false
-				fullpage-enabled=0
-				content=[[_encodeURIComponent(value)]]
-				toolbar=[[_toolbar]]
-				plugins=[[_plugins]]
-				object-resizing=[[objectResizing]]
-			>
-			<div id$="[[_uniqueId]]-toolbar" class="toolbar"></div>
-			<div id="toolbar-shortcut" hidden></div>
-				<div
-					class='d2l-richtext-editor-container'
-					id=[[_uniqueId]]
-					role="textbox"
-					placeholder$=[[placeholder]]
-					aria-label$=[[ariaLabel]]
-				></div>
-			</d2l-html-editor>
-		</div>
-	</template>
-
-	<script>
-		Polymer({
-			is: 'd2l-assignment-html-editor',
-			behaviors: [],
-			properties: {
-				/**
-				* Every html editor element on a page MUST have a unique ID
-				*/
-				_uniqueId: {
-					type: String,
-					value: function() {
-						return 'htmleditor-' + Date.now();
-					}
-				},
-				ariaLabel: {
-					type: String
-				},
-				inline: {
-					type: Number,
-					value: 1
-				},
-				minRows: {
-					type: Number,
-					value: 1
-				},
-				maxRows: {
-					type: Number
-				},
-				_appRoot: {
-					type: String,
-					value: function() {
-						var appPath = window.location.origin + window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1);
-						return appPath + 'bower_components/fakeDir/';
-					}
-				},
-				placeholder: {
-					type: String
-				},
-				value: {
-					type: String,
-					notify: true,
-					observer: '_valueChanged'
-				},
-				_toolbar: {
-					type: String,
-					computed: '_computeToolbar(isEmoticonsEnabled)'
-				},
-				_plugins: {
-					type: String,
-					computed: '_computePlugins(isEmoticonsEnabled)'
-				},
-				objectResizing: {
-					type: Boolean,
-					value: false
-				},
-				isEmoticonsEnabled: {
-					type: Boolean,
-					value: false
-				}
-			},
-			attached: function() {
-				Polymer.RenderStatus.afterNextRender(this, function() {
-					this.listen(this.$$('d2l-html-editor'), 'change', '_onEditorContentChanged');
-				}.bind(this));
-			},
-			detached: function() {
-				this.unlisten(this.$$('d2l-html-editor'), 'change', '_onEditorContentChanged');
-			},
-			focus: function() {
-				this.$$('d2l-html-editor').focus();
-			},
-			getContent: function() {
-				return this.$$('d2l-html-editor').getContent();
-			},
-			_valueChanged: function(newValue, oldValue) {
-				if (this._uniqueId && oldValue && !newValue) {
-					this.$$('d2l-html-editor').clearContent();
-				}
-			},
-			_onEditorContentChanged: function(e) {
-				this.value = e.detail.content;
-			},
-			_computeToolbar: function(isEmoticonsEnabled) {
-				var toolbar = 'bold italic underline bullist';
-				toolbar += isEmoticonsEnabled ? ' d2l_emoticons' : '';
-				return toolbar;
-			},
-			_computePlugins: function(isEmoticonsEnabled) {
-				var plugins = 'autolink lists paste d2l_placeholder d2l_filter d2l_replacestring d2l_xsplconverter';
-				plugins += isEmoticonsEnabled ? ' d2l_emoticons' : '';
-				return plugins;
-			},
-			_encodeURIComponent: function(value) {
-				return value ? encodeURIComponent(value) : '';
-			}
-		});
-	</script>
-</dom-module>
diff --git a/d2l-assignment-html-editor.js b/d2l-assignment-html-editor.js
new file mode 100644
index 0000000..81da059
--- /dev/null
+++ b/d2l-assignment-html-editor.js
@@ -0,0 +1,137 @@
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-html-editor/d2l-html-editor-client-framed.js';
+import 'd2l-html-editor/d2l-html-editor.js';
+import 'd2l-inputs/d2l-input-shared-styles.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-assignment-html-editor">
+	<template strip-whitespace="">
+		<style>
+			d2l-html-editor>.d2l-richtext-editor-container {
+				@apply --d2l-input;
+				padding: 0.4rem 1rem;
+			}
+
+			d2l-html-editor>.d2l-richtext-editor-container:hover,
+			d2l-html-editor>.d2l-richtext-editor-container:focus,
+			d2l-html-editor>.d2l-richtext-editor-container:active,
+			d2l-html-editor>.d2l-richtext-editor-container.html-editor-container-hover {
+				@apply --d2l-input-hover-focus;
+				padding: calc(0.4rem - 1px) calc(1rem - 1px);
+			}
+
+			@media (max-width: 615px),
+			(max-device-width: 960px) {
+				d2l-html-editor>.d2l-richtext-editor-container {
+					height: 3.9rem;
+				}
+			}
+		</style>
+		<div class="html-editor-outer-compact">
+			<d2l-html-editor editor-id="[[_uniqueId]]" inline="[[inline]]" min-rows="[[minRows]]" max-rows="[[maxRows]]" app-root="[[_appRoot]]" allow-unsafe="false" fullpage-enabled="0" content="[[_encodeURIComponent(value)]]" toolbar="[[_toolbar]]" plugins="[[_plugins]]" object-resizing="[[objectResizing]]">
+			<div id$="[[_uniqueId]]-toolbar" class="toolbar"></div>
+			<div id="toolbar-shortcut" hidden=""></div>
+				<div class="d2l-richtext-editor-container" id="[[_uniqueId]]" role="textbox" placeholder$="[[placeholder]]" aria-label$="[[ariaLabel]]"></div>
+			</d2l-html-editor>
+		</div>
+	</template>
+
+	
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
+Polymer({
+	is: 'd2l-assignment-html-editor',
+	behaviors: [],
+	properties: {
+		/**
+		* Every html editor element on a page MUST have a unique ID
+		*/
+		_uniqueId: {
+			type: String,
+			value: function() {
+				return 'htmleditor-' + Date.now();
+			}
+		},
+		ariaLabel: {
+			type: String
+		},
+		inline: {
+			type: Number,
+			value: 1
+		},
+		minRows: {
+			type: Number,
+			value: 1
+		},
+		maxRows: {
+			type: Number
+		},
+		_appRoot: {
+			type: String,
+			value: function() {
+				var appPath = window.location.origin + window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1);
+				return appPath + 'bower_components/fakeDir/';
+			}
+		},
+		placeholder: {
+			type: String
+		},
+		value: {
+			type: String,
+			notify: true,
+			observer: '_valueChanged'
+		},
+		_toolbar: {
+			type: String,
+			computed: '_computeToolbar(isEmoticonsEnabled)'
+		},
+		_plugins: {
+			type: String,
+			computed: '_computePlugins(isEmoticonsEnabled)'
+		},
+		objectResizing: {
+			type: Boolean,
+			value: false
+		},
+		isEmoticonsEnabled: {
+			type: Boolean,
+			value: false
+		}
+	},
+	attached: function() {
+		Polymer.RenderStatus.afterNextRender(this, function() {
+			this.listen(this.$$('d2l-html-editor'), 'change', '_onEditorContentChanged');
+		}.bind(this));
+	},
+	detached: function() {
+		this.unlisten(this.$$('d2l-html-editor'), 'change', '_onEditorContentChanged');
+	},
+	focus: function() {
+		this.$$('d2l-html-editor').focus();
+	},
+	getContent: function() {
+		return this.$$('d2l-html-editor').getContent();
+	},
+	_valueChanged: function(newValue, oldValue) {
+		if (this._uniqueId && oldValue && !newValue) {
+			this.$$('d2l-html-editor').clearContent();
+		}
+	},
+	_onEditorContentChanged: function(e) {
+		this.value = e.detail.content;
+	},
+	_computeToolbar: function(isEmoticonsEnabled) {
+		var toolbar = 'bold italic underline bullist';
+		toolbar += isEmoticonsEnabled ? ' d2l_emoticons' : '';
+		return toolbar;
+	},
+	_computePlugins: function(isEmoticonsEnabled) {
+		var plugins = 'autolink lists paste d2l_placeholder d2l_filter d2l_replacestring d2l_xsplconverter';
+		plugins += isEmoticonsEnabled ? ' d2l_emoticons' : '';
+		return plugins;
+	},
+	_encodeURIComponent: function(value) {
+		return value ? encodeURIComponent(value) : '';
+	}
+});
diff --git a/d2l-assignment-input.html b/d2l-assignment-input.html
deleted file mode 100644
index fac26ee..0000000
--- a/d2l-assignment-input.html
+++ /dev/null
@@ -1,87 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="d2l-assignment-text-area.html">
-<link rel="import" href="d2l-assignment-html-editor.html">
-
-<dom-module id="d2l-assignment-input">
-	<template strip-whitespace>
-		<style>
-			:host {
-				line-height: 1rem;
-			}
-
-			[hidden] {
-				display: none;
-			}
-		</style>
-		<d2l-assignment-text-area
-			id="editor"
-			hidden$=[[enableHtmlEditor]]
-			aria-label=[[ariaLabel]]
-			placeholder=[[placeholder]]
-			value={{value}}
-			min-rows=[[minRows]]
-			max-rows=[[maxRows]]
-		></d2l-assignment-text-area>
-		<template is="dom-if" if="[[_showHtmlEditor(loaded, enableHtmlEditor)]]">
-			<d2l-assignment-html-editor
-				id="editor"
-				hidden$=[[!enableHtmlEditor]]
-				aria-label=[[ariaLabel]]
-				placeholder=[[placeholder]]
-				value={{value}}
-				min-rows=[[minRows]]
-				max-rows=[[maxRows]]
-				is-emoticons-enabled=[[isEmoticonsEnabled]]
-			></d2l-assignment-html-editor>
-		</template>
-	</template>
-
-	<script>
-		Polymer({
-			is: 'd2l-assignment-input',
-			properties: {
-				ariaLabel: {
-					type: String
-				},
-				placeholder: {
-					type: String
-				},
-				value: {
-					type: String,
-					notify: true
-				},
-				minRows: {
-					type: Number
-				},
-				maxRows: {
-					type: Number
-				},
-				enableHtmlEditor: {
-					type: Boolean,
-					value: false
-				},
-				isEmoticonsEnabled: {
-					type: Boolean,
-					value: false
-				},
-				/**
-				* Set when the component is ready for editing.
-				* d2l-html-editor must have Loaded/New Assignment (Instructions) before initializing.
-				*/
-				loaded: {
-					type: Boolean,
-					value: false
-				}
-			},
-			focus: function() {
-				this.$$('#editor:not([hidden])').focus();
-			},
-			getContent: function() {
-				return this.$$('#editor:not([hidden])').getContent();
-			},
-			_showHtmlEditor: function(loaded, enableHtmlEditor) {
-				return loaded && enableHtmlEditor;
-			}
-		});
-	</script>
-</dom-module>
\ No newline at end of file
diff --git a/d2l-assignment-input.js b/d2l-assignment-input.js
new file mode 100644
index 0000000..fe5a637
--- /dev/null
+++ b/d2l-assignment-input.js
@@ -0,0 +1,72 @@
+import '@polymer/polymer/polymer-legacy.js';
+import './d2l-assignment-text-area.js';
+import './d2l-assignment-html-editor.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-assignment-input">
+	<template strip-whitespace="">
+		<style>
+			:host {
+				line-height: 1rem;
+			}
+
+			[hidden] {
+				display: none;
+			}
+		</style>
+		<d2l-assignment-text-area id="editor" hidden$="[[enableHtmlEditor]]" aria-label="[[ariaLabel]]" placeholder="[[placeholder]]" value="{{value}}" min-rows="[[minRows]]" max-rows="[[maxRows]]"></d2l-assignment-text-area>
+		<template is="dom-if" if="[[_showHtmlEditor(loaded, enableHtmlEditor)]]">
+			<d2l-assignment-html-editor id="editor" hidden$="[[!enableHtmlEditor]]" aria-label="[[ariaLabel]]" placeholder="[[placeholder]]" value="{{value}}" min-rows="[[minRows]]" max-rows="[[maxRows]]" is-emoticons-enabled="[[isEmoticonsEnabled]]"></d2l-assignment-html-editor>
+		</template>
+	</template>
+
+	
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
+Polymer({
+	is: 'd2l-assignment-input',
+	properties: {
+		ariaLabel: {
+			type: String
+		},
+		placeholder: {
+			type: String
+		},
+		value: {
+			type: String,
+			notify: true
+		},
+		minRows: {
+			type: Number
+		},
+		maxRows: {
+			type: Number
+		},
+		enableHtmlEditor: {
+			type: Boolean,
+			value: false
+		},
+		isEmoticonsEnabled: {
+			type: Boolean,
+			value: false
+		},
+		/**
+		* Set when the component is ready for editing.
+		* d2l-html-editor must have Loaded/New Assignment (Instructions) before initializing.
+		*/
+		loaded: {
+			type: Boolean,
+			value: false
+		}
+	},
+	focus: function() {
+		this.$$('#editor:not([hidden])').focus();
+	},
+	getContent: function() {
+		return this.$$('#editor:not([hidden])').getContent();
+	},
+	_showHtmlEditor: function(loaded, enableHtmlEditor) {
+		return loaded && enableHtmlEditor;
+	}
+});
diff --git a/d2l-assignment-text-area.html b/d2l-assignment-text-area.html
deleted file mode 100644
index 297841a..0000000
--- a/d2l-assignment-text-area.html
+++ /dev/null
@@ -1,76 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-tooltip/d2l-tooltip.html">
-<link rel="import" href="../d2l-inputs/d2l-input-textarea.html">
-
-
-<dom-module id="d2l-assignment-text-area">
-	<template strip-whitespace>
-		<style>
-			d2l-input-textarea {
-				--d2l-input-placeholder-color: {
-					color: var(--d2l-color-tungsten);
-				};
-			}
-
-			@media (max-width: 615px), (max-device-width: 960px) {
-				d2l-input-textarea {
-					height: 3.9rem;
-				}
-			}
-		</style>
-		<d2l-input-textarea
-			aria-label$=[[ariaLabel]]
-			aria-invalid=[[_getAriaInvalidValue(invalid)]]
-			placeholder=[[placeholder]]
-			value={{value}}
-			rows=[[minRows]]
-			max-rows=[[maxRows]]>
-		</d2l-input-textarea>
-		<template is="dom-if" if="[[invalid]]">
-			<d2l-tooltip position="bottom" force-show>[[errorMessage]]</d2l-tooltip>
-		</template>
-	</template>
-
-	<script>
-		Polymer({
-			is: 'd2l-assignment-text-area',
-			behaviors: [],
-			properties: {
-				ariaLabel: {
-					type: String
-				},
-				invalid: {
-					type: Boolean,
-					value: false
-				},
-				errorMessage: {
-					type: String
-				},
-				placeholder: {
-					type: String
-				},
-				value: {
-					type: String,
-					notify: true
-				},
-				minRows: {
-					type: Number,
-					value: 1
-				},
-				maxRows: {
-					type: Number,
-					value: 0
-				}
-			},
-			_getAriaInvalidValue: function(value) {
-				return new Boolean(value).toString();
-			},
-			focus: function() {
-				this.$$('d2l-input-textarea').focus();
-			},
-			getContent: function() {
-				return this.value;
-			}
-		});
-	</script>
-</dom-module>
diff --git a/d2l-assignment-text-area.js b/d2l-assignment-text-area.js
new file mode 100644
index 0000000..76be054
--- /dev/null
+++ b/d2l-assignment-text-area.js
@@ -0,0 +1,71 @@
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-tooltip/d2l-tooltip.js';
+import 'd2l-inputs/d2l-input-textarea.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-assignment-text-area">
+	<template strip-whitespace="">
+		<style>
+			d2l-input-textarea {
+				--d2l-input-placeholder-color: {
+					color: var(--d2l-color-tungsten);
+				};
+			}
+
+			@media (max-width: 615px), (max-device-width: 960px) {
+				d2l-input-textarea {
+					height: 3.9rem;
+				}
+			}
+		</style>
+		<d2l-input-textarea aria-label$="[[ariaLabel]]" aria-invalid="[[_getAriaInvalidValue(invalid)]]" placeholder="[[placeholder]]" value="{{value}}" rows="[[minRows]]" max-rows="[[maxRows]]">
+		</d2l-input-textarea>
+		<template is="dom-if" if="[[invalid]]">
+			<d2l-tooltip position="bottom" force-show="">[[errorMessage]]</d2l-tooltip>
+		</template>
+	</template>
+
+	
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
+Polymer({
+	is: 'd2l-assignment-text-area',
+	behaviors: [],
+	properties: {
+		ariaLabel: {
+			type: String
+		},
+		invalid: {
+			type: Boolean,
+			value: false
+		},
+		errorMessage: {
+			type: String
+		},
+		placeholder: {
+			type: String
+		},
+		value: {
+			type: String,
+			notify: true
+		},
+		minRows: {
+			type: Number,
+			value: 1
+		},
+		maxRows: {
+			type: Number,
+			value: 0
+		}
+	},
+	_getAriaInvalidValue: function(value) {
+		return new Boolean(value).toString();
+	},
+	focus: function() {
+		this.$$('d2l-input-textarea').focus();
+	},
+	getContent: function() {
+		return this.value;
+	}
+});
diff --git a/d2l-assignment-ui.html b/d2l-assignment-ui.html
index c9d4ebb..f465960 100644
--- a/d2l-assignment-ui.html
+++ b/d2l-assignment-ui.html
@@ -1,4 +1,4 @@
-<link rel="import" href="./d2l-assignment-editor.html">
-<link rel="import" href="./d2l-assignment-viewer.html">
-<link rel="import" href="./d2l-planned-assignment-viewer.html">
-<link rel="import" href="./d2l-loaded-assignment-viewer.html">
\ No newline at end of file
+<script type="module" src="./d2l-assignment-editor.js"></script>
+<script type="module" src="./d2l-assignment-viewer.js"></script>
+<script type="module" src="./d2l-planned-assignment-viewer.js"></script>
+<script type="module" src="./d2l-loaded-assignment-viewer.js"></script>
\ No newline at end of file
diff --git a/d2l-assignment-viewer-data.html b/d2l-assignment-viewer-data.html
deleted file mode 100644
index c67463c..0000000
--- a/d2l-assignment-viewer-data.html
+++ /dev/null
@@ -1,319 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-hm-constants-behavior/d2l-hm-constants-behavior.html">
-<link rel="import" href="../siren-parser-import/siren-parser.html">
-<link rel="import" href="./d2l-assignment-attachment-behavior.html">
-<link rel="import" href="./d2l-assignment-behavior.html">
-
-<dom-module id="d2l-assignment-viewer-data">
-
-	<script>
-	Polymer({
-
-		is: 'd2l-assignment-viewer-data',
-		behaviors: [
-			window.D2L.AssignmentAttachmentBehavior,
-			window.D2L.AssignmentBehavior,
-			window.D2L.Hypermedia.HMConstantsBehavior
-		],
-		properties: {
-			url: {
-				type: Object
-			},
-			enabled: {
-				type: String
-			},
-			resource: {
-				type: Object
-			},
-			name: {
-				type: String,
-				notify: true
-			},
-			instructions: {
-				type: String,
-				notify: true
-			},
-			dueDate: {
-				type: String,
-				notify: true
-			},
-			link: {
-				type: String,
-				notify: true
-			},
-			totalUsers: {
-				type: Number,
-				notify: true
-			},
-			totalUsersWithSubmissions: {
-				type: Number,
-				notify: true
-			},
-			canViewAllSubmissions: {
-				type: Boolean,
-				notify: true
-			},
-			fileAttachmentList: {
-				type: Array,
-				notify: true
-			},
-			graded: {
-				type: Boolean,
-				notify: true,
-				value: false
-			},
-			submitted: {
-				type: Boolean,
-				notify: true,
-				value: false
-			},
-			apiConfig: {
-				type: Object,
-				value: null
-			},
-			activityUsageLink: {
-				type: String,
-				notify: true
-			},
-			myActivityUsageLink: {
-				type: String,
-				notify: true
-			},
-			outOf: {
-				type: String,
-				notify: true
-			},
-			canAddGrade: {
-				type: Boolean,
-				notify: true
-			},
-			hasAssignmentDetails: {
-				type: Boolean,
-				notify: true
-			},
-			submissionType: {
-				type: Number,
-				notify: true
-			},
-			completionType: {
-				type: Number,
-				notify: true
-			},
-			completionDate: {
-				type: String,
-				notify: true
-			}
-		},
-		load: function() {
-			var _this = this;
-			var assignmentUrl = this.getAssignmentUrl(this.url);
-			if (!assignmentUrl) {
-				return;
-			}
-			this.callUrl(assignmentUrl).then(function(response) {
-				if (response.ok) {
-					response.json()
-						.then(function(body) {
-							var resource = window.D2L.Hypermedia.Siren.Parse(body);
-							if (resource.hasClass('assignment')) {
-								_this.resource = resource;
-								_this.name = _this.resource.properties.name;
-								_this.canAddGrade = _this.resource.properties.addToGrades;
-								_this.dueDate = _this.resource.properties.dueDate;
-								_this.submissionType = _this.resource.properties.submissionType !== undefined ? _this.resource.properties.submissionType.value : 0;
-								_this.completionType = _this.resource.properties.completionType !== undefined ? _this.resource.properties.completionType.value : 0;
-								_this.completionDate = _this.resource.properties.completionDate !== undefined ? _this.resource.properties.completionDate : null;
-								_this.hasAssignmentDetails = _this.canAddGrade || _this.dueDate !== undefined;
-
-								var richTextInstructions = _this.resource.getSubEntityByRel(_this.HypermediaRels.Assignments.instructions);
-								if (richTextInstructions && richTextInstructions.hasClass(_this.HypermediaClasses.text.richtext)) {
-									_this.instructions = richTextInstructions.properties.html;
-								} else {
-									_this.instructions = _this.resource.properties.instructions;
-								}
-
-								if (!_this.instructions || _this.instructions.length === 0) {
-									_this.instructions = null;
-								}
-
-								var link = _this.resource.getLinkByRel('alternate');
-								_this.link = (link && link.type === 'text/html') ? link.href : null;
-
-								var metrics = _this.resource.getSubEntityByClass('submission-metrics');
-								if (metrics) {
-									_this.canViewAllSubmissions = true;
-									_this.totalUsers = metrics.properties.totalUsers;
-									_this.totalUsersWithSubmissions = metrics.properties.totalUsersWithSubmissions;
-								}
-
-								var fileAttachments = _this.resource.getSubEntityByClass('attachments');
-								_this.fileAttachmentList = _this._populateFileAttachments( fileAttachments );
-								var submissionStatus = _this.resource.getSubEntityByClass('submission-status');
-								if (submissionStatus) {
-									_this.graded = submissionStatus.hasClass('graded');
-									_this.submitted = submissionStatus.hasClass('submitted');
-								} else {
-									_this.graded = false;
-									_this.submitted = false;
-								}
-
-								var outOf = _this.resource.properties.outOf;
-								if (typeof outOf !== undefined) {
-									_this.outOf = outOf;
-								}
-
-								if (_this.resource.hasLinkByRel(_this.HypermediaRels.Activities.activityUsage)) {
-									var activityUsageLink = _this.resource.getLinkByRel(_this.HypermediaRels.Activities.activityUsage);
-									_this.activityUsageLink = activityUsageLink.href;
-
-									Promise.resolve(_this._getActivityUsageInfo()).then(function(res) { // eslint-disable-line no-undef
-										if (res.ok) {
-											res.json()
-												.then(function(linkBody) {
-													var linkResource = window.D2L.Hypermedia.Siren.Parse(linkBody);
-													if (linkResource.hasLinkByRel(_this.HypermediaRels.Activities.myActivityUsage)) {
-														var myActivityUsageLink = linkResource.getLinkByRel(_this.HypermediaRels.Activities.myActivityUsage);
-														_this.myActivityUsageLink = myActivityUsageLink.href;
-													}
-
-													_this.fire('d2l-assignment-viewer-loaded', {
-														canEditAssignment : _this.resource.hasActionByName('quick-create-folder'),
-														canDeleteAssignment: _this.resource.hasActionByName('delete-folder')
-													});
-												});
-										}
-									}).catch(function() {
-										_this.fire('d2l-assignment-viewer-loaded', false);
-									});
-								} else {
-									_this.fire('d2l-assignment-viewer-loaded', {
-										canEditAssignment : _this.resource.hasActionByName('quick-create-folder'),
-										canDeleteAssignment: _this.resource.hasActionByName('delete-folder')
-									});
-								}
-							}
-						});
-				} else if (response.status === 410) {
-					_this.fire('d2l-assignment-viewer-resource-gone', true);
-				} else {
-					_this.fire('d2l-assignment-viewer-loaded', false);
-				}
-			}).catch(function() {
-				_this.fire('d2l-assignment-viewer-loaded', false);
-			});
-		},
-		delete: function() {
-			if (!this.resource) {
-				this.fire('d2l-assignment-delete-failed');
-				return;
-			}
-			var action = this.resource.getActionByName('delete-folder');
-			var _this = this;
-			this.callUrl(action.href, action.method)
-				.then(function(response) {
-					if (response.ok) {
-						_this.fire('d2l-assignment-delete-complete');
-					} else {
-						_this.fire('d2l-assignment-delete-failed');
-					}
-				});
-		},
-		save: function(name, postNow) {
-			var id = this.resource.getLinkByRel('self').href;
-			var data = new FormData();
-			var validateName = name && name.trim();
-			data.append('name', validateName);
-			// TODO: postNow was used to determine if a call to dropbox was needed to save the draft state
-			data.append('postNow', postNow);
-
-			if (!this.resource) {
-				this.fire('d2l-existing-assignment-save-failed', data);
-				return;
-			}
-
-			// Let schedule-activity lambda function to take care of the draft state change for assignment
-			this.fire('d2l-assignment-save-complete', {
-				id: id,
-				urls:  this.populateUrlsFromLinks(this.resource.links)
-			});
-			return;
-			//////////////////////////////////////////////////////////////////////////////////
-			// Temporarily disable this chunk of code because of the activty-usage API
-			// Permission issue.
-			//   Temporarily solution is to make used of our Schedule-activity lambda function
-			//   to trigger publish-activity to take care of the draft state saving
-			// var _this = this;
-			// // Step 1 - Get activity usage link
-			// var rel = 'https://activities.api.brightspace.com/rels/activity-usage';
-			// if (!this.resource.hasLinkByRel(rel)) {
-			// 	_this.fire('d2l-assignment-save-partial-failed', data);
-			// }
-			// var activityLink = this.resource.getLinkByRel(rel).href;
-			// // Step 2 - call href of activity-usage rel to determine if activity is
-			// // published and if not, publish it.
-			// this.callUrl(activityLink).then(function(response) {
-			// 	if (!response.ok) {
-			// 		_this.fire('d2l-assignment-save-partial-failed', data);
-			// 		return;
-			// 	}
-			// 	response.json().then(function(body) {
-			// 		var publishResource = window.D2L.Hypermedia.Siren.Parse(body);
-			// 		if (publishResource.hasClass('published') || !postNow) {
-			// 			_this.fire('d2l-assignment-save-complete', {
-			// 				id: id,
-			// 				urls: _this.populateUrlsFromLinks(_this.resource.links)
-			// 			});
-			// 			return;
-			// 		}
-			// 		var publishAction = publishResource.getActionByName('set-published');
-			// 		_this.callUrl(publishAction.href, publishAction.method).then(function(response) {
-			// 			if (response.ok) {
-			// 				response.json().then(function(body) {
-			// 					var resource = window.D2L.Hypermedia.Siren.Parse(body);
-			// 					if (resource.hasClass('published')) {
-			// 						_this.fire('d2l-assignment-save-complete', {
-			// 							id: id,
-			// 							urls: _this.populateUrlsFromLinks(_this.resource.links)
-			// 						});
-			// 					} else {
-			// 						_this.fire('d2l-assignment-save-partial-failed', data);
-			// 					}
-			// 				});
-			// 			} else {
-			// 				_this.fire('d2l-assignment-save-partial-failed', data);
-			// 			}
-			// 		});
-			// 	});
-			// });
-			//////////////////////////////////////////////////////////////////////////////////
-		},
-		_populateFileAttachments: function(fileAttachments) {
-			var faMap = [];
-			if (fileAttachments) {
-				var files = fileAttachments.getSubEntitiesByClass('file');
-				if (files) {
-					for (var i = 0; i < files.length; i++ ) {
-						var attachment = {
-							type: 'Document',
-							id: files[i].getLinksByRel('self')[0].href,
-							name: files[i].properties.name,
-							url: files[i].getLinksByRel('self')[0].href
-						};
-						faMap.push(attachment);
-					}
-				}
-				var linkEntities = fileAttachments.getSubEntitiesByClass('link');
-				linkEntities.forEach(function(entity) {
-					var attachment = this.linkToAttachment(entity);
-					faMap.push(attachment);
-				}, this);
-			}
-			return faMap;
-		},
-		_getActivityUsageInfo: function() {
-			return this.callUrl(this.activityUsageLink);
-		}
-	});
-	</script>
-
-</dom-module>
diff --git a/d2l-assignment-viewer-data.js b/d2l-assignment-viewer-data.js
new file mode 100644
index 0000000..1087ad5
--- /dev/null
+++ b/d2l-assignment-viewer-data.js
@@ -0,0 +1,312 @@
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-hypermedia-constants/d2l-hm-constants-behavior.js';
+import 'siren-parser/siren-parser.js';
+import './d2l-assignment-attachment-behavior.js';
+import './d2l-assignment-behavior.js';
+Polymer({
+
+	is: 'd2l-assignment-viewer-data',
+	behaviors: [
+		window.D2L.AssignmentAttachmentBehavior,
+		window.D2L.AssignmentBehavior,
+		window.D2L.Hypermedia.HMConstantsBehavior
+	],
+	properties: {
+		url: {
+			type: Object
+		},
+		enabled: {
+			type: String
+		},
+		resource: {
+			type: Object
+		},
+		name: {
+			type: String,
+			notify: true
+		},
+		instructions: {
+			type: String,
+			notify: true
+		},
+		dueDate: {
+			type: String,
+			notify: true
+		},
+		link: {
+			type: String,
+			notify: true
+		},
+		totalUsers: {
+			type: Number,
+			notify: true
+		},
+		totalUsersWithSubmissions: {
+			type: Number,
+			notify: true
+		},
+		canViewAllSubmissions: {
+			type: Boolean,
+			notify: true
+		},
+		fileAttachmentList: {
+			type: Array,
+			notify: true
+		},
+		graded: {
+			type: Boolean,
+			notify: true,
+			value: false
+		},
+		submitted: {
+			type: Boolean,
+			notify: true,
+			value: false
+		},
+		apiConfig: {
+			type: Object,
+			value: null
+		},
+		activityUsageLink: {
+			type: String,
+			notify: true
+		},
+		myActivityUsageLink: {
+			type: String,
+			notify: true
+		},
+		outOf: {
+			type: String,
+			notify: true
+		},
+		canAddGrade: {
+			type: Boolean,
+			notify: true
+		},
+		hasAssignmentDetails: {
+			type: Boolean,
+			notify: true
+		},
+		submissionType: {
+			type: Number,
+			notify: true
+		},
+		completionType: {
+			type: Number,
+			notify: true
+		},
+		completionDate: {
+			type: String,
+			notify: true
+		}
+	},
+	load: function() {
+		var _this = this;
+		var assignmentUrl = this.getAssignmentUrl(this.url);
+		if (!assignmentUrl) {
+			return;
+		}
+		this.callUrl(assignmentUrl).then(function(response) {
+			if (response.ok) {
+				response.json()
+					.then(function(body) {
+						var resource = window.D2L.Hypermedia.Siren.Parse(body);
+						if (resource.hasClass('assignment')) {
+							_this.resource = resource;
+							_this.name = _this.resource.properties.name;
+							_this.canAddGrade = _this.resource.properties.addToGrades;
+							_this.dueDate = _this.resource.properties.dueDate;
+							_this.submissionType = _this.resource.properties.submissionType !== undefined ? _this.resource.properties.submissionType.value : 0;
+							_this.completionType = _this.resource.properties.completionType !== undefined ? _this.resource.properties.completionType.value : 0;
+							_this.completionDate = _this.resource.properties.completionDate !== undefined ? _this.resource.properties.completionDate : null;
+							_this.hasAssignmentDetails = _this.canAddGrade || _this.dueDate !== undefined;
+
+							var richTextInstructions = _this.resource.getSubEntityByRel(_this.HypermediaRels.Assignments.instructions);
+							if (richTextInstructions && richTextInstructions.hasClass(_this.HypermediaClasses.text.richtext)) {
+								_this.instructions = richTextInstructions.properties.html;
+							} else {
+								_this.instructions = _this.resource.properties.instructions;
+							}
+
+							if (!_this.instructions || _this.instructions.length === 0) {
+								_this.instructions = null;
+							}
+
+							var link = _this.resource.getLinkByRel('alternate');
+							_this.link = (link && link.type === 'text/html') ? link.href : null;
+
+							var metrics = _this.resource.getSubEntityByClass('submission-metrics');
+							if (metrics) {
+								_this.canViewAllSubmissions = true;
+								_this.totalUsers = metrics.properties.totalUsers;
+								_this.totalUsersWithSubmissions = metrics.properties.totalUsersWithSubmissions;
+							}
+
+							var fileAttachments = _this.resource.getSubEntityByClass('attachments');
+							_this.fileAttachmentList = _this._populateFileAttachments( fileAttachments );
+							var submissionStatus = _this.resource.getSubEntityByClass('submission-status');
+							if (submissionStatus) {
+								_this.graded = submissionStatus.hasClass('graded');
+								_this.submitted = submissionStatus.hasClass('submitted');
+							} else {
+								_this.graded = false;
+								_this.submitted = false;
+							}
+
+							var outOf = _this.resource.properties.outOf;
+							if (typeof outOf !== undefined) {
+								_this.outOf = outOf;
+							}
+
+							if (_this.resource.hasLinkByRel(_this.HypermediaRels.Activities.activityUsage)) {
+								var activityUsageLink = _this.resource.getLinkByRel(_this.HypermediaRels.Activities.activityUsage);
+								_this.activityUsageLink = activityUsageLink.href;
+
+								Promise.resolve(_this._getActivityUsageInfo()).then(function(res) { // eslint-disable-line no-undef
+									if (res.ok) {
+										res.json()
+											.then(function(linkBody) {
+												var linkResource = window.D2L.Hypermedia.Siren.Parse(linkBody);
+												if (linkResource.hasLinkByRel(_this.HypermediaRels.Activities.myActivityUsage)) {
+													var myActivityUsageLink = linkResource.getLinkByRel(_this.HypermediaRels.Activities.myActivityUsage);
+													_this.myActivityUsageLink = myActivityUsageLink.href;
+												}
+
+												_this.fire('d2l-assignment-viewer-loaded', {
+													canEditAssignment : _this.resource.hasActionByName('quick-create-folder'),
+													canDeleteAssignment: _this.resource.hasActionByName('delete-folder')
+												});
+											});
+									}
+								}).catch(function() {
+									_this.fire('d2l-assignment-viewer-loaded', false);
+								});
+							} else {
+								_this.fire('d2l-assignment-viewer-loaded', {
+									canEditAssignment : _this.resource.hasActionByName('quick-create-folder'),
+									canDeleteAssignment: _this.resource.hasActionByName('delete-folder')
+								});
+							}
+						}
+					});
+			} else if (response.status === 410) {
+				_this.fire('d2l-assignment-viewer-resource-gone', true);
+			} else {
+				_this.fire('d2l-assignment-viewer-loaded', false);
+			}
+		}).catch(function() {
+			_this.fire('d2l-assignment-viewer-loaded', false);
+		});
+	},
+	delete: function() {
+		if (!this.resource) {
+			this.fire('d2l-assignment-delete-failed');
+			return;
+		}
+		var action = this.resource.getActionByName('delete-folder');
+		var _this = this;
+		this.callUrl(action.href, action.method)
+			.then(function(response) {
+				if (response.ok) {
+					_this.fire('d2l-assignment-delete-complete');
+				} else {
+					_this.fire('d2l-assignment-delete-failed');
+				}
+			});
+	},
+	save: function(name, postNow) {
+		var id = this.resource.getLinkByRel('self').href;
+		var data = new FormData();
+		var validateName = name && name.trim();
+		data.append('name', validateName);
+		// TODO: postNow was used to determine if a call to dropbox was needed to save the draft state
+		data.append('postNow', postNow);
+
+		if (!this.resource) {
+			this.fire('d2l-existing-assignment-save-failed', data);
+			return;
+		}
+
+		// Let schedule-activity lambda function to take care of the draft state change for assignment
+		this.fire('d2l-assignment-save-complete', {
+			id: id,
+			urls:  this.populateUrlsFromLinks(this.resource.links)
+		});
+		return;
+		//////////////////////////////////////////////////////////////////////////////////
+		// Temporarily disable this chunk of code because of the activty-usage API
+		// Permission issue.
+		//   Temporarily solution is to make used of our Schedule-activity lambda function
+		//   to trigger publish-activity to take care of the draft state saving
+		// var _this = this;
+		// // Step 1 - Get activity usage link
+		// var rel = 'https://activities.api.brightspace.com/rels/activity-usage';
+		// if (!this.resource.hasLinkByRel(rel)) {
+		//	 _this.fire('d2l-assignment-save-partial-failed', data);
+		// }
+		// var activityLink = this.resource.getLinkByRel(rel).href;
+		// // Step 2 - call href of activity-usage rel to determine if activity is
+		// // published and if not, publish it.
+		// this.callUrl(activityLink).then(function(response) {
+		//	 if (!response.ok) {
+		//		 _this.fire('d2l-assignment-save-partial-failed', data);
+		//		 return;
+		//	 }
+		//	 response.json().then(function(body) {
+		//		 var publishResource = window.D2L.Hypermedia.Siren.Parse(body);
+		//		 if (publishResource.hasClass('published') || !postNow) {
+		//			 _this.fire('d2l-assignment-save-complete', {
+		//				 id: id,
+		//				 urls: _this.populateUrlsFromLinks(_this.resource.links)
+		//			 });
+		//			 return;
+		//		 }
+		//		 var publishAction = publishResource.getActionByName('set-published');
+		//		 _this.callUrl(publishAction.href, publishAction.method).then(function(response) {
+		//			 if (response.ok) {
+		//				 response.json().then(function(body) {
+		//					 var resource = window.D2L.Hypermedia.Siren.Parse(body);
+		//					 if (resource.hasClass('published')) {
+		//						 _this.fire('d2l-assignment-save-complete', {
+		//							 id: id,
+		//							 urls: _this.populateUrlsFromLinks(_this.resource.links)
+		//						 });
+		//					 } else {
+		//						 _this.fire('d2l-assignment-save-partial-failed', data);
+		//					 }
+		//				 });
+		//			 } else {
+		//				 _this.fire('d2l-assignment-save-partial-failed', data);
+		//			 }
+		//		 });
+		//	 });
+		// });
+		//////////////////////////////////////////////////////////////////////////////////
+	},
+	_populateFileAttachments: function(fileAttachments) {
+		var faMap = [];
+		if (fileAttachments) {
+			var files = fileAttachments.getSubEntitiesByClass('file');
+			if (files) {
+				for (var i = 0; i < files.length; i++ ) {
+					var attachment = {
+						type: 'Document',
+						id: files[i].getLinksByRel('self')[0].href,
+						name: files[i].properties.name,
+						url: files[i].getLinksByRel('self')[0].href
+					};
+					faMap.push(attachment);
+				}
+			}
+			var linkEntities = fileAttachments.getSubEntitiesByClass('link');
+			linkEntities.forEach(function(entity) {
+				var attachment = this.linkToAttachment(entity);
+				faMap.push(attachment);
+			}, this);
+		}
+		return faMap;
+	},
+	_getActivityUsageInfo: function() {
+		return this.callUrl(this.activityUsageLink);
+	}
+});
diff --git a/d2l-assignment-viewer.html b/d2l-assignment-viewer.html
deleted file mode 100644
index 95b9662..0000000
--- a/d2l-assignment-viewer.html
+++ /dev/null
@@ -1,499 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-link/d2l-link.html">
-<link rel="import" href="../d2l-alert/d2l-alert.html">
-<link rel="import" href="../d2l-typography/d2l-typography.html">
-<link rel="import" href="./localize-behavior.html">
-<link rel="import" href="../s-html/s-html.html">
-<link rel="import" href="./d2l-assignment-viewer-data.html">
-<link rel="import" href="./build/link-button-styles.html">
-<link rel='import' href="../d2l-more-less/d2l-more-less.html">
-<link rel='import' href="../d2l-attachments-ui/d2l-attachment-ui.html">
-
-<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
-<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
-
-<!--
-`d2l-assignment-viewer`
-View Brightspace assignments
-
-@demo demo/d2l-assignment-viewer.html
--->
-
-<dom-module id="d2l-assignment-viewer">
-	<template strip-whitespace>
-		<style include="d2l-typography link-button-styles">
-			.submission-link {
-				@apply --d2l-offscreen;
-			}
-
-			.submission-info {
-				display: flex;
-				justify-content: flex-start;
-				flex-direction: row;
-			}
-
-			d2l-attachment-list {
-				margin-bottom: 30px;
-				display: block;
-			}
-
-			#due-date {
-				@apply --d2l-body-small-text;
-				margin-left: 0;
-			}
-
-			:host-context([dir="rtl"]) #due-date {
-				margin-left: auto;
-				margin-right: 0;
-			}
-
-			#due-date[show-margin] {
- 				margin-left: 1.05rem;
- 			}
-
-			:host-context([dir="rtl"]) #due-date[show-margin] {
-				margin-left: 0;
-				margin-right: 1.05rem;
-			}
-
-			@media (max-width: 615px), (max-device-width: 960px) {
-				.submission-info {
-					flex-direction: column;
-				}
-
-				.submission-info button {
-					width: 100%;
-				}
-
-				#due-date {
-					@apply --d2l-body-compact-text;
-					margin-left: 0;
-					margin-right: 0;
-				}
-
-				:host-context([dir="rtl"])  a.link-button.submission-button,
-				a.link-button.submission-button {
-					margin: 0 0 1rem 0;
-				}
-			}
-
-			d2l-alert {
-				margin-bottom: 20px;
-			}
-
-			.name-text {
-				font-weight: bold;
-			}
-
-			.name {
-				margin-bottom: 0.6rem;
-				display: inline-block;
-			}
-
-			.d2l-typography p.instructions {
-				margin-top: 0;
-			}
-
-			.instructions-wrapper p:first-of-type {
-				margin-top: 0;
-			}
-
-			.instructions-wrapper p:last-of-type {
-				margin-bottom: 0;
-			}
-
-			.instructions-wrapper ul {
-				list-style-type: disc;
-			}
-
-			.instructions-wrapper ul ul {
-				list-style-type: circle;
-			}
-
-			.instructions-wrapper ul ul ul {
-				list-style-type: square;
-			}
-
-			[hidden] {
-				display: none !important;
-			}
-		</style>
-
-		<d2l-assignment-viewer-data
-			id="data"
-			url="[[url]]"
-			api-config=[[apiConfig]]
-			resource="{{resource}}"
-			enabled="{{enabled}}"
-			name={{name}}
-			submission-type={{submissionType}}
-			completion-type={{completionType}}
-			completion-date={{completionDate}}
-			instructions={{instructions}}
-			due-date={{dueDate}}
-			link={{link}}
-			total-users={{totalUsers}}
-			total-users-with-submissions={{totalUsersWithSubmissions}}
-			can-view-all-submissions={{canViewAllSubmissions}}
-			file-attachment-list={{fileAttachmentList}}
-			submitted={{submitted}}
-			graded={{graded}}
-			activity-usage-link={{activityUsageLink}}
-			my-activity-usage-link={{myActivityUsageLink}}
-		>
-		</d2l-assignment-viewer-data>
-
-		<div class="d2l-typography">
-			<div class$="d2l-body-standard">
-				<d2l-link class="name d2l-body-standard" main href="[[link]]" target="_top" hidden$="[[!_hasLink(link)]]">[[name]]</d2l-link>
-				<span hidden$="[[_hasLink(link)]]">
-					<d2l-link class="name d2l-body-standard" on-tap="_openActivityDetails" on-keydown="_onKeydownOpenActivityDetails" main target="_top" tabindex="0" hidden$="[[!_showActivityDetailsLink]]">[[name]]</d2l-link>
-					<span hidden$="[[_showActivityDetailsLink]]" class="name-text name d2l-body-standard">[[name]]</span>
-				</span>
-				<p hidden$="[[!instructions]]" class="instructions d2l-body-standard">
-					<template is="dom-if" if="[[_showMoreLess(apiConfig,isImmersive)]]">
-						<d2l-more-less height="[[moreLessHeight]]" h-align="text">
-							<s-html html="[[instructions]]"><span class="instructions-wrapper"></span></s-html>
-						</d2l-more-less>
-					</template>
-					<template is="dom-if" if="[[!_showMoreLess(apiConfig,isImmersive)]]">
-						<s-html html="[[instructions]]"><span class="instructions-wrapper"></span></s-html>
-					</template>
-				</p>
-				<template is="dom-if" if="[[partialError]]" restamp>
-					<d2l-alert type="error" has-close-button>[[partialErrorMessage]]</d2l-alert>
-				</template>
-				<template is="dom-if" if="[[_hasFileAttachmentList(fileAttachmentList)]]">
-					<d2l-attachment-list>
-						<template is="dom-repeat" items="[[fileAttachmentList]]">
-							<li slot="attachment" class="panel">
-								<d2l-attachment attachment-id=[[item.id]] attachment=[[item]] attachment-config=[[attachmentConfig]] api-config=[[apiConfig]] is-mobile-view=[[isMobileView]]>
-								</d2l-attachment>
-							</li>
-						</template>
-					</d2l-attachment-list>
-				</template>
-				<div class="submission-info">
-					<template is="dom-if" if="[[_showViewAllSubmissions(canViewAllSubmissions)]]">
-						<a id="view-all-submissions" href="[[link]]" target="_top" class="link-button submission-button">[[localize( instructorSubmissionLabel, instructorLabelSubmissionReplacement, _displayTotalSubmissions, 'totalUsers', _displayTotalUsers)]]</a>
-					</template>
-					<template is="dom-if" if="[[_showSubmitButton(canViewAllSubmissions, link)]]">
-						<a id="submit-submission" href="[[link]]" target="_top" primary$="[[_isPrimary(submitted,graded,completionDate)]]" class="link-button submission-button">[[localize(submissionLabel)]]</a>
-					</template>
-					<template is="dom-if" if="[[dueDate]]">
-						<p id="due-date" show-margin$="[[_showDueDateMargin(canViewAllSubmissions, link, isMobileView)]]">[[localize('due', 'dueDate', _displayDueDate)]]</p>
-					</template>
-				</div>
-			</div>
-		</div>
-	</template>
-
-	<script>
-		Polymer({
-
-			is: 'd2l-assignment-viewer',
-
-			behaviors: [
-				D2L.PolymerBehaviors.Assignment.LocalizeBehavior
-			],
-			/**
-				 * Fired when the viewer is loaded.
-				 *
-				 * `e.detail` is set true or false
-				 *
-				 * @event d2l-assignment-viewer-loaded
-				 * @param {Object} e Event parameters.
-				 */
-			properties: {
-				/**
-				 * Assignment url
-				 *
-				 * Url to load assignment data from.
-				 */
-				url: {
-					type: String,
-					observer: '_load'
-				},
-				/**
-				 * Name for the assignment. Loaded from url if provided.
-				 */
-				name: {
-					type: String
-				},
-				/**
-				 * Instructions for the assignment. Loaded from url if provided.
-				 */
-				instructions: {
-					type: String
-				},
-				/**
-				 * Due date for the assignment. Loaded from url if provided.
-				 * ISO 8601 format
-				 */
-				dueDate: {
-					type: String
-				},
-				/**
-				 * Link to the assignment in the UI. Loaded from url if provided.
-				 */
-				link: {
-					type: String
-				},
-				/**
-				 * Total users who can submit. Loaded from url if provided.
-				 */
-				totalUsers: {
-					type: Number
-				},
-				/**
-				 * Submission state of an assignment for user
-				 */
-				submitted: {
-					type: Boolean
-				},
-				/**
-				* Submission grade state of an assignment for user
-				*/
-				graded: {
-					type: Boolean
-				},
-				apiConfig: {
-					type: Object,
-					value: null
-				},
-				attachmentConfig: {
-					type: Object,
-					value: null
-				},
-				_displayTotalUsers: {
-					type: String,
-					computed: '_formatNumber(formatNumber, totalUsers)'
-				},
-				/**
-				 * Total users who have submitted. Loaded from url if provided.
-				 */
-				totalUsersWithSubmissions: {
-					type: Number
-				},
-				_displayTotalSubmissions: {
-					type: String,
-					computed: '_formatNumber(formatNumber, totalUsersWithSubmissions)'
-				},
-				_displayDueDate: {
-					type: String,
-					computed: '_formatDateTime(formatDateTime, dueDate)'
-				},
-				/**
-				 * Whether the component is enabled.
-				 * Depends on user permissions.
-				 *
-				 * This is set as soon as the component is ready.
-				 */
-				enabled: {
-					notify: true,
-					readOnly: true,
-					type: Boolean,
-					value: false
-				},
-				activityName: {
-					type: String,
-					value: 'dropbox'
-				},
-				/**
-				 * Whether the user can view submissions
-				 */
-				canViewAllSubmissions: {
-					type: Boolean,
-					value: false
-				},
-				fileAttachmentList: {
-					type: Array
-				},
-				submissionLabel:{
-					type: String,
-					computed: 'computeSubmissionLabel(submitted, graded, submissionType, completionType, completionDate)'
-				},
-				instructorSubmissionLabel:{
-					type: String,
-					computed: 'computeInstructorSubmissionLabel(submissionType)'
-				},
-				instructorLabelSubmissionReplacement:{
-					type: String,
-					computed: 'computeInstructorLabelSubmissionReplacement(submissionType)'
-				},
-				partialError: {
-					type: Boolean,
-					value: false
-				},
-				partialErrorMessage: String,
-				activityUsageLink: {
-					type: String,
-					notify: true
-				},
-				myActivityUsageLink: {
-					type: String,
-					value: null,
-					notify: true
-				},
-				hasSubmitStatus: {
-					type: Boolean,
-					notify: true,
-					computed: '_hasLink(link)'
-				},
-				isMobileView: {
-					type: Boolean,
-					value: false
-				},
-				assignmentDetailsEnabled: {
-					type: Boolean,
-					value: false
-				},
-				_showActivityDetailsLink: {
-					type: Boolean,
-					value: false
-				},
-				isImmersive: {
-					type: Boolean,
-					value: false
-				},
-				moreLessHeight: {
-					type: String,
-					computed: '_setMoreLessHeight(isMobileView)'
-				},
-				submissionType: {
-					type: Number,
-					value: 0
-				},
-				completionType: {
-					type: Number,
-					value: 0
-				},
-				completionDate: {
-					type: String,
-					value: null
-				},
-				resource: {
-					type: Object
-				}
-			},
-			listeners: {
-				'alert-closed': '_onAlertClosed'
-			},
-			observers: [
-				'_hasMyActivityDetailsLink(assignmentDetailsEnabled, myActivityUsageLink)'
-			],
-			ready: function() {
-			},
-			delete: function() {
-				this.$.data.delete();
-			},
-			_hasFileAttachmentList: function(fileAttachmentList) {
-				return (fileAttachmentList || []).length > 0;
-			},
-			_isPrimary: function(submitted, graded, completionDate) {
-				var complete = completionDate ? true : false;
-
-				return !submitted && !graded && !complete;
-			},
-			_showSubmitButton: function(canViewAllSubmissions, link) {
-				return link && !canViewAllSubmissions;
-			},
-			_showViewAllSubmissions: function(canViewAllSubmissions) {
-				return canViewAllSubmissions;
-			},
-			_showDueDateMargin: function(canViewAllSubmissions, link, isMobileView) {
-				return (this._showSubmitButton(canViewAllSubmissions, link) || this._showViewAllSubmissions(canViewAllSubmissions)) && !isMobileView;
-			},
-			_hasLink: function(link) {
-				return !!link;
-			},
-			_hasMyActivityDetailsLink: function(assignmentDetailsEnabled, myActivityUsageLink) {
-				this._showActivityDetailsLink = assignmentDetailsEnabled && myActivityUsageLink;
-			},
-			_openActivityDetails: function() {
-				var event = new CustomEvent('open-immersive-page', {
-					bubbles: true,
-					detail: {
-						pageName: 'activity-details',
-						userActivityUsageHref: this.myActivityUsageLink
-					}
-				});
-				this.dispatchEvent(event);
-			},
-			_onKeydownOpenActivityDetails: function(e) {
-				if (e.keyCode === 13 || e.keyCode === 32) {
-					this._openActivityDetails();
-				}
-			},
-			computeSubmissionLabel: function(submitted, graded, submissionType, completionType, completionDate) {
-				var isObservational = this._isObservationalAssignment(submissionType);
-
-				if (graded) {
-					return 'submit_graded';
-				}
-
-				if (isObservational) {
-					if (completionDate) {
-						return 'submit_completed';
-					}
-
-					if (completionType === 2) {
-						return 'submit_mark_as_complete';
-					}
-
-					return 'submit_view_details';
-				}
-
-				if (submitted) {
-					return 'submit_submitted';
-				}
-
-				return 'submit';
-			},
-			computeInstructorSubmissionLabel: function(submissionType) {
-				return this._isObservationalAssignment(submissionType) ? 'view_completions' : 'view_submissions';
-			},
-			computeInstructorLabelSubmissionReplacement: function(submissionType) {
-				return this._isObservationalAssignment(submissionType) ? 'totalCompletions' : 'totalSubmissions';
-			},
-			_load: function() {
-				if (this.url) {
-					this.$.data.load();
-				}
-			},
-			_formatNumber: function(formatNumber, number) {
-				return formatNumber(number);
-			},
-			_formatDateTime: function(formatDateTime, dateTime) {
-				var dateTimeWithZone = moment.tz(dateTime, this.getTimezone().identifier);
-				var formatted = formatDateTime(
-					new Date(
-						dateTimeWithZone.year(),
-						dateTimeWithZone.month(),
-						dateTimeWithZone.date(),
-						dateTimeWithZone.hours(),
-						dateTimeWithZone.minutes()
-					),
-					{ format: 'medium' }
-				);
-				return formatted;
-			},
-			_onAlertClosed: function() {
-				this.partialError = false;
-			},
-			_showMoreLess: function(apiConfig, isImmersive) {
-				return !isImmersive && ((apiConfig || {}).launchDarklyFlags || {}).enableTruncate;
-			},
-			_setMoreLessHeight: function(isMobileView) {
-				if (isMobileView) {
-					return '4.7rem';
-				} else {
-					return '5.5rem';
-				}
-			},
-			_isObservationalAssignment: function(submissionType) {
-				return (submissionType === 2 || submissionType === 3);
-			}
-		});
-	</script>
-</dom-module>
diff --git a/d2l-assignment-viewer.js b/d2l-assignment-viewer.js
new file mode 100644
index 0000000..088c101
--- /dev/null
+++ b/d2l-assignment-viewer.js
@@ -0,0 +1,481 @@
+/**
+`d2l-assignment-viewer`
+View Brightspace assignments
+
+@demo demo/d2l-assignment-viewer.html
+*/
+/*
+  FIXME(polymer-modulizer): the above comments were extracted
+  from HTML and may be out of place here. Review them and
+  then delete this comment!
+*/
+import '@polymer/polymer/polymer-legacy.js';
+
+import 'd2l-link/d2l-link.js';
+import 'd2l-alert/d2l-alert.js';
+import 'd2l-typography/d2l-typography.js';
+import './localize-behavior.js';
+import 's-html/s-html.js';
+import './d2l-assignment-viewer-data.js';
+import 'd2l-more-less/d2l-more-less.js';
+import 'd2l-attachments-ui/d2l-attachment-ui.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-assignment-viewer">
+	<template strip-whitespace="">
+		<style include="d2l-typography link-button-styles">
+			.submission-link {
+				@apply --d2l-offscreen;
+			}
+
+			.submission-info {
+				display: flex;
+				justify-content: flex-start;
+				flex-direction: row;
+			}
+
+			d2l-attachment-list {
+				margin-bottom: 30px;
+				display: block;
+			}
+
+			#due-date {
+				@apply --d2l-body-small-text;
+				margin-left: 0;
+			}
+
+			:host-context([dir="rtl"]) #due-date {
+				margin-left: auto;
+				margin-right: 0;
+			}
+
+			#due-date[show-margin] {
+				 margin-left: 1.05rem;
+			 }
+
+			:host-context([dir="rtl"]) #due-date[show-margin] {
+				margin-left: 0;
+				margin-right: 1.05rem;
+			}
+
+			@media (max-width: 615px), (max-device-width: 960px) {
+				.submission-info {
+					flex-direction: column;
+				}
+
+				.submission-info button {
+					width: 100%;
+				}
+
+				#due-date {
+					@apply --d2l-body-compact-text;
+					margin-left: 0;
+					margin-right: 0;
+				}
+
+				:host-context([dir="rtl"])  a.link-button.submission-button,
+				a.link-button.submission-button {
+					margin: 0 0 1rem 0;
+				}
+			}
+
+			d2l-alert {
+				margin-bottom: 20px;
+			}
+
+			.name-text {
+				font-weight: bold;
+			}
+
+			.name {
+				margin-bottom: 0.6rem;
+				display: inline-block;
+			}
+
+			.d2l-typography p.instructions {
+				margin-top: 0;
+			}
+
+			.instructions-wrapper p:first-of-type {
+				margin-top: 0;
+			}
+
+			.instructions-wrapper p:last-of-type {
+				margin-bottom: 0;
+			}
+
+			.instructions-wrapper ul {
+				list-style-type: disc;
+			}
+
+			.instructions-wrapper ul ul {
+				list-style-type: circle;
+			}
+
+			.instructions-wrapper ul ul ul {
+				list-style-type: square;
+			}
+
+			[hidden] {
+				display: none !important;
+			}
+		</style>
+
+		<d2l-assignment-viewer-data id="data" url="[[url]]" api-config="[[apiConfig]]" resource="{{resource}}" enabled="{{enabled}}" name="{{name}}" submission-type="{{submissionType}}" completion-type="{{completionType}}" completion-date="{{completionDate}}" instructions="{{instructions}}" due-date="{{dueDate}}" link="{{link}}" total-users="{{totalUsers}}" total-users-with-submissions="{{totalUsersWithSubmissions}}" can-view-all-submissions="{{canViewAllSubmissions}}" file-attachment-list="{{fileAttachmentList}}" submitted="{{submitted}}" graded="{{graded}}" activity-usage-link="{{activityUsageLink}}" my-activity-usage-link="{{myActivityUsageLink}}">
+		</d2l-assignment-viewer-data>
+
+		<div class="d2l-typography">
+			<div class$="d2l-body-standard">
+				<d2l-link class="name d2l-body-standard" main="" href="[[link]]" target="_top" hidden$="[[!_hasLink(link)]]">[[name]]</d2l-link>
+				<span hidden$="[[_hasLink(link)]]">
+					<d2l-link class="name d2l-body-standard" on-tap="_openActivityDetails" on-keydown="_onKeydownOpenActivityDetails" main="" target="_top" tabindex="0" hidden$="[[!_showActivityDetailsLink]]">[[name]]</d2l-link>
+					<span hidden$="[[_showActivityDetailsLink]]" class="name-text name d2l-body-standard">[[name]]</span>
+				</span>
+				<p hidden$="[[!instructions]]" class="instructions d2l-body-standard">
+					<template is="dom-if" if="[[_showMoreLess(apiConfig,isImmersive)]]">
+						<d2l-more-less height="[[moreLessHeight]]" h-align="text">
+							<s-html html="[[instructions]]"><span class="instructions-wrapper"></span></s-html>
+						</d2l-more-less>
+					</template>
+					<template is="dom-if" if="[[!_showMoreLess(apiConfig,isImmersive)]]">
+						<s-html html="[[instructions]]"><span class="instructions-wrapper"></span></s-html>
+					</template>
+				</p>
+				<template is="dom-if" if="[[partialError]]" restamp="">
+					<d2l-alert type="error" has-close-button="">[[partialErrorMessage]]</d2l-alert>
+				</template>
+				<template is="dom-if" if="[[_hasFileAttachmentList(fileAttachmentList)]]">
+					<d2l-attachment-list>
+						<template is="dom-repeat" items="[[fileAttachmentList]]">
+							<li slot="attachment" class="panel">
+								<d2l-attachment attachment-id="[[item.id]]" attachment="[[item]]" attachment-config="[[attachmentConfig]]" api-config="[[apiConfig]]" is-mobile-view="[[isMobileView]]">
+								</d2l-attachment>
+							</li>
+						</template>
+					</d2l-attachment-list>
+				</template>
+				<div class="submission-info">
+					<template is="dom-if" if="[[_showViewAllSubmissions(canViewAllSubmissions)]]">
+						<a id="view-all-submissions" href="[[link]]" target="_top" class="link-button submission-button">[[localize( instructorSubmissionLabel, instructorLabelSubmissionReplacement, _displayTotalSubmissions, 'totalUsers', _displayTotalUsers)]]</a>
+					</template>
+					<template is="dom-if" if="[[_showSubmitButton(canViewAllSubmissions, link)]]">
+						<a id="submit-submission" href="[[link]]" target="_top" primary$="[[_isPrimary(submitted,graded,completionDate)]]" class="link-button submission-button">[[localize(submissionLabel)]]</a>
+					</template>
+					<template is="dom-if" if="[[dueDate]]">
+						<p id="due-date" show-margin$="[[_showDueDateMargin(canViewAllSubmissions, link, isMobileView)]]">[[localize('due', 'dueDate', _displayDueDate)]]</p>
+					</template>
+				</div>
+			</div>
+		</div>
+	</template>
+
+	
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
+Polymer({
+
+	is: 'd2l-assignment-viewer',
+
+	behaviors: [
+		D2L.PolymerBehaviors.Assignment.LocalizeBehavior
+	],
+	/**
+		 * Fired when the viewer is loaded.
+		 *
+		 * `e.detail` is set true or false
+		 *
+		 * @event d2l-assignment-viewer-loaded
+		 * @param {Object} e Event parameters.
+		 */
+	properties: {
+		/**
+		 * Assignment url
+		 *
+		 * Url to load assignment data from.
+		 */
+		url: {
+			type: String,
+			observer: '_load'
+		},
+		/**
+		 * Name for the assignment. Loaded from url if provided.
+		 */
+		name: {
+			type: String
+		},
+		/**
+		 * Instructions for the assignment. Loaded from url if provided.
+		 */
+		instructions: {
+			type: String
+		},
+		/**
+		 * Due date for the assignment. Loaded from url if provided.
+		 * ISO 8601 format
+		 */
+		dueDate: {
+			type: String
+		},
+		/**
+		 * Link to the assignment in the UI. Loaded from url if provided.
+		 */
+		link: {
+			type: String
+		},
+		/**
+		 * Total users who can submit. Loaded from url if provided.
+		 */
+		totalUsers: {
+			type: Number
+		},
+		/**
+		 * Submission state of an assignment for user
+		 */
+		submitted: {
+			type: Boolean
+		},
+		/**
+		* Submission grade state of an assignment for user
+		*/
+		graded: {
+			type: Boolean
+		},
+		apiConfig: {
+			type: Object,
+			value: null
+		},
+		attachmentConfig: {
+			type: Object,
+			value: null
+		},
+		_displayTotalUsers: {
+			type: String,
+			computed: '_formatNumber(formatNumber, totalUsers)'
+		},
+		/**
+		 * Total users who have submitted. Loaded from url if provided.
+		 */
+		totalUsersWithSubmissions: {
+			type: Number
+		},
+		_displayTotalSubmissions: {
+			type: String,
+			computed: '_formatNumber(formatNumber, totalUsersWithSubmissions)'
+		},
+		_displayDueDate: {
+			type: String,
+			computed: '_formatDateTime(formatDateTime, dueDate)'
+		},
+		/**
+		 * Whether the component is enabled.
+		 * Depends on user permissions.
+		 *
+		 * This is set as soon as the component is ready.
+		 */
+		enabled: {
+			notify: true,
+			readOnly: true,
+			type: Boolean,
+			value: false
+		},
+		activityName: {
+			type: String,
+			value: 'dropbox'
+		},
+		/**
+		 * Whether the user can view submissions
+		 */
+		canViewAllSubmissions: {
+			type: Boolean,
+			value: false
+		},
+		fileAttachmentList: {
+			type: Array
+		},
+		submissionLabel:{
+			type: String,
+			computed: 'computeSubmissionLabel(submitted, graded, submissionType, completionType, completionDate)'
+		},
+		instructorSubmissionLabel:{
+			type: String,
+			computed: 'computeInstructorSubmissionLabel(submissionType)'
+		},
+		instructorLabelSubmissionReplacement:{
+			type: String,
+			computed: 'computeInstructorLabelSubmissionReplacement(submissionType)'
+		},
+		partialError: {
+			type: Boolean,
+			value: false
+		},
+		partialErrorMessage: String,
+		activityUsageLink: {
+			type: String,
+			notify: true
+		},
+		myActivityUsageLink: {
+			type: String,
+			value: null,
+			notify: true
+		},
+		hasSubmitStatus: {
+			type: Boolean,
+			notify: true,
+			computed: '_hasLink(link)'
+		},
+		isMobileView: {
+			type: Boolean,
+			value: false
+		},
+		assignmentDetailsEnabled: {
+			type: Boolean,
+			value: false
+		},
+		_showActivityDetailsLink: {
+			type: Boolean,
+			value: false
+		},
+		isImmersive: {
+			type: Boolean,
+			value: false
+		},
+		moreLessHeight: {
+			type: String,
+			computed: '_setMoreLessHeight(isMobileView)'
+		},
+		submissionType: {
+			type: Number,
+			value: 0
+		},
+		completionType: {
+			type: Number,
+			value: 0
+		},
+		completionDate: {
+			type: String,
+			value: null
+		},
+		resource: {
+			type: Object
+		}
+	},
+	listeners: {
+		'alert-closed': '_onAlertClosed'
+	},
+	observers: [
+		'_hasMyActivityDetailsLink(assignmentDetailsEnabled, myActivityUsageLink)'
+	],
+	ready: function() {
+	},
+	delete: function() {
+		this.$.data.delete();
+	},
+	_hasFileAttachmentList: function(fileAttachmentList) {
+		return (fileAttachmentList || []).length > 0;
+	},
+	_isPrimary: function(submitted, graded, completionDate) {
+		var complete = completionDate ? true : false;
+
+		return !submitted && !graded && !complete;
+	},
+	_showSubmitButton: function(canViewAllSubmissions, link) {
+		return link && !canViewAllSubmissions;
+	},
+	_showViewAllSubmissions: function(canViewAllSubmissions) {
+		return canViewAllSubmissions;
+	},
+	_showDueDateMargin: function(canViewAllSubmissions, link, isMobileView) {
+		return (this._showSubmitButton(canViewAllSubmissions, link) || this._showViewAllSubmissions(canViewAllSubmissions)) && !isMobileView;
+	},
+	_hasLink: function(link) {
+		return !!link;
+	},
+	_hasMyActivityDetailsLink: function(assignmentDetailsEnabled, myActivityUsageLink) {
+		this._showActivityDetailsLink = assignmentDetailsEnabled && myActivityUsageLink;
+	},
+	_openActivityDetails: function() {
+		var event = new CustomEvent('open-immersive-page', {
+			bubbles: true,
+			detail: {
+				pageName: 'activity-details',
+				userActivityUsageHref: this.myActivityUsageLink
+			}
+		});
+		this.dispatchEvent(event);
+	},
+	_onKeydownOpenActivityDetails: function(e) {
+		if (e.keyCode === 13 || e.keyCode === 32) {
+			this._openActivityDetails();
+		}
+	},
+	computeSubmissionLabel: function(submitted, graded, submissionType, completionType, completionDate) {
+		var isObservational = this._isObservationalAssignment(submissionType);
+
+		if (graded) {
+			return 'submit_graded';
+		}
+
+		if (isObservational) {
+			if (completionDate) {
+				return 'submit_completed';
+			}
+
+			if (completionType === 2) {
+				return 'submit_mark_as_complete';
+			}
+
+			return 'submit_view_details';
+		}
+
+		if (submitted) {
+			return 'submit_submitted';
+		}
+
+		return 'submit';
+	},
+	computeInstructorSubmissionLabel: function(submissionType) {
+		return this._isObservationalAssignment(submissionType) ? 'view_completions' : 'view_submissions';
+	},
+	computeInstructorLabelSubmissionReplacement: function(submissionType) {
+		return this._isObservationalAssignment(submissionType) ? 'totalCompletions' : 'totalSubmissions';
+	},
+	_load: function() {
+		if (this.url) {
+			this.$.data.load();
+		}
+	},
+	_formatNumber: function(formatNumber, number) {
+		return formatNumber(number);
+	},
+	_formatDateTime: function(formatDateTime, dateTime) {
+		var dateTimeWithZone = moment.tz(dateTime, this.getTimezone().identifier);
+		var formatted = formatDateTime(
+			new Date(
+				dateTimeWithZone.year(),
+				dateTimeWithZone.month(),
+				dateTimeWithZone.date(),
+				dateTimeWithZone.hours(),
+				dateTimeWithZone.minutes()
+			),
+			{ format: 'medium' }
+		);
+		return formatted;
+	},
+	_onAlertClosed: function() {
+		this.partialError = false;
+	},
+	_showMoreLess: function(apiConfig, isImmersive) {
+		return !isImmersive && ((apiConfig || {}).launchDarklyFlags || {}).enableTruncate;
+	},
+	_setMoreLessHeight: function(isMobileView) {
+		if (isMobileView) {
+			return '4.7rem';
+		} else {
+			return '5.5rem';
+		}
+	},
+	_isObservationalAssignment: function(submissionType) {
+		return (submissionType === 2 || submissionType === 3);
+	}
+});
diff --git a/d2l-bubble-styles.html b/d2l-bubble-styles.js
similarity index 89%
rename from d2l-bubble-styles.html
rename to d2l-bubble-styles.js
index 119bfc7..aff77b0 100644
--- a/d2l-bubble-styles.html
+++ b/d2l-bubble-styles.js
@@ -1,7 +1,9 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-colors/d2l-colors.html">
-<dom-module id="d2l-bubble-styles">
-	<template strip-whitespace>
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-colors/d2l-colors.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-bubble-styles">
+	<template strip-whitespace="">
 		<style include="d2l-colors">
 			:host {
 				--d2l-bubble: {
@@ -128,4 +130,6 @@
 			}
 		</style>
 	</template>
-</dom-module>
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
diff --git a/d2l-field-styles.html b/d2l-field-styles.js
similarity index 78%
rename from d2l-field-styles.html
rename to d2l-field-styles.js
index 9d5f1e7..2b55ba3 100644
--- a/d2l-field-styles.html
+++ b/d2l-field-styles.js
@@ -1,7 +1,9 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-colors/d2l-colors.html">
-<dom-module id="d2l-field-styles">
-	<template strip-whitespace>
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-colors/d2l-colors.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-field-styles">
+	<template strip-whitespace="">
 		<style>
 			.d2l-field-row {
 				border: none;
@@ -62,4 +64,6 @@
 			}
 		</style>
 	</template>
-</dom-module>
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
diff --git a/d2l-loaded-assignment-viewer.html b/d2l-loaded-assignment-viewer.html
deleted file mode 100644
index 9cbacde..0000000
--- a/d2l-loaded-assignment-viewer.html
+++ /dev/null
@@ -1,333 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-typography/d2l-typography.html">
-<link rel="import" href="./localize-behavior.html">
-<link rel="import" href="../s-html/s-html.html">
-<link rel="import" href="./d2l-assignment-viewer-data.html">
-<link rel="import" href="./build/link-button-styles.html">
-<link rel="import" href="../d2l-attachments-ui/d2l-attachment-ui.html">
-<link rel="import" href="d2l-field-styles.html">
-
-<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
-<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
-
-<dom-module id="d2l-loaded-assignment-viewer">
-	<template strip-whitespace>
-		<style include="d2l-field-styles d2l-typography link-button-styles">
-			label.assignment-details {
-				margin-top: 1rem;
-			}
-
-			div.assignment-details {
-				display: flex;
-				justify-content: flex-start;
-				flex-direction: row;
-			}
-
-			label.attachments {
-				margin-top: 0.7rem;
-			}
-
-			d2l-attachment-list {
-				display: block;
-			}
-
-			.dates {
-				width: 65%;
-				vertical-align: bottom;
-			}
-
-			.added-to-grade-label {
-				width: 25%;
-				vertical-align: bottom;
-			}
-
-			.max-grade {
-				width: 10%;
-				text-align: right;
-				vertical-align: bottom;
-			}
-
-			:host-context([dir="rtl"]) .dates, .added-to-grade-label {
-				margin-left: auto;
-				margin-right: 0;
-			}
-
-			:host-context([dir="rtl"]) .max-grade {
-				text-align: left
-			}
-
-			label {
-				color: var(--d2l-color-galena);
-				display: block;
-				font-family: inherit;
-				font-size: 0.7rem;
-				font-weight: lighter;
-				letter-spacing: 0.5px;
-				line-height: 2rem;
-			}
-
-			@media (max-width: 615px), (max-device-width: 960px) {
-				div.assignment-details {
-					flex-direction: column;
-				}
-
-				 .dates, .added-to-grade-label {
-					width: 100%;
-					margin-left: 0;
-					margin-right: 0;
-				}
-
-			}
-
-			.name-text {
-				font-weight: bold;
-			}
-
-			.name {
-				display: inline-block;
-			}
-
-			.instructions {
-				margin-top: 0.8rem;
-			}
-
-			.instructions-wrapper p:first-of-type {
-				margin-top: 0;
-			}
-
-			.instructions-wrapper p:last-of-type {
-				margin-bottom: 0;
-			}
-
-			[hidden],
-			[or-hidden] {
-				display: none !important;
-			}
-		</style>
-
-		<d2l-assignment-viewer-data
-			id="data"
-			url="[[url]]"
-			api-config=[[apiConfig]]
-			resource="{{resource}}"
-			enabled="{{enabled}}"
-			name={{name}}
-			instructions={{instructions}}
-			due-date={{dueDate}}
-			link={{link}}
-			file-attachment-list={{fileAttachmentList}}
-			activity-usage-link={{activityUsageLink}}
-			out-of={{outOf}}
-			can-add-grade={{canAddGrade}}
-			has-assignment-details={{hasAssignmentDetails}}
-		>
-		</d2l-assignment-viewer-data>
-
-		<div class="d2l-typography">
-			<div class$="d2l-body-standard">
-				<label hidden$="[[noHeader]]" aria-hidden="true" role="presentation">[[localize('assignment_loaded')]]</label>
-				<span class="name-text name d2l-body-standard">[[name]]</span>
-				<div hidden$="[[!instructions]]" class="instructions d2l-body-standard">
-					<s-html html="[[instructions]]">
-						<span class="instructions-wrapper"></span>
-					</s-html>
-				</div>
-				<label class="assignment-details" aria-hidden="true" role="presentation" hidden$="[[!hasAssignmentDetails]]">[[localize('assignment_details')]]</label>
-				<div class="assignment-details">
-					<span class="dates d2l-body-compact" hidden$="[[!_hasDueDate(dueDate)]]">[[localize('due', 'dueDate', _displayDueDate)]]</span>
-					<span class="added-to-grade-label d2l-body-compact" hidden$="[[!canAddGrade]]">[[localize('added_to_grades')]]</span>
-					<span class="max-grade d2l-body-compact" hidden$="[[!canAddGrade]]">/[[outOf]]</span>
-				</div>
-				<slot name="activity-settings"></slot>
-				<template is="dom-if" if="[[_hasFileAttachmentList(fileAttachmentList)]]">
-					<label class="attachments" aria-hidden="true" role="presentation">[[localize('attachments')]]</label>
-					<d2l-attachment-list>
-						<template is="dom-repeat" items="[[fileAttachmentList]]">
-							<li slot="attachment" class="panel">
-								<d2l-attachment attachment-id=[[item.id]] attachment=[[item]] attachment-config=[[attachmentConfig]] api-config=[[apiConfig]] is-mobile-view=[[isMobileView]]>
-								</d2l-attachment>
-							</li>
-						</template>
-					</d2l-attachment-list>
-				</template>
-			</div>
-		</div>
-	</template>
-
-	<script>
-		Polymer({
-
-			is: 'd2l-loaded-assignment-viewer',
-
-			behaviors: [
-				D2L.PolymerBehaviors.Assignment.LocalizeBehavior
-			],
-			/**
-				 * Fired when the viewer is loaded.
-				 *
-				 * `e.detail` is set true or false
-				 *
-				 * @event d2l-assignment-viewer-loaded
-				 * @param {Object} e Event parameters.
-				 */
-			properties: {
-				/**
-				 * Assignment url
-				 *
-				 * Url to load assignment data from.
-				 */
-				url: {
-					type: Object,
-					observer: '_load'
-				},
-				/**
-				 * Name for the assignment. Loaded from url if provided.
-				 */
-				name: {
-					type: String
-				},
-				/**
-				 * Instructions for the assignment. Loaded from url if provided.
-				 */
-				instructions: {
-					type: String
-				},
-				/**
-				 * Due date for the assignment. Loaded from url if provided.
-				 * ISO 8601 format
-				 */
-				dueDate: {
-					type: String
-				},
-				/**
-				 * Link to the assignment in the UI. Loaded from url if provided.
-				 */
-				link: {
-					type: String
-				},
-				/**
-				 * Submission state of an assignment for user
-				 */
-				submitted: {
-					type: Boolean
-				},
-				/**
-				* Submission grade state of an assignment for user
-				*/
-				graded: {
-					type: Boolean
-				},
-				outOf: {
-					type: String
-				},
-				postNow: {
-					type: Boolean
-				},
-				canAddGrade: {
-					type: Boolean
-				},
-				hasAssignmentDetails: {
-					type: Boolean
-				},
-				apiConfig: {
-					type: Object,
-					value: null
-				},
-				attachmentConfig: {
-					type: Object,
-					value: null
-				},
-				_displayDueDate: {
-					type: String,
-					computed: '_formatDateTime(formatDateTime, dueDate)'
-				},
-				/**
-				 * Whether the component is enabled.
-				 * Depends on user permissions.
-				 *
-				 * This is set as soon as the component is ready.
-				 */
-				enabled: {
-					notify: true,
-					readOnly: true,
-					type: Boolean,
-					value: false
-				},
-				activityName: {
-					type: String,
-					value: 'dropbox'
-				},
-				fileAttachmentList: {
-					type: Array
-				},
-				activityUsageLink: {
-					type: String,
-					notify: true
-				},
-				/**
-				 * Do not show header information
-				 */
-				noHeader: {
-					type: Boolean,
-					value: false
-				},
-				isMobileView: {
-					type: Boolean,
-					value: false
-				},
-				resource: {
-					type: Object
-				}
-			},
-			ready: function() {
-			},
-			delete: function() {
-				this.$.data.delete();
-			},
-			_hasFileAttachmentList: function(fileAttachmentList) {
-				return (fileAttachmentList || []).length > 0;
-			},
-			_hasLink: function(link) {
-				return !!link;
-			},
-			_hasDueDate: function(dueDate) {
-				return dueDate !== undefined;
-			},
-			_load: function() {
-				if (this.url) {
-					this.$.data.load();
-				}
-			},
-			_formatDateTime: function(formatDateTime, dateTime) {
-				var dateTimeWithZone = moment.tz(dateTime, this.getTimezone().identifier);
-				var formatted = formatDateTime(
-					new Date(
-						dateTimeWithZone.year(),
-						dateTimeWithZone.month(),
-						dateTimeWithZone.date(),
-						dateTimeWithZone.hours(),
-						dateTimeWithZone.minutes()
-					),
-					{ format: 'medium' }
-				);
-				return formatted;
-			},
-			/**
-			 * Clears the current assignment fields
-			 *
-			 * @method clear
-			 */
-			clear: function() {
-				this.url = '';
-			},
-			/**
-			 * fires the save event to save the post
-			 *
-			 * @method save
-			 */
-			save: function() {
-				this.$.data.save(this.name, this.postNow);
-			}
-		});
-	</script>
-</dom-module>
diff --git a/d2l-loaded-assignment-viewer.js b/d2l-loaded-assignment-viewer.js
new file mode 100644
index 0000000..e5daeb7
--- /dev/null
+++ b/d2l-loaded-assignment-viewer.js
@@ -0,0 +1,316 @@
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-typography/d2l-typography.js';
+import './localize-behavior.js';
+import 's-html/s-html.js';
+import './d2l-assignment-viewer-data.js';
+import 'd2l-attachments-ui/d2l-attachment-ui.js';
+import './d2l-field-styles.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-loaded-assignment-viewer">
+	<template strip-whitespace="">
+		<style include="d2l-field-styles d2l-typography link-button-styles">
+			label.assignment-details {
+				margin-top: 1rem;
+			}
+
+			div.assignment-details {
+				display: flex;
+				justify-content: flex-start;
+				flex-direction: row;
+			}
+
+			label.attachments {
+				margin-top: 0.7rem;
+			}
+
+			d2l-attachment-list {
+				display: block;
+			}
+
+			.dates {
+				width: 65%;
+				vertical-align: bottom;
+			}
+
+			.added-to-grade-label {
+				width: 25%;
+				vertical-align: bottom;
+			}
+
+			.max-grade {
+				width: 10%;
+				text-align: right;
+				vertical-align: bottom;
+			}
+
+			:host-context([dir="rtl"]) .dates, .added-to-grade-label {
+				margin-left: auto;
+				margin-right: 0;
+			}
+
+			:host-context([dir="rtl"]) .max-grade {
+				text-align: left
+			}
+
+			label {
+				color: var(--d2l-color-galena);
+				display: block;
+				font-family: inherit;
+				font-size: 0.7rem;
+				font-weight: lighter;
+				letter-spacing: 0.5px;
+				line-height: 2rem;
+			}
+
+			@media (max-width: 615px), (max-device-width: 960px) {
+				div.assignment-details {
+					flex-direction: column;
+				}
+
+				 .dates, .added-to-grade-label {
+					width: 100%;
+					margin-left: 0;
+					margin-right: 0;
+				}
+
+			}
+
+			.name-text {
+				font-weight: bold;
+			}
+
+			.name {
+				display: inline-block;
+			}
+
+			.instructions {
+				margin-top: 0.8rem;
+			}
+
+			.instructions-wrapper p:first-of-type {
+				margin-top: 0;
+			}
+
+			.instructions-wrapper p:last-of-type {
+				margin-bottom: 0;
+			}
+
+			[hidden],
+			[or-hidden] {
+				display: none !important;
+			}
+		</style>
+
+		<d2l-assignment-viewer-data id="data" url="[[url]]" api-config="[[apiConfig]]" resource="{{resource}}" enabled="{{enabled}}" name="{{name}}" instructions="{{instructions}}" due-date="{{dueDate}}" link="{{link}}" file-attachment-list="{{fileAttachmentList}}" activity-usage-link="{{activityUsageLink}}" out-of="{{outOf}}" can-add-grade="{{canAddGrade}}" has-assignment-details="{{hasAssignmentDetails}}">
+		</d2l-assignment-viewer-data>
+
+		<div class="d2l-typography">
+			<div class$="d2l-body-standard">
+				<label hidden$="[[noHeader]]" aria-hidden="true" role="presentation">[[localize('assignment_loaded')]]</label>
+				<span class="name-text name d2l-body-standard">[[name]]</span>
+				<div hidden$="[[!instructions]]" class="instructions d2l-body-standard">
+					<s-html html="[[instructions]]">
+						<span class="instructions-wrapper"></span>
+					</s-html>
+				</div>
+				<label class="assignment-details" aria-hidden="true" role="presentation" hidden$="[[!hasAssignmentDetails]]">[[localize('assignment_details')]]</label>
+				<div class="assignment-details">
+					<span class="dates d2l-body-compact" hidden$="[[!_hasDueDate(dueDate)]]">[[localize('due', 'dueDate', _displayDueDate)]]</span>
+					<span class="added-to-grade-label d2l-body-compact" hidden$="[[!canAddGrade]]">[[localize('added_to_grades')]]</span>
+					<span class="max-grade d2l-body-compact" hidden$="[[!canAddGrade]]">/[[outOf]]</span>
+				</div>
+				<slot name="activity-settings"></slot>
+				<template is="dom-if" if="[[_hasFileAttachmentList(fileAttachmentList)]]">
+					<label class="attachments" aria-hidden="true" role="presentation">[[localize('attachments')]]</label>
+					<d2l-attachment-list>
+						<template is="dom-repeat" items="[[fileAttachmentList]]">
+							<li slot="attachment" class="panel">
+								<d2l-attachment attachment-id="[[item.id]]" attachment="[[item]]" attachment-config="[[attachmentConfig]]" api-config="[[apiConfig]]" is-mobile-view="[[isMobileView]]">
+								</d2l-attachment>
+							</li>
+						</template>
+					</d2l-attachment-list>
+				</template>
+			</div>
+		</div>
+	</template>
+
+	
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
+Polymer({
+
+	is: 'd2l-loaded-assignment-viewer',
+
+	behaviors: [
+		D2L.PolymerBehaviors.Assignment.LocalizeBehavior
+	],
+	/**
+		 * Fired when the viewer is loaded.
+		 *
+		 * `e.detail` is set true or false
+		 *
+		 * @event d2l-assignment-viewer-loaded
+		 * @param {Object} e Event parameters.
+		 */
+	properties: {
+		/**
+		 * Assignment url
+		 *
+		 * Url to load assignment data from.
+		 */
+		url: {
+			type: Object,
+			observer: '_load'
+		},
+		/**
+		 * Name for the assignment. Loaded from url if provided.
+		 */
+		name: {
+			type: String
+		},
+		/**
+		 * Instructions for the assignment. Loaded from url if provided.
+		 */
+		instructions: {
+			type: String
+		},
+		/**
+		 * Due date for the assignment. Loaded from url if provided.
+		 * ISO 8601 format
+		 */
+		dueDate: {
+			type: String
+		},
+		/**
+		 * Link to the assignment in the UI. Loaded from url if provided.
+		 */
+		link: {
+			type: String
+		},
+		/**
+		 * Submission state of an assignment for user
+		 */
+		submitted: {
+			type: Boolean
+		},
+		/**
+		* Submission grade state of an assignment for user
+		*/
+		graded: {
+			type: Boolean
+		},
+		outOf: {
+			type: String
+		},
+		postNow: {
+			type: Boolean
+		},
+		canAddGrade: {
+			type: Boolean
+		},
+		hasAssignmentDetails: {
+			type: Boolean
+		},
+		apiConfig: {
+			type: Object,
+			value: null
+		},
+		attachmentConfig: {
+			type: Object,
+			value: null
+		},
+		_displayDueDate: {
+			type: String,
+			computed: '_formatDateTime(formatDateTime, dueDate)'
+		},
+		/**
+		 * Whether the component is enabled.
+		 * Depends on user permissions.
+		 *
+		 * This is set as soon as the component is ready.
+		 */
+		enabled: {
+			notify: true,
+			readOnly: true,
+			type: Boolean,
+			value: false
+		},
+		activityName: {
+			type: String,
+			value: 'dropbox'
+		},
+		fileAttachmentList: {
+			type: Array
+		},
+		activityUsageLink: {
+			type: String,
+			notify: true
+		},
+		/**
+		 * Do not show header information
+		 */
+		noHeader: {
+			type: Boolean,
+			value: false
+		},
+		isMobileView: {
+			type: Boolean,
+			value: false
+		},
+		resource: {
+			type: Object
+		}
+	},
+	ready: function() {
+	},
+	delete: function() {
+		this.$.data.delete();
+	},
+	_hasFileAttachmentList: function(fileAttachmentList) {
+		return (fileAttachmentList || []).length > 0;
+	},
+	_hasLink: function(link) {
+		return !!link;
+	},
+	_hasDueDate: function(dueDate) {
+		return dueDate !== undefined;
+	},
+	_load: function() {
+		if (this.url) {
+			this.$.data.load();
+		}
+	},
+	_formatDateTime: function(formatDateTime, dateTime) {
+		var dateTimeWithZone = moment.tz(dateTime, this.getTimezone().identifier);
+		var formatted = formatDateTime(
+			new Date(
+				dateTimeWithZone.year(),
+				dateTimeWithZone.month(),
+				dateTimeWithZone.date(),
+				dateTimeWithZone.hours(),
+				dateTimeWithZone.minutes()
+			),
+			{ format: 'medium' }
+		);
+		return formatted;
+	},
+	/**
+	 * Clears the current assignment fields
+	 *
+	 * @method clear
+	 */
+	clear: function() {
+		this.url = '';
+	},
+	/**
+	 * fires the save event to save the post
+	 *
+	 * @method save
+	 */
+	save: function() {
+		this.$.data.save(this.name, this.postNow);
+	}
+});
diff --git a/d2l-planned-assignment-viewer-data.html b/d2l-planned-assignment-viewer-data.html
deleted file mode 100644
index 7ceb083..0000000
--- a/d2l-planned-assignment-viewer-data.html
+++ /dev/null
@@ -1,80 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../siren-parser-import/siren-parser.html">
-<link rel="import" href="./d2l-assignment-attachment-behavior.html">
-<link rel="import" href="./d2l-assignment-behavior.html">
-
-<dom-module id="d2l-planned-assignment-viewer-data">
-
-	<script>
-		Polymer({
-
-			is: 'd2l-planned-assignment-viewer-data',
-			behaviors: [
-				window.D2L.AssignmentAttachmentBehavior,
-				window.D2L.AssignmentBehavior
-			],
-			properties: {
-				url: {
-					type: String
-				},
-				enabled: {
-					type: String
-				},
-				resource: {
-					type: Object
-				},
-				name: {
-					type: String,
-					notify: true
-				}
-			},
-			load: function() {
-				var _this = this;
-				var assignmentUrl = this.getAssignmentUrl(this.url);
-				if (!assignmentUrl) {
-					return;
-				}
-				this.callUrl(assignmentUrl)
-					.then(function(response) {
-						if (response.ok) {
-							response.json()
-								.then(function(body) {
-									_this.resource = window.D2L.Hypermedia.Siren.Parse(body);
-									if (_this.resource.hasClass('assignment')) {
-										_this.name = _this.resource.properties.name;
-
-										_this.fire('d2l-planned-assignment-viewer-loaded', {
-											canEditAssignment: _this.resource.hasActionByName('quick-create-folder'),
-											canDeleteAssignment: _this.resource.hasActionByName('delete-folder')
-										});
-									}
-								});
-						} else if (response.status === 410) {
-							_this.fire('d2l-planned-assignment-viewer-resource-gone', true);
-						} else {
-							_this.fire('d2l-planned-assignment-viewer-loaded', false);
-						}
-					}).catch(function() {
-						_this.fire('d2l-planned-assignment-viewer-loaded', false);
-					});
-			},
-			delete: function() {
-				if (!this.resource) {
-					this.fire('d2l-planned-assignment-delete-failed');
-					return;
-				}
-				var action = this.resource.getActionByName('delete-folder');
-				var _this = this;
-				this.callUrl(action.href, action.method)
-					.then(function(response) {
-						if (response.ok) {
-							_this.fire('d2l-planned-assignment-delete-complete');
-						} else {
-							_this.fire('d2l-planned-assignment-delete-failed');
-						}
-					});
-			}
-		});
-	</script>
-
-</dom-module>
diff --git a/d2l-planned-assignment-viewer-data.js b/d2l-planned-assignment-viewer-data.js
new file mode 100644
index 0000000..165cc9b
--- /dev/null
+++ b/d2l-planned-assignment-viewer-data.js
@@ -0,0 +1,73 @@
+import '@polymer/polymer/polymer-legacy.js';
+import 'siren-parser/siren-parser.js';
+import './d2l-assignment-attachment-behavior.js';
+import './d2l-assignment-behavior.js';
+Polymer({
+
+	is: 'd2l-planned-assignment-viewer-data',
+	behaviors: [
+		window.D2L.AssignmentAttachmentBehavior,
+		window.D2L.AssignmentBehavior
+	],
+	properties: {
+		url: {
+			type: String
+		},
+		enabled: {
+			type: String
+		},
+		resource: {
+			type: Object
+		},
+		name: {
+			type: String,
+			notify: true
+		}
+	},
+	load: function() {
+		var _this = this;
+		var assignmentUrl = this.getAssignmentUrl(this.url);
+		if (!assignmentUrl) {
+			return;
+		}
+		this.callUrl(assignmentUrl)
+			.then(function(response) {
+				if (response.ok) {
+					response.json()
+						.then(function(body) {
+							_this.resource = window.D2L.Hypermedia.Siren.Parse(body);
+							if (_this.resource.hasClass('assignment')) {
+								_this.name = _this.resource.properties.name;
+
+								_this.fire('d2l-planned-assignment-viewer-loaded', {
+									canEditAssignment: _this.resource.hasActionByName('quick-create-folder'),
+									canDeleteAssignment: _this.resource.hasActionByName('delete-folder')
+								});
+							}
+						});
+				} else if (response.status === 410) {
+					_this.fire('d2l-planned-assignment-viewer-resource-gone', true);
+				} else {
+					_this.fire('d2l-planned-assignment-viewer-loaded', false);
+				}
+			}).catch(function() {
+				_this.fire('d2l-planned-assignment-viewer-loaded', false);
+			});
+	},
+	delete: function() {
+		if (!this.resource) {
+			this.fire('d2l-planned-assignment-delete-failed');
+			return;
+		}
+		var action = this.resource.getActionByName('delete-folder');
+		var _this = this;
+		this.callUrl(action.href, action.method)
+			.then(function(response) {
+				if (response.ok) {
+					_this.fire('d2l-planned-assignment-delete-complete');
+				} else {
+					_this.fire('d2l-planned-assignment-delete-failed');
+				}
+			});
+	}
+});
diff --git a/d2l-planned-assignment-viewer.html b/d2l-planned-assignment-viewer.html
deleted file mode 100644
index 338a801..0000000
--- a/d2l-planned-assignment-viewer.html
+++ /dev/null
@@ -1,87 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-typography/d2l-typography.html">
-<link rel="import" href="../d2l-alert/d2l-alert.html">
-<link rel="import" href="./d2l-planned-assignment-viewer-data.html">
-
-<dom-module id="d2l-planned-assignment-viewer">
-	<template strip-whitespace>
-		<style include="d2l-typography">
-		</style>
-
-		<d2l-planned-assignment-viewer-data id="data" url="[[url]]" resource="{{resource}}" enabled="{{enabled}}" name={{name}}>
-		</d2l-planned-assignment-viewer-data>
-		<template is="dom-if" if="[[partialError]]" restamp>
-			<d2l-alert type="error" has-close-button>[[partialErrorMessage]]</d2l-alert>
-		</template>
-		<span>[[name]]</span>
-	</template>
-
-	<script>
-		Polymer({
-
-			is: 'd2l-planned-assignment-viewer',
-
-			/**
-				 * Fired when the viewer is loaded.
-				 *
-				 * `e.detail` is set true or false
-				 *
-				 * @event d2l-planned-assignment-viewer-loaded
-				 * @param {Object} e Event parameters.
-				 */
-			properties: {
-				/**
-				 * Assignment url
-				 *
-				 * Url to load assignment data from.
-				 */
-				url: {
-					type: String,
-					observer: '_load'
-				},
-				/**
-				 * Name for the assignment. Loaded from url if provided.
-				 */
-				name: {
-					type: String
-				},
-				/**
-				 * Whether the component is enabled.
-				 * Depends on user permissions.
-				 *
-				 * This is set as soon as the component is ready.
-				 */
-				enabled: {
-					notify: true,
-					readOnly: true,
-					type: Boolean,
-					value: false
-				},
-				partialError: {
-					type: Boolean,
-					value: false
-				},
-				partialErrorMessage: String,
-				resource: {
-					type: Object
-				}
-			},
-			listeners: {
-				'alert-closed': '_onAlertClosed'
-			},
-			ready: function() {
-			},
-			delete: function() {
-				this.$.data.delete();
-			},
-			_load: function() {
-				if (this.url) {
-					this.$.data.load();
-				}
-			},
-			_onAlertClosed: function() {
-				this.partialError = false;
-			}
-		});
-	</script>
-</dom-module>
\ No newline at end of file
diff --git a/d2l-planned-assignment-viewer.js b/d2l-planned-assignment-viewer.js
new file mode 100644
index 0000000..deb8d91
--- /dev/null
+++ b/d2l-planned-assignment-viewer.js
@@ -0,0 +1,89 @@
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-typography/d2l-typography.js';
+import 'd2l-alert/d2l-alert.js';
+import './d2l-planned-assignment-viewer-data.js';
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-planned-assignment-viewer">
+	<template strip-whitespace="">
+		<style include="d2l-typography">
+		</style>
+
+		<d2l-planned-assignment-viewer-data id="data" url="[[url]]" resource="{{resource}}" enabled="{{enabled}}" name="{{name}}">
+		</d2l-planned-assignment-viewer-data>
+		<template is="dom-if" if="[[partialError]]" restamp="">
+			<d2l-alert type="error" has-close-button="">[[partialErrorMessage]]</d2l-alert>
+		</template>
+		<span>[[name]]</span>
+	</template>
+
+	
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
+Polymer({
+
+	is: 'd2l-planned-assignment-viewer',
+
+	/**
+		 * Fired when the viewer is loaded.
+		 *
+		 * `e.detail` is set true or false
+		 *
+		 * @event d2l-planned-assignment-viewer-loaded
+		 * @param {Object} e Event parameters.
+		 */
+	properties: {
+		/**
+		 * Assignment url
+		 *
+		 * Url to load assignment data from.
+		 */
+		url: {
+			type: String,
+			observer: '_load'
+		},
+		/**
+		 * Name for the assignment. Loaded from url if provided.
+		 */
+		name: {
+			type: String
+		},
+		/**
+		 * Whether the component is enabled.
+		 * Depends on user permissions.
+		 *
+		 * This is set as soon as the component is ready.
+		 */
+		enabled: {
+			notify: true,
+			readOnly: true,
+			type: Boolean,
+			value: false
+		},
+		partialError: {
+			type: Boolean,
+			value: false
+		},
+		partialErrorMessage: String,
+		resource: {
+			type: Object
+		}
+	},
+	listeners: {
+		'alert-closed': '_onAlertClosed'
+	},
+	ready: function() {
+	},
+	delete: function() {
+		this.$.data.delete();
+	},
+	_load: function() {
+		if (this.url) {
+			this.$.data.load();
+		}
+	},
+	_onAlertClosed: function() {
+		this.partialError = false;
+	}
+});
diff --git a/demo/d2l-assignment-editor.html b/demo/d2l-assignment-editor.html
index f64d0ad..863e486 100644
--- a/demo/d2l-assignment-editor.html
+++ b/demo/d2l-assignment-editor.html
@@ -6,63 +6,80 @@
 
 		<title>d2l-assignment-editor demo</title>
 
-		<script src="../../webcomponentsjs/webcomponents-lite.js"></script>
+		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
 
-		<link rel="import" href="../../iron-demo-helpers/demo-pages-shared-styles.html">
-		<link rel="import" href="../../iron-demo-helpers/demo-snippet.html">
-		<link rel="import" href="../../d2l-button/d2l-button.html">
-		<link rel="import" href="../d2l-assignment-editor.html">
+		<script type="module" src="../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
+		<script type="module" src="../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
+		<script type="module" src="../../d2l-button/d2l-button.js"></script>
+		<script type="module" src="../d2l-assignment-editor.js"></script>
 
-		<custom-style>
+		<!-- FIXME(polymer-modulizer):
+		These imperative modules that innerHTML your HTML are
+		a hacky way to be sure that any mixins in included style
+		modules are ready before any elements that reference them are
+		instantiated, otherwise the CSS @apply mixin polyfill won't be
+		able to expand the underlying CSS custom properties.
+		See: https://github.com/Polymer/polymer-modulizer/issues/154
+		-->
+	<script type="module">
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<custom-style>
 			<style is="custom-style" include="demo-pages-shared-styles">
 			</style>
-		</custom-style>
+		</custom-style>`;
+
+document.body.appendChild($_documentContainer.content);
+</script>
 	</head>
 	<body>
-		<script>
-			function printFormData(event) {
-				if (event.detail.entries) {
-					var output = "";
-					for (var pair of event.detail.entries()) {
-						output += pair[0]+ ': ' + pair[1] + '<br>';
-					}
-					var console = document.getElementById('output');
-					console.innerHTML = output;
-					var editor = document.getElementById('editor');
-					editor.removeEventListener('d2l-assignment-save-failed', printFormData);
-				}
-			}
+		<script type="module">
+import '@polymer/iron-demo-helpers/demo-pages-shared-styles.js';
+import '@polymer/iron-demo-helpers/demo-snippet.js';
+import 'd2l-button/d2l-button.js';
+import '../d2l-assignment-editor.js';
+function printFormData(event) {
+	if (event.detail.entries) {
+		var output = "";
+		for (var pair of event.detail.entries()) {
+			output += pair[0]+ ': ' + pair[1] + '<br>';
+		}
+		var console = document.getElementById('output');
+		console.innerHTML = output;
+		var editor = document.getElementById('editor');
+		editor.removeEventListener('d2l-assignment-save-failed', printFormData);
+	}
+}
 
-			function save() {
-				var editor = document.getElementById('editor');
-				editor.addEventListener('d2l-assignment-save-failed', printFormData);
-				editor.save();
-			}
+function save() {
+	var editor = document.getElementById('editor');
+	editor.addEventListener('d2l-assignment-save-failed', printFormData);
+	editor.save();
+}
 
-			document.body.addEventListener('dom-change', function loaded() {
-				document.body.removeEventListener('dom-change', loaded);
-				document.querySelector('d2l-assignment-editor')._canAddGrade = true;
-			});
-		</script>
-		<div class="vertical-section-container centered">
+document.body.addEventListener('dom-change', function loaded() {
+	document.body.removeEventListener('dom-change', loaded);
+	document.querySelector('d2l-assignment-editor')._canAddGrade = true;
+});
+</script>
+		<script type="module">
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<div class="vertical-section-container centered">
 			<h1>d2l-assignment-editor demo</h1>
 			<h3>d2l-assignment-editor new assignment</h3>
 			<demo-snippet>
 				<template>
-					<d2l-assignment-editor
-						id="editor"
-						is-new-assignment
-						name="How now brown cow"
-						instructions="In a while crocodile"
-						due-date="2017-11-04"
-						load-existing-enabled
-					></d2l-assignment-editor>
+					<d2l-assignment-editor id="editor" is-new-assignment="" name="How now brown cow" instructions="In a while crocodile" due-date="2017-11-04" load-existing-enabled=""></d2l-assignment-editor>
 				</template>
 			</demo-snippet>
 			<d2l-button onclick="save();">Save</d2l-button>
 			<demo-snippet>
 				<div id="output"></div>
 			</demo-snippet>
-		</div>
+		</div>`;
+
+document.body.appendChild($_documentContainer.content);
+</script>
 	</body>
 </html>
diff --git a/demo/d2l-assignment-viewer.html b/demo/d2l-assignment-viewer.html
index d657c7c..77a5d61 100644
--- a/demo/d2l-assignment-viewer.html
+++ b/demo/d2l-assignment-viewer.html
@@ -6,58 +6,66 @@
 
 		<title>d2l-assignment-editor demo</title>
 
-		<script src="../../webcomponentsjs/webcomponents-lite.js"></script>
+		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
 
-		<link rel="import" href="../../iron-demo-helpers/demo-pages-shared-styles.html">
-		<link rel="import" href="../../iron-demo-helpers/demo-snippet.html">
-		<link rel="import" href="../d2l-assignment-viewer.html">
-		<link rel="import" href="../../d2l-button/d2l-button.html">
+		<script type="module" src="../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
+		<script type="module" src="../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
+		<script type="module" src="../d2l-assignment-viewer.js"></script>
+		<script type="module" src="../../d2l-button/d2l-button.js"></script>
 
-		<custom-style>
+		<!-- FIXME(polymer-modulizer):
+		These imperative modules that innerHTML your HTML are
+		a hacky way to be sure that any mixins in included style
+		modules are ready before any elements that reference them are
+		instantiated, otherwise the CSS @apply mixin polyfill won't be
+		able to expand the underlying CSS custom properties.
+		See: https://github.com/Polymer/polymer-modulizer/issues/154
+		-->
+	<script type="module">
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<custom-style>
 			<style is="custom-style" include="demo-pages-shared-styles">
 			</style>
-		</custom-style>
+		</custom-style>`;
+
+document.body.appendChild($_documentContainer.content);
+</script>
 	</head>
 	<body>
-		<script>
-			function toggleInstructorView() {
-				document.getElementById('viewer').canViewAllSubmissions =
-					!document.getElementById('viewer').canViewAllSubmissions;
-			}
-		</script>
-		<div class="vertical-section-container centered">
+		<script type="module">
+import '@polymer/iron-demo-helpers/demo-pages-shared-styles.js';
+import '@polymer/iron-demo-helpers/demo-snippet.js';
+import '../d2l-assignment-viewer.js';
+import 'd2l-button/d2l-button.js';
+function toggleInstructorView() {
+	document.getElementById('viewer').canViewAllSubmissions =
+		!document.getElementById('viewer').canViewAllSubmissions;
+}
+</script>
+		<script type="module">
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<div class="vertical-section-container centered">
 			<h1>d2l-assignment-viewer demo</h1>
 
 			<h3>(Instructor) Has Due Date and HTML markup</h3>
 			<d2l-button onclick="toggleInstructorView();">Toggle instructor View</d2l-button>
 			<demo-snippet>
 				<template>
-					<d2l-assignment-viewer
-						id="viewer"
-						name="A happy assignment"
-						instructions="Do this one in <i>your</i> sleep"
-						due-date="2017-11-04T19:02:01.123Z"
-						link="http://d2l.com?abc=def"
-						total-users="20000"
-						total-users-with-submissions="55",
-						can-view-all-submissions="true"
-					></d2l-assignment-viewer>
+					<d2l-assignment-viewer id="viewer" name="A happy assignment" instructions="Do this one in <i>your</i> sleep" due-date="2017-11-04T19:02:01.123Z" link="http://d2l.com?abc=def" total-users="20000" total-users-with-submissions="55" ,="" can-view-all-submissions="true"></d2l-assignment-viewer>
 				</template>
 			</demo-snippet>
 
 			<h3>(Student) No Due Date</h3>
 			<demo-snippet>
 				<template>
-					<d2l-assignment-viewer
-						id="viewer"
-						name="A happy assignment"
-						instructions="Do this one in <i>your</i> sleep"
-						link="http://d2l.com?abc=def"
-						total-users="20000"
-						total-users-with-submissions="55"
-					></d2l-assignment-viewer>
+					<d2l-assignment-viewer id="viewer" name="A happy assignment" instructions="Do this one in <i>your</i> sleep" link="http://d2l.com?abc=def" total-users="20000" total-users-with-submissions="55"></d2l-assignment-viewer>
 				</template>
 			</demo-snippet>
-		</div>
+		</div>`;
+
+document.body.appendChild($_documentContainer.content);
+</script>
 	</body>
 </html>
diff --git a/index.html b/index.html
deleted file mode 100644
index 3cd3b38..0000000
--- a/index.html
+++ /dev/null
@@ -1,16 +0,0 @@
-<!doctype html>
-<html>
-  <head>
-    <meta charset="utf-8">
-    <meta name="viewport" content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes">
-
-    <title>d2l-assignments-ui</title>
-
-    <script src="../webcomponentsjs/webcomponents-lite.js"></script>
-
-    <link rel="import" href="../iron-component-page/iron-component-page.html">
-  </head>
-  <body>
-    <iron-component-page src="d2l-assignment-ui.html"></iron-component-page>
-  </body>
-</html>
diff --git a/localize-behavior.html b/localize-behavior.html
deleted file mode 100644
index b5df259..0000000
--- a/localize-behavior.html
+++ /dev/null
@@ -1,48 +0,0 @@
-<link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-localize-behavior/d2l-localize-behavior.html">
-
-<script>
-	window.D2L = window.D2L || {};
-	window.D2L.PolymerBehaviors = window.D2L.PolymerBehaviors || {};
-	window.D2L.PolymerBehaviors.Assignment = window.D2L.PolymerBehaviors.Assignment || {};
-	/** @polymerBehavior D2L.PolymerBehaviors.Assignment.LocalizeBehavior */
-	D2L.PolymerBehaviors.Assignment.LocalizeBehaviorImpl = {
-		properties: {
-			resources: {
-				value: function() {
-					return {
-						'ar': {},
-						'da': {},
-						'de': {},
-						'en': {},
-						'es': {},
-						'fi': {},
-						'fr': {},
-						'ja': {},
-						'ko': {},
-						'nb': {},
-						'nl': {},
-						'pt': {},
-						'sv': {},
-						'tr': {},
-						'zh': {},
-						'zh-TW': {}
-					};
-				}
-			}
-		},
-		listeners: {
-			'd2l-localize-behavior-language-changed': '_onLanguageChange'
-		},
-		_onLanguageChange: function() {
-			if (this.language) {
-				this.loadResources(this.resolveUrl('./build/langterms/' + this.language + '.json'), this.language, true);
-			}
-		}
-	};
-	/** @polymerBehavior */
-	D2L.PolymerBehaviors.Assignment.LocalizeBehavior = [
-		D2L.PolymerBehaviors.LocalizeBehavior,
-		D2L.PolymerBehaviors.Assignment.LocalizeBehaviorImpl
-	];
-</script>
\ No newline at end of file
diff --git a/localize-behavior.js b/localize-behavior.js
new file mode 100644
index 0000000..815d0e3
--- /dev/null
+++ b/localize-behavior.js
@@ -0,0 +1,45 @@
+import '@polymer/polymer/polymer-legacy.js';
+import 'd2l-localize-behavior/d2l-localize-behavior.js';
+window.D2L = window.D2L || {};
+window.D2L.PolymerBehaviors = window.D2L.PolymerBehaviors || {};
+window.D2L.PolymerBehaviors.Assignment = window.D2L.PolymerBehaviors.Assignment || {};
+/** @polymerBehavior D2L.PolymerBehaviors.Assignment.LocalizeBehavior */
+D2L.PolymerBehaviors.Assignment.LocalizeBehaviorImpl = {
+	properties: {
+		resources: {
+			value: function() {
+				return {
+					'ar': {},
+					'da': {},
+					'de': {},
+					'en': {},
+					'es': {},
+					'fi': {},
+					'fr': {},
+					'ja': {},
+					'ko': {},
+					'nb': {},
+					'nl': {},
+					'pt': {},
+					'sv': {},
+					'tr': {},
+					'zh': {},
+					'zh-TW': {}
+				};
+			}
+		}
+	},
+	listeners: {
+		'd2l-localize-behavior-language-changed': '_onLanguageChange'
+	},
+	_onLanguageChange: function() {
+		if (this.language) {
+			this.loadResources(this.resolveUrl('./build/langterms/' + this.language + '.json'), this.language, true);
+		}
+	}
+};
+/** @polymerBehavior */
+D2L.PolymerBehaviors.Assignment.LocalizeBehavior = [
+	D2L.PolymerBehaviors.LocalizeBehavior,
+	D2L.PolymerBehaviors.Assignment.LocalizeBehaviorImpl
+];
diff --git a/package.json b/package.json
index b548cad..4a4053a 100644
--- a/package.json
+++ b/package.json
@@ -1,27 +1,30 @@
 {
+  "description": "Polymer-based web component for creating D2L assignments",
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/BrightspaceUI/assignment-editor.git"
+  },
   "name": "d2l-assignments-ui",
   "version": "2.41.0",
-  "private": true,
-  "description": "Polymer-based web component for creating D2L assignments",
   "scripts": {
     "serve": "polymer serve",
-    "postinstall": "bower prune && bower update && bower install --allow-root && npm run build",
     "test": "npm run lint && npm run test:unit:local",
-    "lint": "npm run lint:html && npm run lint:wc",
-    "lint:html": "eslint *.html",
-    "lint:wc": "polymer lint -i *.html",
+    "lint": "npm run lint:wc && npm run lint:js",
+    "lint:js": "eslint . --ext .js,.html test/**/*.js test/**/*.html demo/**/*.js demo/**/*.html",
+    "lint:wc": "polymer lint",
     "test:unit:local": "polymer test --skip-plugin sauce --local chrome",
     "build": "rimraf build && mkdir build && gulp build && npm run build:lang",
     "build:lang": "l10n-language-builder ./lang ./build/langterms --logLevel=warn"
   },
-  "repository": {
-    "type": "git",
-    "url": "https://github.com/BrightspaceUI/assignment-editor.git"
-  },
   "author": "D2L Corporation",
   "license": "Apache-2.0",
   "devDependencies": {
+    "@polymer/iron-component-page": "^4.0.0",
+    "@polymer/iron-demo-helpers": "^3.0.0",
+    "@polymer/iron-test-helpers": "^3.0.0",
+    "@webcomponents/webcomponentsjs": "^2.2.3",
     "autoprefixer": "^7.1.1",
+    "babel-eslint": "^10.0.1",
     "bower": "^1.7.7",
     "bower-art-resolver": "^2.0.8",
     "eslint": "^3.7.1",
@@ -36,8 +39,38 @@
     "gulp-task-doc": "^1.0.11",
     "l10n-language-builder": "^0.0.6",
     "node-sass": "^4.5.3",
-    "polymer-cli": "^1.8.0",
-    "rimraf": "^2.6.1"
+    "polymer-cli": "^1.9.5",
+    "rimraf": "^2.6.1",
+    "wct-browser-legacy": "^1.0.1"
+  },
+  "dependencies": {
+    "@polymer/polymer": "^3.0.0",
+    "d2l-tooltip": "BrightspaceUI/tooltip#semver:^3",
+    "d2l-inputs": "BrightspaceUI/inputs#semver:^2",
+    "d2l-button": "BrightspaceUI/button#semver:^5",
+    "d2l-colors": "BrightspaceUI/colors#semver:^4",
+    "d2l-icons": "BrightspaceUI/icons#semver:^6",
+    "d2l-link": "BrightspaceUI/link#semver:^5",
+    "d2l-typography": "BrightspaceUI/typography#semver:^7",
+    "d2l-offscreen": "BrightspaceUI/offscreen#semver:^4",
+    "s-html": "Brightspace/s-html#semver:^2.0.0",
+    "d2l-datetime-picker": "BrightspaceUI/datetime-picker#semver:^4",
+    "d2l-loading-spinner": "BrightspaceUI/loading-spinner#semver:^7",
+    "d2l-attachments-ui": "Brightspace/attachments-ui#semver:^3",
+    "d2l-alert": "BrightspaceUI/alert#semver:^4",
+    "whatwg-fetch": "^2.0.0",
+    "d2l-hypermedia-constants": "^6",
+    "d2l-fetch": "Brightspace/d2l-fetch.git#semver:^2",
+    "siren-parser": "^8.0.0",
+    "d2l-html-editor": "Brightspace/d2l-html-editor#semver:^2",
+    "d2l-more-less": "BrightspaceUI/more-less#semver:^5",
+    "d2l-localize-behavior": "BrightspaceUI/localize-behavior#semver:^2"
+  },
+  "resolutions": {
+    "inherits": "2.0.3",
+    "samsam": "1.1.3",
+    "supports-color": "3.1.2",
+    "type-detect": "1.0.0"
   },
-  "dependencies": {}
+  "main": "d2l-assignment-editor.js"
 }
diff --git a/polymer.json b/polymer.json
index ca16716..77968dc 100644
--- a/polymer.json
+++ b/polymer.json
@@ -1,6 +1,7 @@
 {
+  "npm": true,
   "lint": {
-    "rules": ["polymer-2-hybrid"],
+    "rules": ["polymer-3"],
     "ignoreWarnings": [
       "not-loadable"
     ]
diff --git a/sass/link-button.scss b/sass/link-button.scss
index c487fc7..43520c5 100644
--- a/sass/link-button.scss
+++ b/sass/link-button.scss
@@ -1,4 +1,4 @@
-@import 'bower_components/d2l-button/d2l-button.scss';
+@import 'node_modules/d2l-button/d2l-button.scss';
 
 a.link-button {
 	@include d2l-button();
diff --git a/sass/select.scss b/sass/select.scss
index d5e8e3d..1b6365e 100644
--- a/sass/select.scss
+++ b/sass/select.scss
@@ -1,4 +1,4 @@
-@import "bower_components/vui-input/select.scss";
+@import "node_modules/vui-input/select.scss";
 
 select {
 	@include vui-input-select();
diff --git a/test-resources/behavior-elements/assignment-attachment-behavior.html b/test-resources/behavior-elements/assignment-attachment-behavior.html
deleted file mode 100644
index 39b1343..0000000
--- a/test-resources/behavior-elements/assignment-attachment-behavior.html
+++ /dev/null
@@ -1,14 +0,0 @@
-<link rel="import" href="../../../polymer/polymer.html">
-<link rel="import" href="../../d2l-assignment-attachment-behavior.html">
-
-<dom-module id="assignment-attachment-behavior">
-	<script>
-		'use strict';
-		Polymer({
-			is: 'assignment-attachment-behavior',
-			behaviors: [
-				window.D2L.AssignmentAttachmentBehavior
-			]
-		});
-	</script>
-</dom-module>
diff --git a/test-resources/behavior-elements/assignment-attachment-behavior.js b/test-resources/behavior-elements/assignment-attachment-behavior.js
new file mode 100644
index 0000000..c95417b
--- /dev/null
+++ b/test-resources/behavior-elements/assignment-attachment-behavior.js
@@ -0,0 +1,8 @@
+import '@polymer/polymer/polymer-legacy.js';
+import '../../d2l-assignment-attachment-behavior.js';
+Polymer({
+	is: 'assignment-attachment-behavior',
+	behaviors: [
+		window.D2L.AssignmentAttachmentBehavior
+	]
+});
diff --git a/test/d2l-assignment-attachment-behavior_test.html b/test/d2l-assignment-attachment-behavior_test.html
index c210717..2398ee3 100644
--- a/test/d2l-assignment-attachment-behavior_test.html
+++ b/test/d2l-assignment-attachment-behavior_test.html
@@ -6,10 +6,10 @@
 
 		<title>d2l-assignment-attachment-behavior test</title>
 
-		<script src="../../webcomponentsjs/webcomponents-lite.js"></script>
-		<script src="../../web-component-tester/browser.js"></script>
+		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../wct-browser-legacy/browser.js"></script>
 
-		<link rel="import" href="../test-resources/behavior-elements/assignment-attachment-behavior.html">
+		<script type="module" src="../test-resources/behavior-elements/assignment-attachment-behavior.js"></script>
 	</head>
 	<body>
 		<test-fixture id="default-fixture">
@@ -17,59 +17,60 @@
 				<assignment-attachment-behavior></assignment-attachment-behavior>
 			</template>
 		</test-fixture>
-		<script>
-			describe('d2l-assignment-attachment-behavior', function() {
-				it('generates the correct attachment object from link attachment returned from HM', function() {
-					var thing = fixture('default-fixture');
+		<script type="module">
+import '../test-resources/behavior-elements/assignment-attachment-behavior.js';
+describe('d2l-assignment-attachment-behavior', function() {
+	it('generates the correct attachment object from link attachment returned from HM', function() {
+		var thing = fixture('default-fixture');
 
-					var linkHref = 'linkHref';
-					var deleteAction = 'deleteAction';
-					var linkName = 'linkName';
-					var linkType = 'linkType';
+		var linkHref = 'linkHref';
+		var deleteAction = 'deleteAction';
+		var linkName = 'linkName';
+		var linkType = 'linkType';
 
 
-					var link = {
-						getActionByName: sinon.stub().returns(deleteAction),
-						properties: {
-							name: linkName,
-							href: linkHref
-						}
-					};
+		var link = {
+			getActionByName: sinon.stub().returns(deleteAction),
+			properties: {
+				name: linkName,
+				href: linkHref
+			}
+		};
 
-					var createdAttachment = thing.linkToAttachment(link);
-					expect(createdAttachment).to.deep.include({
-						name: linkName,
-						id: linkHref,
-						url: linkHref,
-						deleteAction: deleteAction,
-						isDeleted: false
-					});
-					expect(createdAttachment.type).to.be.undefined;
-				});
-			});
+		var createdAttachment = thing.linkToAttachment(link);
+		expect(createdAttachment).to.deep.include({
+			name: linkName,
+			id: linkHref,
+			url: linkHref,
+			deleteAction: deleteAction,
+			isDeleted: false
+		});
+		expect(createdAttachment.type).to.be.undefined;
+	});
+});
 
-			describe('d2l-assignment-attachment-behavior newLinkAttachment', function() {
-				it('generates a linkattachment from dialogserivce', function() {
-					var thing = fixture('default-fixture');
+describe('d2l-assignment-attachment-behavior newLinkAttachment', function() {
+	it('generates a linkattachment from dialogserivce', function() {
+		var thing = fixture('default-fixture');
 
-					var linkHref = 'http://google.ca';
-					var linkName = 'google';
+		var linkHref = 'http://google.ca';
+		var linkName = 'google';
 
-					var link = {
-						name: linkName,
-						url:linkHref
-					};
+		var link = {
+			name: linkName,
+			url:linkHref
+		};
 
-					var createdAttachment = thing.newLinkToAttachment(link);
-					expect(createdAttachment).to.deep.include({
-						name: linkName,
-						id: linkHref,
-						url: linkHref,
-						isDeleted: false
-					});
-					expect(createdAttachment.type).to.be.undefined;
-				});
-			});
-		</script>
+		var createdAttachment = thing.newLinkToAttachment(link);
+		expect(createdAttachment).to.deep.include({
+			name: linkName,
+			id: linkHref,
+			url: linkHref,
+			isDeleted: false
+		});
+		expect(createdAttachment.type).to.be.undefined;
+	});
+});
+</script>
 	</body>
 </html>
diff --git a/test/d2l-assignment-editor_test.html b/test/d2l-assignment-editor_test.html
index 47d53e9..f25c8d2 100644
--- a/test/d2l-assignment-editor_test.html
+++ b/test/d2l-assignment-editor_test.html
@@ -6,13 +6,13 @@
 
 	<title>d2l-assignment-editor test</title>
 
-	<script src="../../webcomponentsjs/webcomponents-lite.js"></script>
-	<script src="../../web-component-tester/browser.js"></script>
+	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+	<script src="../../wct-browser-legacy/browser.js"></script>
 
-	<link rel="import" href="../d2l-assignment-editor.html">
+	<script type="module" src="../d2l-assignment-editor.js"></script>
 
-	<script src="fixtures/assignment-home.js"></script>
-	<script src="fixtures/assignment.js"></script>
+	<script src="./fixtures/assignment-home.js"></script>
+	<script src="./fixtures/assignment.js"></script>
 
 	</head>
 	<body>
@@ -26,868 +26,869 @@
 			<d2l-assignment-editor></d2l-assignment-editor>
 		</template>
 	</test-fixture>
-	<script>
-		function getAttachment() {
-			return {
-				type: 'Document',
-				name: 'name',
-				id: 'testId',
-				url: 'testUrl',
-				isDeleted: false,
-				file: new File([], 'fileName'),
-			};
-		};
-		function getExistingAttachment() {
-			return {
-				type: 'Document',
-				name: 'name',
-				id: 'testId',
-				url: 'testUrl',
-				isDeleted: false,
-				deleteAction: {
-					href: 'testDeleteUrl',
-					method: 'DELETE'
-				},
-			};
-		};
-		function getSubmissionOptions() {
-			var actions = window.testFixtures.assignmentHomeCanCreate.actions;
-			var quickCreate = actions.find(function(action){ 
-				return action.name == "quick-create-folder";
+	<script type="module">
+import '../d2l-assignment-editor.js';
+function getAttachment() {
+	return {
+		type: 'Document',
+		name: 'name',
+		id: 'testId',
+		url: 'testUrl',
+		isDeleted: false,
+		file: new File([], 'fileName'),
+	};
+}
+function getExistingAttachment() {
+	return {
+		type: 'Document',
+		name: 'name',
+		id: 'testId',
+		url: 'testUrl',
+		isDeleted: false,
+		deleteAction: {
+			href: 'testDeleteUrl',
+			method: 'DELETE'
+		},
+	};
+}
+function getSubmissionOptions() {
+	var actions = window.testFixtures.assignmentHomeCanCreate.actions;
+	var quickCreate = actions.find(function(action){ 
+		return action.name == "quick-create-folder";
+	});
+
+	var availableSubmssionOptions = quickCreate.fields.find(function(field) {
+		return field.name == "submissionType";
+	});
+
+	var availableCompletionOptions = quickCreate.fields.find(function(field) {
+		return field.name == "completionType";
+	});
+
+	return {
+		availableSubmssionOptions: availableSubmssionOptions,
+		availableCompletionOptions: availableCompletionOptions
+	};
+}
+
+describe('d2l-assignment-editor', function() {
+	var editor;
+	var fetch;
+
+	afterEach(() => {
+		fetch && fetch.restore();
+	});
+
+	describe('when loading new editor and can create', function() {
+		beforeEach(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
+				}
 			});
+			window.d2lfetch.fetch.returns(promise);
+		});
+
+		it('is loaded if can create assignments', function(done) {
+			var editor = fixture('fromUrl');
+			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+				if (done.isDone) return;
+				assert.equal(event.detail, true);
 
-			var availableSubmssionOptions = quickCreate.fields.find(function(field) {
-				return field.name == "submissionType";
+				done.isDone = true;
+				done();
+			});
+		});
+	});
+
+	describe('when loading new editor and cannot create', function() {
+		describe('assignments tool loaded', function() {
+			beforeEach(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCannotCreate));
+					}
+				});
+				window.d2lfetch.fetch.returns(promise);
 			});
 
-			var availableCompletionOptions = quickCreate.fields.find(function(field) {
-				return field.name == "completionType";
+			it('is not loaded if cannot create assignments', function(done) {
+				var editor = fixture('fromUrl');
+				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+					assert.equal(event.detail, false);
+					done();
+				});
 			});
+		});
 
-			return {
-				availableSubmssionOptions: availableSubmssionOptions,
-				availableCompletionOptions: availableCompletionOptions
-			};
-		}
+		describe('assignments tool disabled', function() {
+			beforeEach(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: false,
+				});
+				window.d2lfetch.fetch.returns(promise);
+			});
 
-		describe('d2l-assignment-editor', function() {
-			var editor;
-			var fetch;
+			it('is not loaded', function(done) {
+				var editor = fixture('fromUrl');
+				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+					assert.equal(event.detail, false);
+					done();
+				});
+			});
+		});
+	});
 
-			afterEach(() => {
-				fetch && fetch.restore();
+	describe('assignments validation errors', function() {
+		describe('name validation error', function() {
+			var editor;
+			beforeEach(function() {
+				editor = fixture('manual');
+				editor.$.instructions.value = 'In a while crocodile';
+				editor.$.dueDate.value = '2017-10-10T05:05:05.555';
 			});
 
-			describe('when loading new editor and can create', function() {
-				beforeEach(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
-						}
-					});
-					window.d2lfetch.fetch.returns(promise);
+			it('shows validation error for invalid field', function(done) {
+				editor.save();
+				flush(function() {
+					expect(editor.$$('#name-error').className).to.contain('d2l-bubble-show');
+					done();
 				});
+			});
 
-				it('is loaded if can create assignments', function(done) {
-					var editor = fixture('fromUrl');
-					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-						if (done.isDone) return;
-						assert.equal(event.detail, true);
+			it('sets invalid state on field', function(done) {
+				editor.save();
+				flush(function() {
+					expect(editor.$.name.hasAttribute('aria-invalid')).to.be.true;
+					done();
+				});
+			});
 
-						done.isDone = true;
+			it('clears error state on typing', function(done) {
+				editor.save();
+				flush(function() {
+					editor.name = "Fix me";
+					flush(function() {
+						expect(editor.$.name.hasAttribute('aria-invaliid')).to.be.false;
+						expect(editor.$$('#name-error').className).not.to.contain('d2l-bubble-show');
 						done();
 					});
 				});
 			});
+		});
 
-			describe('when loading new editor and cannot create', function() {
-				describe('assignments tool loaded', function() {
-					beforeEach(function() {
-						fetch = sinon.stub(window.d2lfetch, 'fetch');
-						var promise = Promise.resolve({
-							ok: true,
-							json: function() {
-								return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCannotCreate));
-							}
-						});
-						window.d2lfetch.fetch.returns(promise);
-					});
+		describe('maximumGrade validation error', function() {
+			var editor;
+			beforeEach(function() {
+				editor = fixture('manual');
+				editor.addToGrades = true;
+				editor.$.name.value = 'See you later alligator';
+				editor.$.instructions.value = 'In a while crocodile';
+				editor.$.dueDate.value = '2017-10-10T05:05:05.555';
+				editor.$.maximumGrade.value = '';
+			});
 
-					it('is not loaded if cannot create assignments', function(done) {
-						var editor = fixture('fromUrl');
-						editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-							assert.equal(event.detail, false);
-							done();
-						});
-					});
+			it('shows validation error for invalid field, empty input', function(done) {
+				editor.save();
+				flush(function() {
+					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+					done();
 				});
+			});
 
-				describe('assignments tool disabled', function() {
-					beforeEach(function() {
-						fetch = sinon.stub(window.d2lfetch, 'fetch');
-						var promise = Promise.resolve({
-							ok: false,
-						});
-						window.d2lfetch.fetch.returns(promise);
-					});
+			it('shows validation error for invalid field, number too small', function(done) {
+				editor.$.maximumGrade.value = '0.001';
+				editor.save();
+				flush(function() {
+					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+					done();
+				});
+			});
 
-					it('is not loaded', function(done) {
-						var editor = fixture('fromUrl');
-						editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-							assert.equal(event.detail, false);
-							done();
-						});
-					});
+			it('shows validation error for invalid field, number too large', function(done) {
+				editor.$.maximumGrade.value = '10000000000';
+				editor.save();
+				flush(function() {
+					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+					done();
 				});
 			});
 
-			describe('assignments validation errors', function() {
-				describe('name validation error', function() {
-					var editor;
-					beforeEach(function() {
-						editor = fixture('manual');
-						editor.$.instructions.value = 'In a while crocodile';
-						editor.$.dueDate.value = '2017-10-10T05:05:05.555';
-					});
+			it('shows validation error for invalid field, not a number', function(done) {
+				editor.$.maximumGrade.value = 'D2L';
+				editor.save();
+				flush(function() {
+					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+					done();
+				});
+			});
 
-					it('shows validation error for invalid field', function(done) {
-						editor.save();
-						flush(function() {
-							expect(editor.$$('#name-error').className).to.contain('d2l-bubble-show');
-							done();
-						});
-					});
+			it('sets invalid state on field', function(done) {
+				editor.save();
+				flush(function() {
+					expect(editor.$.maximumGrade.hasAttribute('aria-invalid')).to.be.true;
+					done();
+				});
+			});
 
-					it('sets invalid state on field', function(done) {
-						editor.save();
-						flush(function() {
-							expect(editor.$.name.hasAttribute('aria-invalid')).to.be.true;
-							done();
-						});
+			it('clears error state on typing', function(done) {
+				editor.save();
+				flush(function() {
+					editor.maximumGrade = "1";
+					flush(function() {
+						expect(editor.$.maximumGrade.hasAttribute('aria-invaliid')).to.be.false;
+						expect(editor.$$('#maximum-grade-error').className).not.to.contain('d2l-bubble-show');
+						done();
 					});
+				});
+			});
+		});
+	});
 
-					it('clears error state on typing', function(done) {
-						editor.save();
-						flush(function() {
-							editor.name = "Fix me";
-							flush(function() {
-								expect(editor.$.name.hasAttribute('aria-invaliid')).to.be.false;
-								expect(editor.$$('#name-error').className).not.to.contain('d2l-bubble-show');
-								done();
-							});
-						});
-					});
+	describe('assignments save new', function() {
+		beforeEach(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.assigmentNewFolder));
+				}
+			});
+			window.d2lfetch.fetch.returns(promise);
+		});
+
+		it('save succeeds', function(done) {
+			var editor = fixture('manual');
+			editor.$.data.resource
+				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
+
+			editor.addEventListener('d2l-assignment-save-complete', function(event) {
+				assert(fetch.calledWith(sinon.match.has('method', 'POST')));
+				assert.equal(event.detail.id,
+					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+
+				var request = fetch.args[0][0];
+				request.text().then(function(data) {
+					assert(data.includes("Testing 123"));
+					done();
 				});
+			});
+			editor.name = "Testing 123";
+			editor.save();
+		});
+	});
+
+	describe('assignments checkDirty', function() {
+		var editor;
+		beforeEach(function() {
+			editor = fixture('manual');
+			editor.$.data.resource
+				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
+
+			editor.name = 'How now brown cow';
+			editor.instructions = 'In a while crocodile';
+			editor.dueDate = '2017-10-10T05:05:05.555';
+			editor.addToGrades = true;
+			editor.maximumGrade = '10';
+			editor.existingAttachments = [ getExistingAttachment() ];
+			editor.attachmentsToSave = [];
+
+			editor.$.data.getInitialValues = function() {
+				return {
+					name: 'How now brown cow',
+					instructions: 'In a while crocodile',
+					dueDate: '2017-10-10T05:05:05.555',
+					outOf: '10',
+					addToGrades: true,
+					existingAttachments: [ getExistingAttachment() ],
+					attachmentsToSave: []
+				}
+			}
+		});
 
-				describe('maximumGrade validation error', function() {
-					var editor;
-					beforeEach(function() {
-						editor = fixture('manual');
-						editor.addToGrades = true;
-						editor.$.name.value = 'See you later alligator';
-						editor.$.instructions.value = 'In a while crocodile';
-						editor.$.dueDate.value = '2017-10-10T05:05:05.555';
-						editor.$.maximumGrade.value = '';
-					});
+		it('returns false when the nothing is changed', function() {
+			expect(editor.checkDirty()).to.be.false;
+		});
 
-					it('shows validation error for invalid field, empty input', function(done) {
-						editor.save();
-						flush(function() {
-							expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-							done();
-						});
-					});
+		it('returns true when the name is changed', function() {
+			editor.name = 'CHANGEDNAME';
+			expect(editor.checkDirty()).to.be.true;
+		});
 
-					it('shows validation error for invalid field, number too small', function(done) {
-						editor.$.maximumGrade.value = '0.001';
-						editor.save();
-						flush(function() {
-							expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-							done();
-						});
-					});
+		it('returns true when the instructions are changed', function() {
+			editor.instructions = 'CHANGEDINSTRUCTIONS';
+			expect(editor.checkDirty()).to.be.true;
+		});
 
-					it('shows validation error for invalid field, number too large', function(done) {
-						editor.$.maximumGrade.value = '10000000000';
-						editor.save();
-						flush(function() {
-							expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-							done();
-						});
-					});
+		it('returns true when the dueDate is changed', function() {
+			editor.dueDate = '2017-10-10T05:05:05.123';
+			expect(editor.checkDirty()).to.be.true;
+		});
 
-					it('shows validation error for invalid field, not a number', function(done) {
-						editor.$.maximumGrade.value = 'D2L';
-						editor.save();
-						flush(function() {
-							expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-							done();
-						});
-					});
+		it('returns true when addToGrades is changed', function() {
+			editor.addToGrades = false;
+			expect(editor.checkDirty()).to.be.true;
+		});
 
-					it('sets invalid state on field', function(done) {
-						editor.save();
-						flush(function() {
-							expect(editor.$.maximumGrade.hasAttribute('aria-invalid')).to.be.true;
-							done();
-						});
-					});
+		it('returns true when the maximum grade is changed', function() {
+			editor.maximumGrade = '100';
+			expect(editor.checkDirty()).to.be.true;
+		});
 
-					it('clears error state on typing', function(done) {
-						editor.save();
-						flush(function() {
-							editor.maximumGrade = "1";
-							flush(function() {
-								expect(editor.$.maximumGrade.hasAttribute('aria-invaliid')).to.be.false;
-								expect(editor.$$('#maximum-grade-error').className).not.to.contain('d2l-bubble-show');
-								done();
-							});
-						});
-					});
-				});
-			});
+		it('returns true when any attachments are in the removed state', function() {
+			editor.attachmentsToSave = [ getAttachment() ];
+			expect(editor.checkDirty()).to.be.true;
+		});
 
-			describe('assignments save new', function() {
-				beforeEach(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
+		it('returns true when there are any new attachments added', function() {
+			var deletedAttachment = getExistingAttachment();
+			deletedAttachment.isDeleted = true;
+			editor.existingAttachments = [ deletedAttachment ];
+			expect(editor.checkDirty()).to.be.true;
+		});
+	});
+
+	describe('assignments clear', function() {
+		var editor;
+		beforeEach(function() {
+			editor = fixture('manual');
+			editor.$.data.resource
+				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
+
+			editor.name = 'How now brown cow';
+			editor.instructions = 'In a while crocodile';
+			editor.dueDate = '2017-10-10T05:05:05.555';
+			editor.addToGrades = true;
+			editor.maximumGrade = '10';
+
+			expect(editor.$.name.value).to.equal('How now brown cow');
+			expect(editor.$.instructions.value).to.equal('In a while crocodile');
+			expect(editor.$.dueDate.datetime).to.equal('2017-10-10T05:05:05.555');
+			expect(editor.$.addToGrades.checked).to.be.true;
+			expect(editor.$.maximumGrade.value).to.equal('10');
+		});
 
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.assigmentNewFolder));
-						}
-					});
-					window.d2lfetch.fetch.returns(promise);
-				});
+		it('clears all fields and sets focus', function(done) {
+			editor.clear();
+			flush(function() {
+				expect(editor.$.name.value).to.be.empty;
+				expect(editor.$.instructions.value).to.be.empty;
+				expect(editor.$.dueDate.datetime).to.be.empty;
+				expect(editor.$.addToGrades.checked).to.not.be.true;
+				expect(editor.$.maximumGrade.value).to.equal('100');
+				flush(function() {
+					expect(document.activeElement).to.equal(editor.$.name);
+				});
+				done();
+			});
 
-				it('save succeeds', function(done) {
-					var editor = fixture('manual');
-					editor.$.data.resource
-						= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
+		});
 
-					editor.addEventListener('d2l-assignment-save-complete', function(event) {
-						assert(fetch.calledWith(sinon.match.has('method', 'POST')));
-						assert.equal(event.detail.id,
-							"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+		it('clears all fields and skips focus', function(done) {
+			editor.clear(true);
+			flush(function() {
+				expect(editor.$.name.value).to.be.empty;
+				expect(editor.$.instructions.value).to.be.empty;
+				expect(editor.$.dueDate.datetime).to.be.empty;
+				expect(editor.$.addToGrades.checked).to.not.be.true;
+				expect(editor.$.maximumGrade.value).to.equal('100');
+				expect(document.activeElement).to.not.equal(editor.$.name);
+				done();
+			});
+		});
+	});
+
+	describe('when loading existing assignment and can edit', function() {
+		beforeEach(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
+				}
+			});
+			window.d2lfetch.fetch.returns(promise);
+		});
 
-						var request = fetch.args[0][0];
-						request.text().then(function(data) {
-							assert(data.includes("Testing 123"));
-							done();
-						});
-					});
-					editor.name = "Testing 123";
-					editor.save();
-				});
-			});
-
-			describe('assignments checkDirty', function() {
-				var editor;
-				beforeEach(function() {
-					editor = fixture('manual');
-					editor.$.data.resource
-						= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
-
-					editor.name = 'How now brown cow';
-					editor.instructions = 'In a while crocodile';
-					editor.dueDate = '2017-10-10T05:05:05.555';
-					editor.addToGrades = true;
-					editor.maximumGrade = '10';
-					editor.existingAttachments = [ getExistingAttachment() ];
-					editor.attachmentsToSave = [];
-
-					editor.$.data.getInitialValues = function() {
-						return {
-							name: 'How now brown cow',
-							instructions: 'In a while crocodile',
-							dueDate: '2017-10-10T05:05:05.555',
-							outOf: '10',
-							addToGrades: true,
-							existingAttachments: [ getExistingAttachment() ],
-							attachmentsToSave: []
-						}
-					}
-				});
+		it('is loaded if can edit assignments', function(done) {
+			var editor = fixture('fromUrl');
+			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+				if (done.isDone) return;
+				assert.equal(event.detail, true);
 
-				it('returns false when the nothing is changed', function() {
-					expect(editor.checkDirty()).to.be.false;
-				});
+				done.isDone = true;
+				done();
+			});
+		});
 
-				it('returns true when the name is changed', function() {
-					editor.name = 'CHANGEDNAME';
-					expect(editor.checkDirty()).to.be.true;
-				});
+		it('populates existing fields', function(done) {
+			var editor = fixture('fromUrl');
+			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+				if (done.isDone) return;
+				flush(function() {
+					expect(editor.$.name.value).to.equal('Here is your new assignment');
+					expect(editor.$.instructions.value).to.equal('These are the instructions');
+					// Cannot do exact date comparisons until we introduce timezones - as will fail in CircleCI
+					// expect(editor.$.dueDate.value).to.equal('2017-12-31T12:59:00');
+					expect(editor.$.dueDate.datetime).to.not.be.empty;
 
-				it('returns true when the instructions are changed', function() {
-					editor.instructions = 'CHANGEDINSTRUCTIONS';
-					expect(editor.checkDirty()).to.be.true;
+					done.isDone = true;
+					done();
 				});
+			});
+		});
+	});
 
-				it('returns true when the dueDate is changed', function() {
-					editor.dueDate = '2017-10-10T05:05:05.123';
-					expect(editor.checkDirty()).to.be.true;
-				});
+	describe('when loading existing assignment and cannot edit', function() {
+		describe('assignments tool enabled', function() {
+			beforeEach(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-				it('returns true when addToGrades is changed', function() {
-					editor.addToGrades = false;
-					expect(editor.checkDirty()).to.be.true;
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
+					}
 				});
+				window.d2lfetch.fetch.returns(promise);
+			});
 
-				it('returns true when the maximum grade is changed', function() {
-					editor.maximumGrade = '100';
-					expect(editor.checkDirty()).to.be.true;
+			it('is not loaded if cannot edit assignments', function(done) {
+				var editor = fixture('fromUrl');
+				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+					assert.equal(event.detail, false);
+					done();
 				});
+			});
+		});
+	});
 
-				it('returns true when any attachments are in the removed state', function() {
-					editor.attachmentsToSave = [ getAttachment() ];
-					expect(editor.checkDirty()).to.be.true;
-				});
+	describe('assignments edit', function() {
+		beforeEach(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-				it('returns true when there are any new attachments added', function() {
-					var deletedAttachment = getExistingAttachment();
-					deletedAttachment.isDeleted = true;
-					editor.existingAttachments = [ deletedAttachment ];
-					expect(editor.checkDirty()).to.be.true;
-				});
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
+				}
 			});
+			window.d2lfetch.fetch.returns(promise);
+		});
 
-			describe('assignments clear', function() {
-				var editor;
-				beforeEach(function() {
-					editor = fixture('manual');
-					editor.$.data.resource
-						= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
+		it('save succeeds', function(done) {
+			var editor = fixture('manual');
+			editor.$.data.resource
+				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
 
-					editor.name = 'How now brown cow';
-					editor.instructions = 'In a while crocodile';
-					editor.dueDate = '2017-10-10T05:05:05.555';
-					editor.addToGrades = true;
-					editor.maximumGrade = '10';
+			editor.addEventListener('d2l-assignment-save-complete', function(event) {
+				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+				assert.equal(event.detail.id,
+					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
 
-					expect(editor.$.name.value).to.equal('How now brown cow');
-					expect(editor.$.instructions.value).to.equal('In a while crocodile');
-					expect(editor.$.dueDate.datetime).to.equal('2017-10-10T05:05:05.555');
-					expect(editor.$.addToGrades.checked).to.be.true;
-					expect(editor.$.maximumGrade.value).to.equal('10');
+				var request = fetch.args[0][0];
+				request.text().then(function(data) {
+					assert(data.includes("Testing 123"));
+					assert(data.includes("mission"));
+					done();
 				});
+			});
+			editor.name = "Testing 123";
+			editor.instructions = "This is your mission should you choose to accept it";
+			editor.save();
+		});
 
-				it('clears all fields and sets focus', function(done) {
-					editor.clear();
-					flush(function() {
-						expect(editor.$.name.value).to.be.empty;
-						expect(editor.$.instructions.value).to.be.empty;
-						expect(editor.$.dueDate.datetime).to.be.empty;
-						expect(editor.$.addToGrades.checked).to.not.be.true;
-						expect(editor.$.maximumGrade.value).to.equal('100');
-						flush(function() {
-							expect(document.activeElement).to.equal(editor.$.name);
-						});
-						done();
-					});
+		it('skips instructions if not updated', function(done) {
+			var editor = fixture('manual');
+			editor.$.data.resource
+				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
 
-				});
+			editor.addEventListener('d2l-assignment-save-complete', function(event) {
+				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+				assert.equal(event.detail.id,
+					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
 
-				it('clears all fields and skips focus', function(done) {
-					editor.clear(true);
-					flush(function() {
-						expect(editor.$.name.value).to.be.empty;
-						expect(editor.$.instructions.value).to.be.empty;
-						expect(editor.$.dueDate.datetime).to.be.empty;
-						expect(editor.$.addToGrades.checked).to.not.be.true;
-						expect(editor.$.maximumGrade.value).to.equal('100');
-						expect(document.activeElement).to.not.equal(editor.$.name);
-						done();
-					});
+				var request = fetch.args[0][0];
+				request.text().then(function(data) {
+					expect(data.includes("instructions")).to.be.false;
+					done();
 				});
 			});
+			editor.name = "Testing 123";
+			editor.instructions = "These are the instructions";
+			editor.save();
+		});
 
-			describe('when loading existing assignment and can edit', function() {
-				beforeEach(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-						}
-					});
-					window.d2lfetch.fetch.returns(promise);
-				});
+		it('skips dueDate if not provided or updated', function(done) {
+			var editor = fixture('manual');
+			editor.$.data.resource
+				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructorNoDueDate))
 
-				it('is loaded if can edit assignments', function(done) {
-					var editor = fixture('fromUrl');
-					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-						if (done.isDone) return;
-						assert.equal(event.detail, true);
+			editor.addEventListener('d2l-assignment-save-complete', function(event) {
+				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+				assert.equal(event.detail.id,
+					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
 
-						done.isDone = true;
-						done();
-					});
-				});
-
-				it('populates existing fields', function(done) {
-					var editor = fixture('fromUrl');
-					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-						if (done.isDone) return;
-						flush(function() {
-							expect(editor.$.name.value).to.equal('Here is your new assignment');
-							expect(editor.$.instructions.value).to.equal('These are the instructions');
-							// Cannot do exact date comparisons until we introduce timezones - as will fail in CircleCI
-							// expect(editor.$.dueDate.value).to.equal('2017-12-31T12:59:00');
-							expect(editor.$.dueDate.datetime).to.not.be.empty;
-
-							done.isDone = true;
-							done();
-						});
-					});
+				var request = fetch.args[0][0];
+				request.text().then(function(data) {
+					expect(data.includes("dueDate")).to.be.false;
+					done();
 				});
 			});
+			editor.name = "Testing 123";
+			editor.instructions = "These are the instructions";
+			editor.save();
+		});
 
-			describe('when loading existing assignment and cannot edit', function() {
-				describe('assignments tool enabled', function() {
-					beforeEach(function() {
-						fetch = sinon.stub(window.d2lfetch, 'fetch');
+		it('includes dueDate if reset', function(done) {
+			var editor = fixture('manual');
+			editor.$.data.resource
+				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
 
-						var promise = Promise.resolve({
-							ok: true,
-							json: function() {
-								return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
-							}
-						});
-						window.d2lfetch.fetch.returns(promise);
-					});
+			editor.addEventListener('d2l-assignment-save-complete', function(event) {
+				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+				assert.equal(event.detail.id,
+					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
 
-					it('is not loaded if cannot edit assignments', function(done) {
-						var editor = fixture('fromUrl');
-						editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-							assert.equal(event.detail, false);
-							done();
-						});
-					});
+				var request = fetch.args[0][0];
+				request.text().then(function(data) {
+					expect(data.includes("dueDate")).to.be.true;
+					done();
 				});
 			});
+			editor.name = "Testing 123";
+			editor.instructions = "These are the instructions";
+			editor.dueDate = "";
+			editor.save();
+		});
+	});
 
-			describe('assignments edit', function() {
-				beforeEach(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
+	describe('add to grades checkbox', function() {
+		var editor;
+		var hiddenMaxGradeInput = 'div.maximum-grade-wrapper[hidden]';
 
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-						}
-					});
-					window.d2lfetch.fetch.returns(promise);
-				});
+		beforeEach(function() {
+			editor = fixture('manual');
+			expect(editor.$.addToGrades).to.not.be.null;
+		});
 
-				it('save succeeds', function(done) {
-					var editor = fixture('manual');
-					editor.$.data.resource
-						= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
+		it('when addToGrades is true, checkbox should be checked and max grade field visible', function() {
+			editor.addToGrades = true;
+			expect(editor.$.addToGrades.checked).to.be.true;
+			expect(editor.$$(hiddenMaxGradeInput)).to.be.null;
+		});
 
-					editor.addEventListener('d2l-assignment-save-complete', function(event) {
-						assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-						assert.equal(event.detail.id,
-							"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+		it('when addToGrades is false, checkbox should not be checked and max grade field hidden', function() {
+			editor.addToGrades = false;
+			expect(editor.$.addToGrades.checked).to.be.false;
+			expect(editor.$$(hiddenMaxGradeInput)).to.not.be.null;
+		});
+	});
 
-						var request = fetch.args[0][0];
-						request.text().then(function(data) {
-							assert(data.includes("Testing 123"));
-							assert(data.includes("mission"));
-							done();
-						});
-					});
-					editor.name = "Testing 123";
-					editor.instructions = "This is your mission should you choose to accept it";
-					editor.save();
-				});
-
-				it('skips instructions if not updated', function(done) {
-					var editor = fixture('manual');
-					editor.$.data.resource
-						= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
-
-					editor.addEventListener('d2l-assignment-save-complete', function(event) {
-						assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-						assert.equal(event.detail.id,
-							"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
-
-						var request = fetch.args[0][0];
-						request.text().then(function(data) {
-							expect(data.includes("instructions")).to.be.false;
-							done();
-						});
-					});
-					editor.name = "Testing 123";
-					editor.instructions = "These are the instructions";
-					editor.save();
-				});
-
-				it('skips dueDate if not provided or updated', function(done) {
-					var editor = fixture('manual');
-					editor.$.data.resource
-						= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructorNoDueDate))
-
-					editor.addEventListener('d2l-assignment-save-complete', function(event) {
-						assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-						assert.equal(event.detail.id,
-							"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
-
-						var request = fetch.args[0][0];
-						request.text().then(function(data) {
-							expect(data.includes("dueDate")).to.be.false;
-							done();
-						});
-					});
-					editor.name = "Testing 123";
-					editor.instructions = "These are the instructions";
-					editor.save();
-				});
-
-				it('includes dueDate if reset', function(done) {
-					var editor = fixture('manual');
-					editor.$.data.resource
-						= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
-
-					editor.addEventListener('d2l-assignment-save-complete', function(event) {
-						assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-						assert.equal(event.detail.id,
-							"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
-
-						var request = fetch.args[0][0];
-						request.text().then(function(data) {
-							expect(data.includes("dueDate")).to.be.true;
-							done();
-						});
-					});
-					editor.name = "Testing 123";
-					editor.instructions = "These are the instructions";
-					editor.dueDate = "";
-					editor.save();
-				});
+	describe('addding file attachments', function() {
+		var editor;
+
+		beforeEach(function() {
+			editor = fixture('manual');
+			editor.$.data._newFileToAttachment = sinon.stub().returns(getAttachment());
+		});
+
+		describe('when making a new assignment', function() {
+			beforeEach(function() {
+				editor.isNewAssignment = true;
+			});
+			it('adds a file', function() {
+				editor.addFiles([ new File([], 'f1') ]);
+				expect(editor.attachmentsToSave.length).to.equal(1);
+			});
+			it('adds multiple files', function() {
+				editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
+				expect(editor.attachmentsToSave.length).to.equal(2);
 			});
+		});
 
-			describe('add to grades checkbox', function() {
-				var editor;
-				var hiddenMaxGradeInput = 'div.maximum-grade-wrapper[hidden]';
+		describe('when editing an assignment', function() {
+			beforeEach(function() {
+				editor.isNewAssignment = false;
+			});
+			it('adds a file', function() {
+				editor.addFiles([ new File([], 'f1') ]);
+				expect(editor.attachmentsToSave.length).to.equal(1);
+			});
+			it('adds multiple files', function() {
+				editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
+				expect(editor.attachmentsToSave.length).to.equal(2);
+			});
+		});
+	});
+	describe('removing an attachment', function() {
+		var editor;
 
-				beforeEach(function() {
-					editor = fixture('manual');
-					expect(editor.$.addToGrades).to.not.be.null;
-				});
+		beforeEach(function() {
+			editor = fixture('manual');
+		});
 
-				it('when addToGrades is true, checkbox should be checked and max grade field visible', function() {
-					editor.addToGrades = true;
-					expect(editor.$.addToGrades.checked).to.be.true;
-					expect(editor.$$(hiddenMaxGradeInput)).to.be.null;
-				});
+		describe('when making a new assignment', function() {
+			beforeEach(function() {
+				editor.isNewAssignment = true;
+			});
 
-				it('when addToGrades is false, checkbox should not be checked and max grade field hidden', function() {
-					editor.addToGrades = false;
-					expect(editor.$.addToGrades.checked).to.be.false;
-					expect(editor.$$(hiddenMaxGradeInput)).to.not.be.null;
+			it('removes the attachment from the view', function() {
+				editor.attachmentsToSave = [ getAttachment() ];
+				var elementModel = {
+					item: editor.attachmentsToSave[0],
+					set: sinon.stub()
+				};
+				editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+
+				expect(editor.attachmentsToSave.length).to.equal(1);
+				editor._onAttachmentRemoved({
+					target: editor.$$('d2l-attachment')
 				});
+				expect(editor.attachmentsToSave.length).to.equal(0);
 			});
+		});
 
-			describe('addding file attachments', function() {
-				var editor;
+		describe('when editing an assignment', function() {
+			beforeEach(function() {
+				editor.isNewAssignment = false;
+			});
+			it('sets a new attachment to "undo" state', function(done) {
+				editor.attachmentsToSave = [ getAttachment() ];
+				var elementModel = {
+					item: editor.attachmentsToSave[0],
+					set: sinon.stub()
+				};
+				editor.$.attachments.modelForElement = sinon.stub().returns( elementModel );
+				editor._onAttachmentRemoved({
+					target: editor.$$('d2l-attachment')
+				});
+
+				expect(editor.existingAttachments.length).to.equal(0);
+				expect(editor.attachmentsToSave.length).to.equal(1);
+				expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
+				done();
+			});
+			it('sets an existing attachment to "undo" state', function() {
+				editor.existingAttachments = [ getExistingAttachment() ];
+				var elementModel = {
+					item: editor.existingAttachments[0],
+					set: sinon.stub()
+				};
+				editor.$.attachments.modelForElement = sinon.stub().returns( elementModel );
+				editor._onAttachmentRemoved({
+					target: editor.$$('d2l-attachment')
+				});
+				expect(editor.attachmentsToSave.length).to.equal(0);
+				expect(editor.existingAttachments.length).to.equal(1);
+				expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
+			});
+		});
+	});
+
+	describe('saving an assignment', function() {
+		var editor,
+			attachments,
+			data,
+			savePromise = 'savePromise',
+			deletePromise = 'deletePromise';
+
+		beforeEach(function() {
+			editor = fixture('manual');
+			data = editor.$.data;
+			attachments = {
+				hasActionByName: sinon.stub().returns(true),
+				getActionByName: sinon.stub().returns('action')
+			};
+			data._saveFile = sinon.stub().returns(savePromise);
+			data._removeFile = sinon.stub().returns(deletePromise);
+		});
 
-				beforeEach(function() {
-					editor = fixture('manual');
-					editor.$.data._newFileToAttachment = sinon.stub().returns(getAttachment());
-				});
+		it('adds all the new files', function() {
+			var attachment = getAttachment();
+			attachmentsToSave = [ attachment ];
+			existingAttachments = [];
+			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
+			expect(promiseArray.length).to.equal(1);
+			expect(promiseArray[0]).to.equal(savePromise);
+		});
+		it('does not add or delete any files that are new and marked as removed', function() {
+			var attachment = getAttachment();
+			attachment.isDeleted = true;
+			attachmentsToSave = [ attachment ];
+			existingAttachments = [];
+			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
+			expect(promiseArray.length).to.equal(0);
+		});
+		it('deletes all the removed files', function() {
+			var attachment = getExistingAttachment();
+			attachment.isDeleted = true;
+			attachmentsToSave = [];
+			existingAttachments = [ attachment ];
+			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
+			expect(promiseArray.length).to.equal(1);
+			expect(promiseArray[0]).to.equal(deletePromise);
+		});
+	});
 
-				describe('when making a new assignment', function() {
-					beforeEach(function() {
-						editor.isNewAssignment = true;
-					});
-					it('adds a file', function() {
-						editor.addFiles([ new File([], 'f1') ]);
-						expect(editor.attachmentsToSave.length).to.equal(1);
-					});
-					it('adds multiple files', function() {
-						editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
-						expect(editor.attachmentsToSave.length).to.equal(2);
-					});
-				});
+	describe('generating attachment objects', function() {
+		var editor;
 
-				describe('when editing an assignment', function() {
-					beforeEach(function() {
-						editor.isNewAssignment = false;
-					});
-					it('adds a file', function() {
-						editor.addFiles([ new File([], 'f1') ]);
-						expect(editor.attachmentsToSave.length).to.equal(1);
-					});
-					it('adds multiple files', function() {
-						editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
-						expect(editor.attachmentsToSave.length).to.equal(2);
-					});
-				});
+		beforeEach(function() {
+			editor = fixture('manual');
+		});
+
+		it('generates the correct attachment object from a new "File" object', function() {
+			var objectUrl = 'objectUrl';
+			var fileName = 'fileName';
+			URL.createObjectURL = sinon.stub().returns(objectUrl);
+			var newFile = new File([], fileName);
+			var createdAttachment = editor.$.data._newFileToAttachment(newFile);
+
+			expect(createdAttachment).to.deep.include({
+				type: 'Document',
+				name: fileName,
+				id: objectUrl,
+				url: objectUrl,
+				file: newFile,
+				isDeleted: false
 			});
-			describe('removing an attachment', function() {
-				var editor;
+		});
 
-				beforeEach(function() {
-					editor = fixture('manual');
-				});
+		it('generates the correct attachment object from file attachment returned from HM', function() {
+			var fileHref = 'fileHref';
+			var deleteAction = 'deleteAction';
+			var fileName = 'fileName';
+			var fileType = 'fileType';
+
+			var file = {
+				getLinkByRel: sinon.stub().returns({ href: fileHref }),
+				getActionByName: sinon.stub().returns(deleteAction),
+				properties: {
+					name: fileName
+				}
+			};
 
-				describe('when making a new assignment', function() {
-					beforeEach(function() {
-						editor.isNewAssignment = true;
-					});
+			var createdAttachment = editor.$.data._existingFileToAttachment(file);
+			expect(createdAttachment).to.deep.include({
+				type: 'Document',
+				name: fileName,
+				id: fileHref,
+				url: fileHref,
+				deleteAction: deleteAction,
+				isDeleted: false
+			});
+		});
 
-					it('removes the attachment from the view', function() {
-						editor.attachmentsToSave = [ getAttachment() ];
-						var elementModel = {
-							item: editor.attachmentsToSave[0],
-							set: sinon.stub()
-						};
-						editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
-
-						expect(editor.attachmentsToSave.length).to.equal(1);
-						editor._onAttachmentRemoved({
-							target: editor.$$('d2l-attachment')
-						});
-						expect(editor.attachmentsToSave.length).to.equal(0);
-					});
-				});
+		it('generates the correct attachment object from link attachment returned from HM', function() {
+			var linkHref = 'linkHref';
+			var deleteAction = 'deleteAction';
+			var linkName = 'linkName';
+			var linkType = 'linkType';
 
-				describe('when editing an assignment', function() {
-					beforeEach(function() {
-						editor.isNewAssignment = false;
-					});
-					it('sets a new attachment to "undo" state', function(done) {
-						editor.attachmentsToSave = [ getAttachment() ];
-						var elementModel = {
-							item: editor.attachmentsToSave[0],
-							set: sinon.stub()
-						};
-						editor.$.attachments.modelForElement = sinon.stub().returns( elementModel );
-						editor._onAttachmentRemoved({
-							target: editor.$$('d2l-attachment')
-						});
-
-						expect(editor.existingAttachments.length).to.equal(0);
-						expect(editor.attachmentsToSave.length).to.equal(1);
-						expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
-						done();
-					});
-					it('sets an existing attachment to "undo" state', function() {
-						editor.existingAttachments = [ getExistingAttachment() ];
-						var elementModel = {
-							item: editor.existingAttachments[0],
-							set: sinon.stub()
-						};
-						editor.$.attachments.modelForElement = sinon.stub().returns( elementModel );
-						editor._onAttachmentRemoved({
-							target: editor.$$('d2l-attachment')
-						});
-						expect(editor.attachmentsToSave.length).to.equal(0);
-						expect(editor.existingAttachments.length).to.equal(1);
-						expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
-					});
-				});
+
+			var link = {
+				getActionByName: sinon.stub().returns(deleteAction),
+				properties: {
+					name: linkName,
+					href: linkHref
+				}
+			};
+
+			var createdAttachment = editor.$.data.linkToAttachment(link);
+			expect(createdAttachment).to.deep.include({
+				name: linkName,
+				id: linkHref,
+				url: linkHref,
+				deleteAction: deleteAction,
+				isDeleted: false
 			});
+			expect(createdAttachment.type).to.be.undefined;
+		});
+	});
 
-			describe('saving an assignment', function() {
-				var editor,
-					attachments,
-					data,
-					savePromise = 'savePromise',
-					deletePromise = 'deletePromise';
-
-				beforeEach(function() {
-					editor = fixture('manual');
-					data = editor.$.data;
-					attachments = {
-						hasActionByName: sinon.stub().returns(true),
-						getActionByName: sinon.stub().returns('action')
-					};
-					data._saveFile = sinon.stub().returns(savePromise);
-					data._removeFile = sinon.stub().returns(deletePromise);
-				});
-
-				it('adds all the new files', function() {
-					var attachment = getAttachment();
-					attachmentsToSave = [ attachment ];
-					existingAttachments = [];
-					var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-					expect(promiseArray.length).to.equal(1);
-					expect(promiseArray[0]).to.equal(savePromise);
-				});
-				it('does not add or delete any files that are new and marked as removed', function() {
-					var attachment = getAttachment();
-					attachment.isDeleted = true;
-					attachmentsToSave = [ attachment ];
-					existingAttachments = [];
-					var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-					expect(promiseArray.length).to.equal(0);
-				});
-				it('deletes all the removed files', function() {
-					var attachment = getExistingAttachment();
-					attachment.isDeleted = true;
-					attachmentsToSave = [];
-					existingAttachments = [ attachment ];
-					var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-					expect(promiseArray.length).to.equal(1);
-					expect(promiseArray[0]).to.equal(deletePromise);
-            	});
-			});
-
-			describe('generating attachment objects', function() {
-				var editor;
-
-				beforeEach(function() {
-					editor = fixture('manual');
-				});
-
-				it('generates the correct attachment object from a new "File" object', function() {
-					var objectUrl = 'objectUrl';
-					var fileName = 'fileName';
-					URL.createObjectURL = sinon.stub().returns(objectUrl);
-					var newFile = new File([], fileName);
-					var createdAttachment = editor.$.data._newFileToAttachment(newFile);
-
-					expect(createdAttachment).to.deep.include({
-						type: 'Document',
-						name: fileName,
-						id: objectUrl,
-						url: objectUrl,
-						file: newFile,
-						isDeleted: false
-					});
-				});
+	describe('Submission options dropdowns', function() {
+		describe('When no submission options are passed', function() {
+			it('Should not show the submission type options dropdown', function(done) {
 
-				it('generates the correct attachment object from file attachment returned from HM', function() {
-					var fileHref = 'fileHref';
-					var deleteAction = 'deleteAction';
-					var fileName = 'fileName';
-					var fileType = 'fileType';
-
-					var file = {
-						getLinkByRel: sinon.stub().returns({ href: fileHref }),
-						getActionByName: sinon.stub().returns(deleteAction),
-						properties: {
-							name: fileName
-						}
-					};
-
-					var createdAttachment = editor.$.data._existingFileToAttachment(file);
-					expect(createdAttachment).to.deep.include({
-						type: 'Document',
-						name: fileName,
-						id: fileHref,
-						url: fileHref,
-						deleteAction: deleteAction,
-						isDeleted: false
-					});
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreateNoSubmissionOptions));
+					}
 				});
+				window.d2lfetch.fetch.returns(promise);
+				
+				editor = fixture('fromUrl');
+				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+					expect(editor.$.assignmentSubmissionOptions.hidden).to.be.true;
+					done();
+				});						
+			});
+		});
 
-				it('generates the correct attachment object from link attachment returned from HM', function() {
-					var linkHref = 'linkHref';
-					var deleteAction = 'deleteAction';
-					var linkName = 'linkName';
-					var linkType = 'linkType';
-
-
-					var link = {
-						getActionByName: sinon.stub().returns(deleteAction),
-						properties: {
-							name: linkName,
-							href: linkHref
-						}
-					};
-
-					var createdAttachment = editor.$.data.linkToAttachment(link);
-					expect(createdAttachment).to.deep.include({
-						name: linkName,
-						id: linkHref,
-						url: linkHref,
-						deleteAction: deleteAction,
-						isDeleted: false
-					});
-					expect(createdAttachment.type).to.be.undefined;
-				});
-			});
-
-			describe('Submission options dropdowns', function() {
-				describe('When no submission options are passed', function() {
-					it('Should not show the submission type options dropdown', function(done) {
-
-						fetch = sinon.stub(window.d2lfetch, 'fetch');
-						var promise = Promise.resolve({
-							ok: true,
-							json: function() {
-								return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreateNoSubmissionOptions));
-							}
-						});
-						window.d2lfetch.fetch.returns(promise);
-						
-						editor = fixture('fromUrl');
-						editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-							expect(editor.$.assignmentSubmissionOptions.hidden).to.be.true;
-							done();
-						});						
-					});
+		describe('When valid submission options are passed', function() {
+			var editor;
+			var submissionOptions = getSubmissionOptions();
+
+			beforeEach(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
+					}
 				});
+				window.d2lfetch.fetch.returns(promise);
+				editor = fixture('fromUrl');
+			});
 
-				describe('When valid submission options are passed', function() {
-					var editor;
-					var submissionOptions = getSubmissionOptions();
-
-					beforeEach(function() {
-						fetch = sinon.stub(window.d2lfetch, 'fetch');
-						var promise = Promise.resolve({
-							ok: true,
-							json: function() {
-								return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
-							}
-						});
-						window.d2lfetch.fetch.returns(promise);
-						editor = fixture('fromUrl');
-					});
 
+			it('Should show the submission type options dropdown', function(done) {
+				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {							
+					expect(editor.$.assignmentSubmissionOptions.hidden).to.be.false;
+					done();
+				});
+			});
 
-					it('Should show the submission type options dropdown', function(done) {
-						editor.addEventListener('d2l-assignment-editor-loaded', function(event) {							
-							expect(editor.$.assignmentSubmissionOptions.hidden).to.be.false;
-							done();
-						});
-					});
+			it('Should hide the completion options when none are associated with the currently selected submission option', function(done) {
+				var submissionTypeWithNoCompletion = submissionOptions.availableSubmssionOptions.value.find(function(option){
+					return option.completionTypes == null;
+				});
 
-					it('Should hide the completion options when none are associated with the currently selected submission option', function(done) {
-						var submissionTypeWithNoCompletion = submissionOptions.availableSubmssionOptions.value.find(function(option){
-							return option.completionTypes == null;
-						});
-
-						editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-							editor.submissionType = submissionTypeWithNoCompletion.value;
-							flush(function(){
-								expect(editor.$$('#completionType').hidden).to.be.true;
-								done();
-							});					
-						});
-					});
+				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+					editor.submissionType = submissionTypeWithNoCompletion.value;
+					flush(function(){
+						expect(editor.$$('#completionType').hidden).to.be.true;
+						done();
+					});					
+				});
+			});
 
-					it('Should shows the correct completion options that are associated with the currently selected submission option', function(done) {
-						var submissionTypeWithCompletionTypes = submissionOptions.availableSubmssionOptions.value.find(function(option){
-							return option.completionTypes != null;
-						});
-
-						editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-							editor.submissionType = submissionTypeWithCompletionTypes.value;
-							flush(function(){
-								expect(editor.$$('#completionType').hidden).to.be.false;
-								expect(editor.$$('#completionOptionsSelect').length).to.equal(submissionTypeWithCompletionTypes.completionTypes.length);								
-								done();
-							});
-						});
+			it('Should shows the correct completion options that are associated with the currently selected submission option', function(done) {
+				var submissionTypeWithCompletionTypes = submissionOptions.availableSubmssionOptions.value.find(function(option){
+					return option.completionTypes != null;
+				});
+
+				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+					editor.submissionType = submissionTypeWithCompletionTypes.value;
+					flush(function(){
+						expect(editor.$$('#completionType').hidden).to.be.false;
+						expect(editor.$$('#completionOptionsSelect').length).to.equal(submissionTypeWithCompletionTypes.completionTypes.length);								
+						done();
 					});
 				});
 			});
 		});
-	</script>
+	});
+});
+</script>
 	</body>
 </html>
diff --git a/test/d2l-assignment-viewer_test.html b/test/d2l-assignment-viewer_test.html
index 7a34f86..2a13cf0 100644
--- a/test/d2l-assignment-viewer_test.html
+++ b/test/d2l-assignment-viewer_test.html
@@ -6,12 +6,12 @@
 
 	<title>d2l-assignment-viewer test</title>
 
-	<script src="../../webcomponentsjs/webcomponents-lite.js"></script>
-	<script src="../../web-component-tester/browser.js"></script>
+	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+	<script src="../../wct-browser-legacy/browser.js"></script>
 
-	<link rel="import" href="../d2l-assignment-viewer.html">
+	<script type="module" src="../d2l-assignment-viewer.js"></script>
 
-	<script src="fixtures/assignment.js"></script>
+	<script src="./fixtures/assignment.js"></script>
 
 	</head>
 	<body>
@@ -25,488 +25,489 @@
 			<d2l-assignment-viewer url="/assignmentStudent"></d2l-assignment-viewer>
 		</template>
 	</test-fixture>
-	<script>
-		describe('d2l-assignment-viewer', function() {
-			var viewer;
-			var fetch;
-
-			afterEach(() => {
-				fetch && fetch.restore();
+	<script type="module">
+import '../d2l-assignment-viewer.js';
+describe('d2l-assignment-viewer', function() {
+	var viewer;
+	var fetch;
+
+	afterEach(() => {
+		fetch && fetch.restore();
+	});
+
+	describe('loading attachments', function() {
+		it('loads file attachments', function() {
+			var viewer = fixture('basicInstructor');
+			var name1 = 'name1';
+			var name2 = 'name2';
+			var fileHref1 = 'fileHref1';
+			var fileHref2 = 'fileHref2';
+
+			var stub = sinon.stub();
+			stub.withArgs('file').returns([
+					{
+						properties: { name: name1 },
+						getLinksByRel: sinon.stub().returns([{ href: fileHref1 }])
+					},
+					{
+						properties: { name: name2 },
+						getLinksByRel: sinon.stub().returns([{ href: fileHref2 }])
+					}
+			])
+			stub.withArgs('link').returns([
+				{
+					properties: {name: name1,
+								 href: fileHref1 },
+					getActionByName: sinon.stub().returns('delete')
+				}
+			]);
+			var fileAttachments = {getSubEntitiesByClass: stub};
+
+
+			var files = viewer.$.data._populateFileAttachments(fileAttachments);
+			expect(files.length).to.equal(3);
+			expect(files[0]).to.deep.include({
+				type: 'Document',
+				id: fileHref1,
+				name: name1,
+				url: fileHref1
 			});
-
-			describe('loading attachments', function() {
-				it('loads file attachments', function() {
-					var viewer = fixture('basicInstructor');
-					var name1 = 'name1';
-					var name2 = 'name2';
-					var fileHref1 = 'fileHref1';
-					var fileHref2 = 'fileHref2';
-
-					var stub = sinon.stub();
-					stub.withArgs('file').returns([
-							{
-								properties: { name: name1 },
-								getLinksByRel: sinon.stub().returns([{ href: fileHref1 }])
-							},
-							{
-								properties: { name: name2 },
-								getLinksByRel: sinon.stub().returns([{ href: fileHref2 }])
-							}
-					])
-					stub.withArgs('link').returns([
-						{
-							properties: {name: name1,
-										 href: fileHref1 },
-							getActionByName: sinon.stub().returns('delete')
-						}
-					]);
-					var fileAttachments = {getSubEntitiesByClass: stub};
-
-
-					var files = viewer.$.data._populateFileAttachments(fileAttachments);
-					expect(files.length).to.equal(3);
-					expect(files[0]).to.deep.include({
-						type: 'Document',
-						id: fileHref1,
-						name: name1,
-						url: fileHref1
-					});
-					expect(files[1]).to.deep.include({
-						type: 'Document',
-						id: fileHref2,
-						name: name2,
-						url: fileHref2
-					});
-					expect(files[2]).to.deep.include({
-						id: fileHref1,
-						name: name1,
-						url: fileHref1
-					});
-					expect(files[2].type).to.be.undefined;
+			expect(files[1]).to.deep.include({
+				type: 'Document',
+				id: fileHref2,
+				name: name2,
+				url: fileHref2
+			});
+			expect(files[2]).to.deep.include({
+				id: fileHref1,
+				name: name1,
+				url: fileHref1
+			});
+			expect(files[2].type).to.be.undefined;
+		})
+	});
+
+	describe('when loading viewer as instructor', function() {
+		it('loads a non observational assignment', function(done) {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
+				}
+			});
+			fetch.returns(promise);
+
+			var viewer = fixture('basicInstructor');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.true;
+				expect(event.detail.canDeleteAssignment).to.be.true;
+				expect(viewer.name).to.equal('Here is your new assignment')
+				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
+				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
+				expect(viewer.totalUsers).to.equal(280);
+				expect(viewer.totalUsersWithSubmissions).to.equal(50);
+				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+				expect(viewer.canViewAllSubmissions).to.be.true;
+				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+				flush(function() {
+					expect(viewer.$$('#due-date').hidden).to.be.false;
+					expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
+					expect(viewer.instructorSubmissionLabel).to.equal('view_submissions');
+					expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalSubmissions');
+					done.isDone = true;
+					done();
 				})
 			});
+		});
 
-			describe('when loading viewer as instructor', function() {
-				it('loads a non observational assignment', function(done) {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-						}
-					});
-					fetch.returns(promise);
-
-					var viewer = fixture('basicInstructor');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.true;
-						expect(event.detail.canDeleteAssignment).to.be.true;
-						expect(viewer.name).to.equal('Here is your new assignment')
-						expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-						expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-						expect(viewer.totalUsers).to.equal(280);
-						expect(viewer.totalUsersWithSubmissions).to.equal(50);
-						expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-						expect(viewer.canViewAllSubmissions).to.be.true;
-						expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-						flush(function() {
-							expect(viewer.$$('#due-date').hidden).to.be.false;
-							expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
-							expect(viewer.instructorSubmissionLabel).to.equal('view_submissions');
-							expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalSubmissions');
-							done.isDone = true;
-							done();
-						})
-					});
-				});
-
-				it('loads an observational assignment', function(done) {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.observationalAssignmentForInstructor));
-						}
-					});
-					fetch.returns(promise);
-
-					var viewer = fixture('basicInstructor');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.true;
-						expect(event.detail.canDeleteAssignment).to.be.true;
-						expect(viewer.name).to.equal('Here is your new assignment')
-						expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-						expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-						expect(viewer.totalUsers).to.equal(280);
-						expect(viewer.totalUsersWithSubmissions).to.equal(50);
-						expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-						expect(viewer.canViewAllSubmissions).to.be.true;
-						expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-						flush(function() {
-							expect(viewer.$$('#due-date').hidden).to.be.false;
-							expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
-							expect(viewer.instructorSubmissionLabel).to.equal('view_completions');
-							expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalCompletions');
-							done.isDone = true;
-							done();
-						})
-					});
-				});				
-			});			
-
-			describe('when loading viewer as student', function() {
-				before(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
-						}
-					});
-					fetch.returns(promise);
-				});
-
-				it('loads an assignment', function(done) {
-					var viewer = fixture('basicStudent');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.false;
-						expect(event.detail.canDeleteAssignment).to.be.false;
-						expect(viewer.name).to.equal('Here is your new assignment')
-						expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-						expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-						expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-						expect(viewer.canViewAllSubmissions).to.be.false;
-						expect(viewer.graded).to.be.false;
-						expect(viewer.submitted).to.be.false;
-						expect(viewer.submissionType).to.equal(0);
-						expect(viewer.completionDate).to.be.null;
-						expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-
-						flush(function() {
-							expect(viewer.$$('#due-date').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
-							expect(viewer.submissionLabel).to.equal('submit');
-							done.isDone = true;
-							done();
-						})
-					});
-				});
+		it('loads an observational assignment', function(done) {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.observationalAssignmentForInstructor));
+				}
+			});
+			fetch.returns(promise);
+
+			var viewer = fixture('basicInstructor');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.true;
+				expect(event.detail.canDeleteAssignment).to.be.true;
+				expect(viewer.name).to.equal('Here is your new assignment')
+				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
+				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
+				expect(viewer.totalUsers).to.equal(280);
+				expect(viewer.totalUsersWithSubmissions).to.equal(50);
+				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+				expect(viewer.canViewAllSubmissions).to.be.true;
+				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+				flush(function() {
+					expect(viewer.$$('#due-date').hidden).to.be.false;
+					expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
+					expect(viewer.instructorSubmissionLabel).to.equal('view_completions');
+					expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalCompletions');
+					done.isDone = true;
+					done();
+				})
 			});
+		});				
+	});			
+
+	describe('when loading viewer as student', function() {
+		before(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
+				}
+			});
+			fetch.returns(promise);
+		});
 
-			describe('when loading viewer as user that cannot access link', function() {
-				before(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForUser));
-						}
-					});
-					var promise2 = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.activityForUser));
-						}
-					});
-					fetch.onCall(0).returns(promise);
-					fetch.onCall(1).returns(promise2);
-				});
+		it('loads an assignment', function(done) {
+			var viewer = fixture('basicStudent');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.false;
+				expect(event.detail.canDeleteAssignment).to.be.false;
+				expect(viewer.name).to.equal('Here is your new assignment')
+				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
+				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
+				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+				expect(viewer.canViewAllSubmissions).to.be.false;
+				expect(viewer.graded).to.be.false;
+				expect(viewer.submitted).to.be.false;
+				expect(viewer.submissionType).to.equal(0);
+				expect(viewer.completionDate).to.be.null;
+				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+
+				flush(function() {
+					expect(viewer.$$('#due-date').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
+					expect(viewer.submissionLabel).to.equal('submit');
+					done.isDone = true;
+					done();
+				})
+			});
+		});
+	});
+
+	describe('when loading viewer as user that cannot access link', function() {
+		before(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForUser));
+				}
+			});
+			var promise2 = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.activityForUser));
+				}
+			});
+			fetch.onCall(0).returns(promise);
+			fetch.onCall(1).returns(promise2);
+		});
 
-				it('loads an assignment', function(done) {
-					var viewer = fixture('basicStudent');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.false;
-						expect(event.detail.canDeleteAssignment).to.be.false;
-						expect(viewer.name).to.equal('Here is your new assignment')
-						expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-						expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-						expect(viewer.link).to.equal(null);
-						expect(viewer.myActivityUsageLink).to.equal('http://activities.api.dev.brightspace.com/activities/6606_2000_5/usages/123060/users/30223')
-						expect(viewer.canViewAllSubmissions).to.be.false;
-						expect(viewer.graded).to.be.false;
-						expect(viewer.submitted).to.be.false;
-						expect(viewer.submissionType).to.equal(0);
-						expect(viewer.completionDate).to.be.null;
-						expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-
-						flush(function() {
-							expect(viewer.$$('#due-date').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission')).to.not.exist;
-							expect(viewer.submissionLabel).to.equal('submit');
-							expect(viewer.$$('span.name-text').hidden).to.be.false;
-							done.isDone = true;
-							done();
-						})
-					});
-				});
+		it('loads an assignment', function(done) {
+			var viewer = fixture('basicStudent');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.false;
+				expect(event.detail.canDeleteAssignment).to.be.false;
+				expect(viewer.name).to.equal('Here is your new assignment')
+				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
+				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
+				expect(viewer.link).to.equal(null);
+				expect(viewer.myActivityUsageLink).to.equal('http://activities.api.dev.brightspace.com/activities/6606_2000_5/usages/123060/users/30223')
+				expect(viewer.canViewAllSubmissions).to.be.false;
+				expect(viewer.graded).to.be.false;
+				expect(viewer.submitted).to.be.false;
+				expect(viewer.submissionType).to.equal(0);
+				expect(viewer.completionDate).to.be.null;
+				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+
+				flush(function() {
+					expect(viewer.$$('#due-date').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission')).to.not.exist;
+					expect(viewer.submissionLabel).to.equal('submit');
+					expect(viewer.$$('span.name-text').hidden).to.be.false;
+					done.isDone = true;
+					done();
+				})
+			});
+		});
+	});
+
+	describe('when loading viewer as student with graded assignment', function() {
+		before(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.gradedAssignmentForStudent));
+				}
 			});
+			fetch.returns(promise);
+		});
 
-			describe('when loading viewer as student with graded assignment', function() {
-				before(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.gradedAssignmentForStudent));
-						}
-					});
-					fetch.returns(promise);
-				});
+		it('loads an assignment', function(done) {
+			var viewer = fixture('basicStudent');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.false;
+				expect(event.detail.canDeleteAssignment).to.be.false;
+				expect(viewer.name).to.equal('Here is your new assignment')
+				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
+				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
+				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+				expect(viewer.canViewAllSubmissions).to.be.false;
+				expect(viewer.graded).to.be.true;
+				expect(viewer.submitted).to.be.true;
+				expect(viewer.submissionType).to.equal(0);
+				expect(viewer.completionDate).to.be.null;
+				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+				flush(function() {
+					expect(viewer.$$('#due-date').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+					expect(viewer.submissionLabel).to.be.equal('submit_graded');
+					done.isDone = true;
+					done();
+				})
+			});
+		});
+	});
+
+	describe('when loading viewer as student with submissions', function() {
+		before(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.submittedAssignmentForStudent));
+				}
+			});
+			fetch.returns(promise);
+		});
 
-				it('loads an assignment', function(done) {
-					var viewer = fixture('basicStudent');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.false;
-						expect(event.detail.canDeleteAssignment).to.be.false;
-						expect(viewer.name).to.equal('Here is your new assignment')
-						expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-						expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-						expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-						expect(viewer.canViewAllSubmissions).to.be.false;
-						expect(viewer.graded).to.be.true;
-						expect(viewer.submitted).to.be.true;
-						expect(viewer.submissionType).to.equal(0);
-						expect(viewer.completionDate).to.be.null;
-						expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-						flush(function() {
-							expect(viewer.$$('#due-date').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-							expect(viewer.submissionLabel).to.be.equal('submit_graded');
-							done.isDone = true;
-							done();
-						})
-					});
-				});
+		it('loads an assignment', function(done) {
+			var viewer = fixture('basicStudent');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.false;
+				expect(event.detail.canDeleteAssignment).to.be.false;
+				expect(viewer.name).to.equal('Here is your new assignment')
+				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
+				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
+				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+				expect(viewer.canViewAllSubmissions).to.be.false;
+				expect(viewer.graded).to.be.false;
+				expect(viewer.submitted).to.be.true;
+				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+				flush(function() {
+					expect(viewer.$$('#due-date').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+					expect(viewer.submissionLabel).to.equal('submit_submitted');
+					done.isDone = true;
+					done();
+				})
+			});
+		});
+	});
+
+	describe('when loading viewer as student with completed observational assignment', function() {
+		before(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.completeAssignmentForStudent));
+				}
 			});
+			fetch.returns(promise);
+		});
 
-			describe('when loading viewer as student with submissions', function() {
-				before(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.submittedAssignmentForStudent));
-						}
-					});
-					fetch.returns(promise);
-				});
+		it('loads an assignment', function(done) {
+			var viewer = fixture('basicStudent');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.false;
+				expect(event.detail.canDeleteAssignment).to.be.false;
+				expect(viewer.name).to.equal('Here is your new assignment');
+				expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+				expect(viewer.canViewAllSubmissions).to.be.false;
+				expect(viewer.graded).to.be.false;
+				expect(viewer.submitted).to.be.true;
+				expect(viewer.submissionType).to.equal(2);
+				expect(viewer.completionDate).to.equal('2017-12-21T20:59:00.000Z');
+				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+				flush(function() {
+					expect(viewer.$$('#due-date').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+					expect(viewer.submissionLabel).to.be.equal('submit_completed');
+					done.isDone = true;
+					done();
+				})
+			});
+		});
+	});
+
+	describe('when loading viewer as student with incomplete observational assignment', function() {
+		before(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudent));
+				}
+			});
+			fetch.returns(promise);
+		});
 
-				it('loads an assignment', function(done) {
-					var viewer = fixture('basicStudent');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.false;
-						expect(event.detail.canDeleteAssignment).to.be.false;
-						expect(viewer.name).to.equal('Here is your new assignment')
-						expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-						expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-						expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-						expect(viewer.canViewAllSubmissions).to.be.false;
-						expect(viewer.graded).to.be.false;
-						expect(viewer.submitted).to.be.true;
-						expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-						flush(function() {
-							expect(viewer.$$('#due-date').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-							expect(viewer.submissionLabel).to.equal('submit_submitted');
-							done.isDone = true;
-							done();
-						})
-					});
-				});
+		it('loads an assignment', function(done) {
+			var viewer = fixture('basicStudent');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.false;
+				expect(event.detail.canDeleteAssignment).to.be.false;
+				expect(viewer.name).to.equal('Here is your new assignment');
+				expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+				expect(viewer.canViewAllSubmissions).to.be.false;
+				expect(viewer.graded).to.be.false;
+				expect(viewer.submitted).to.be.false;
+				expect(viewer.submissionType).to.equal(2);
+				expect(viewer.completionDate).to.be.null;
+				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+				flush(function() {
+					expect(viewer.$$('#due-date').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hidden).to.be.false;
+					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
+					expect(viewer.submissionLabel).to.be.equal('submit_view_details');
+					done.isDone = true;
+					done();
+				})
+			});
+		});
+	});
+
+	describe('when loading viewer as student with incomplete observational assignment, with completion type as marked by learner', function() {
+		before(function() {
+			var completionType = 
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudentMarkedAsComplete));
+				}
 			});
+			fetch.returns(promise);
+		});
 
-			describe('when loading viewer as student with completed observational assignment', function() {
-				before(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.completeAssignmentForStudent));
-						}
-					});
-					fetch.returns(promise);
-				});
+		it('loads an assignment', function(done) {
+			var viewer = fixture('basicStudent');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(viewer.graded).to.be.false;
+				expect(viewer.submitted).to.be.false;
+				expect(viewer.submissionType).to.equal(2);
+				expect(viewer.completionDate).to.be.null;
+				flush(function() {
+					expect(viewer.submissionLabel).to.be.equal('submit_mark_as_complete');
+					done.isDone = true;
+					done();
+				})
+			});
+		});
+	});
+
+
+	describe('when loading assignment without due date as instructor', function() {
+		before(function() {
+			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true,
+				json: function() {
+					var result = window.testFixtures.assignmentForInstructor;
+					delete result.properties.dueDate;
+					return Promise.resolve(JSON.stringify(result));
+				}
+			});
+			fetch.returns(promise);
+		});
 
-				it('loads an assignment', function(done) {
-					var viewer = fixture('basicStudent');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.false;
-						expect(event.detail.canDeleteAssignment).to.be.false;
-						expect(viewer.name).to.equal('Here is your new assignment');
-						expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
-						expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
-						expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-						expect(viewer.canViewAllSubmissions).to.be.false;
-						expect(viewer.graded).to.be.false;
-						expect(viewer.submitted).to.be.true;
-						expect(viewer.submissionType).to.equal(2);
-						expect(viewer.completionDate).to.equal('2017-12-21T20:59:00.000Z');
-						expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-						flush(function() {
-							expect(viewer.$$('#due-date').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-							expect(viewer.submissionLabel).to.be.equal('submit_completed');
-							done.isDone = true;
-							done();
-						})
-					});
+		it('hides the due date', function(done) {
+			var viewer = fixture('basicInstructor');
+			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+				if (done.isDone) return;
+				expect(event.detail.canEditAssignment).to.be.true;
+				expect(viewer.dueDate).to.be.undefined;
+				flush(function() {
+					expect(viewer.$$('#due-date')).to.be.null;
+					done.isDone = true;
+					done();
 				});
 			});
+		});
+	});
 
-			describe('when loading viewer as student with incomplete observational assignment', function() {
-				before(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudent));
-						}
-					});
-					fetch.returns(promise);
-				});
+	describe('when deleting assignment as instructor', function() {
+		it('successfully deletes an assignment', function(done) {
+			var viewer = fixture('basicInstructor');
+				viewer.$.data.resource
+					= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-				it('loads an assignment', function(done) {
-					var viewer = fixture('basicStudent');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.false;
-						expect(event.detail.canDeleteAssignment).to.be.false;
-						expect(viewer.name).to.equal('Here is your new assignment');
-						expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
-						expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
-						expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-						expect(viewer.canViewAllSubmissions).to.be.false;
-						expect(viewer.graded).to.be.false;
-						expect(viewer.submitted).to.be.false;
-						expect(viewer.submissionType).to.equal(2);
-						expect(viewer.completionDate).to.be.null;
-						expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-						flush(function() {
-							expect(viewer.$$('#due-date').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hidden).to.be.false;
-							expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
-							expect(viewer.submissionLabel).to.be.equal('submit_view_details');
-							done.isDone = true;
-							done();
-						})
-					});
-				});
+			var fetch = sinon.stub(window.d2lfetch, 'fetch');
+			var promise = Promise.resolve({
+				ok: true
 			});
+			fetch.returns(promise);
 
-			describe('when loading viewer as student with incomplete observational assignment, with completion type as marked by learner', function() {
-				before(function() {
-					var completionType = 
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudentMarkedAsComplete));
-						}
-					});
-					fetch.returns(promise);
-				});
-
-				it('loads an assignment', function(done) {
-					var viewer = fixture('basicStudent');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(viewer.graded).to.be.false;
-						expect(viewer.submitted).to.be.false;
-						expect(viewer.submissionType).to.equal(2);
-						expect(viewer.completionDate).to.be.null;
-						flush(function() {
-							expect(viewer.submissionLabel).to.be.equal('submit_mark_as_complete');
-							done.isDone = true;
-							done();
-						})
-					});
-				});
+			viewer.addEventListener('d2l-assignment-delete-complete', function(event) {
+				if (done.isDone) return;
+				assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
+				done.isDone = true;
+				done();
 			});
+			viewer.delete();
+		});
 
+		it('fails to delete an assignment', function(done) {
+			var viewer = fixture('basicInstructor');
+			viewer.$.data.resource
+				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-			describe('when loading assignment without due date as instructor', function() {
-				before(function() {
-					fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true,
-						json: function() {
-							var result = window.testFixtures.assignmentForInstructor;
-							delete result.properties.dueDate;
-							return Promise.resolve(JSON.stringify(result));
-						}
-					});
-					fetch.returns(promise);
-				});
+			var fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-				it('hides the due date', function(done) {
-					var viewer = fixture('basicInstructor');
-					viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-						if (done.isDone) return;
-						expect(event.detail.canEditAssignment).to.be.true;
-						expect(viewer.dueDate).to.be.undefined;
-						flush(function() {
-							expect(viewer.$$('#due-date')).to.be.null;
-							done.isDone = true;
-							done();
-						});
-					});
-				});
+			var promise = Promise.resolve({
+				ok: false
 			});
+			fetch.returns(promise);
 
-			describe('when deleting assignment as instructor', function() {
-				it('successfully deletes an assignment', function(done) {
-					var viewer = fixture('basicInstructor');
-						viewer.$.data.resource
-							= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor));
-
-					var fetch = sinon.stub(window.d2lfetch, 'fetch');
-					var promise = Promise.resolve({
-						ok: true
-					});
-					fetch.returns(promise);
-
-					viewer.addEventListener('d2l-assignment-delete-complete', function(event) {
-						if (done.isDone) return;
-						assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
-						done.isDone = true;
-						done();
-					});
-					viewer.delete();
-				});
-
-				it('fails to delete an assignment', function(done) {
-					var viewer = fixture('basicInstructor');
-					viewer.$.data.resource
-						= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor));
-
-					var fetch = sinon.stub(window.d2lfetch, 'fetch');
-
-					var promise = Promise.resolve({
-						ok: false
-					});
-					fetch.returns(promise);
-
-					viewer.addEventListener('d2l-assignment-delete-failed', function(event) {
-						if (done.isDone) return;
-						assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
-						done.isDone = true;
-						done();
-					});
-					viewer.delete();
-				});
+			viewer.addEventListener('d2l-assignment-delete-failed', function(event) {
+				if (done.isDone) return;
+				assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
+				done.isDone = true;
+				done();
 			});
+			viewer.delete();
 		});
-	</script>
+	});
+});
+</script>
 	</body>
 </html>
diff --git a/test/fixtures/assignment.js b/test/fixtures/assignment.js
index 4bbef18..43d515e 100644
--- a/test/fixtures/assignment.js
+++ b/test/fixtures/assignment.js
@@ -341,45 +341,45 @@ Object.assign(window.testFixtures, {
 	},
 	get activityForUser() {
 		return {
-		    "class": [
-		        "activity",
-		        "assignment-activity",
-		        "published"
-		    ],
-		    "entities": [
-		        {
-		            "class": [
-		                "date",
-		                "start-date"
-		            ],
-		            "rel": [
-		                "https://api.brightspace.com/rels/date"
-		            ],
-		            "properties": {
-		                "date": "2018-03-01T15:56:41.417Z"
-		            }
-		        }
-		    ],
-		    "links": [
-		        {
-		            "rel": [
-		                "self"
-		            ],
-		            "href": "http:\/\/activities.api.dev.brightspace.com\/activities\/6606_2000_5\/usages\/123060"
-		        },
-		        {
-		            "rel": [
-		                "https://activities.api.brightspace.com/rels/my-activity-usage"
-		            ],
-		            "href": "http:\/\/activities.api.dev.brightspace.com\/activities\/6606_2000_5\/usages\/123060\/users\/30223"
-		        },
-		        {
-		            "rel": [
-		                "https://api.brightspace.com/rels/assignment"
-		            ],
-		            "href": "http:\/\/assignments.api.dev.brightspace.com\/123060\/folders\/5"
-		        }
-		    ]
+			"class": [
+				"activity",
+				"assignment-activity",
+				"published"
+			],
+			"entities": [
+				{
+					"class": [
+						"date",
+						"start-date"
+					],
+					"rel": [
+						"https://api.brightspace.com/rels/date"
+					],
+					"properties": {
+						"date": "2018-03-01T15:56:41.417Z"
+					}
+				}
+			],
+			"links": [
+				{
+					"rel": [
+						"self"
+					],
+					"href": "http:\/\/activities.api.dev.brightspace.com\/activities\/6606_2000_5\/usages\/123060"
+				},
+				{
+					"rel": [
+						"https://activities.api.brightspace.com/rels/my-activity-usage"
+					],
+					"href": "http:\/\/activities.api.dev.brightspace.com\/activities\/6606_2000_5\/usages\/123060\/users\/30223"
+				},
+				{
+					"rel": [
+						"https://api.brightspace.com/rels/assignment"
+					],
+					"href": "http:\/\/assignments.api.dev.brightspace.com\/123060\/folders\/5"
+				}
+			]
 		}
 	},
 	get gradedAssignmentForStudent() {
diff --git a/test/index.html b/test/index.html
index d2e8a0e..6a6b5ce 100644
--- a/test/index.html
+++ b/test/index.html
@@ -1,7 +1,7 @@
 <html>
 	<head>
-		<script src="../../webcomponentsjs/webcomponents-lite.js"></script>
-		<script src="../../web-component-tester/browser.js"></script>
+		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../wct-browser-legacy/browser.js"></script>
 	</head>
 	<body>
 		<script>

From 58f4e8f785b4bd2843c0f0a9240c6a5571dc7f94 Mon Sep 17 00:00:00 2001
From: Vincent Wong <Vincent.Wong@D2L.com>
Date: Mon, 14 Jan 2019 15:37:59 -0800
Subject: [PATCH 2/4] Patch

---
 .gitignore                                    |  2 --
 d2l-assignment-attachment-behavior.js         |  2 +-
 d2l-assignment-behavior.js                    |  2 +-
 d2l-assignment-editor-data.js                 | 10 +++---
 d2l-assignment-editor.js                      | 22 +++---------
 d2l-assignment-html-editor.js                 |  3 +-
 d2l-assignment-input.js                       |  2 +-
 d2l-assignment-text-area.js                   |  2 +-
 d2l-assignment-viewer-data.js                 | 30 ++++++++--------
 d2l-assignment-viewer.js                      | 10 ++----
 d2l-bubble-styles.js                          |  2 +-
 d2l-field-styles.js                           |  2 +-
 d2l-loaded-assignment-viewer.js               |  5 +--
 d2l-planned-assignment-viewer-data.js         |  6 ++--
 d2l-planned-assignment-viewer.js              |  2 +-
 demo/d2l-assignment-editor.html               |  6 ++--
 demo/d2l-assignment-viewer.html               |  8 ++---
 localize-behavior.js                          |  5 ++-
 package.json                                  | 27 +++++++-------
 .../assignment-attachment-behavior.js         |  2 +-
 test/d2l-assignment-editor_test.html          | 35 ++++++++++---------
 test/d2l-assignment-viewer_test.html          |  9 +++--
 22 files changed, 93 insertions(+), 101 deletions(-)

diff --git a/.gitignore b/.gitignore
index a31bb10..3c3c157 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,5 +4,3 @@ css/**
 
 package-lock.json
 *.log
-
-node_modules
diff --git a/d2l-assignment-attachment-behavior.js b/d2l-assignment-attachment-behavior.js
index b576a3d..4d90c92 100644
--- a/d2l-assignment-attachment-behavior.js
+++ b/d2l-assignment-attachment-behavior.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 /** @polymerBehavior window.D2L.AssignmentAttachmentBehavior*/
 var AttachmentBehavior = {
 	linkToAttachment: function(linkEntity) {
diff --git a/d2l-assignment-behavior.js b/d2l-assignment-behavior.js
index 9fac563..a3a819c 100644
--- a/d2l-assignment-behavior.js
+++ b/d2l-assignment-behavior.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-fetch/d2l-fetch.js';
 import 'whatwg-fetch/fetch.js';
 /** @polymerBehavior window.D2L.AssignmentBehavior*/
diff --git a/d2l-assignment-editor-data.js b/d2l-assignment-editor-data.js
index 9b33be7..8c9f6b0 100644
--- a/d2l-assignment-editor-data.js
+++ b/d2l-assignment-editor-data.js
@@ -1,6 +1,6 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import './localize-behavior.js';
-import 'siren-parser/siren-parser.js';
+import SirenParse from 'siren-parser';
 import './d2l-assignment-attachment-behavior.js';
 import './d2l-assignment-behavior.js';
 Polymer({
@@ -95,7 +95,7 @@ Polymer({
 				if (response.ok) {
 					response.json()
 						.then(function(body) {
-							_this.resource = window.D2L.Hypermedia.Siren.Parse(body);
+							_this.resource = SirenParse(body);
 							var action = _this.resource.getActionByName('quick-create-folder');
 							if (action) {
 								_this.loaded = true;
@@ -202,7 +202,7 @@ Polymer({
 				if (response.ok) {
 					response.json()
 						.then(function(body) {
-							var resource = window.D2L.Hypermedia.Siren.Parse(body);
+							var resource = SirenParse(body);
 							var self = resource.getLinkByRel('self');
 							if (self) {
 								var attachments = resource.getSubEntityByRel('https://assignments.api.brightspace.com/rels/attachments');
@@ -318,7 +318,7 @@ Polymer({
 			data.append('instructions', instructions);
 		}
 
-		var validatedDate = this._processDate(dueDate);
+		var validatedDate = dueDate && this._processDate(dueDate);
 		var resetDueDate = !validatedDate && action && this._getFieldValue(action, 'dueDate');
 		if (validatedDate || resetDueDate) {
 			data.append('dueDate', resetDueDate ? '' : validatedDate);
diff --git a/d2l-assignment-editor.js b/d2l-assignment-editor.js
index f093666..82f53c1 100644
--- a/d2l-assignment-editor.js
+++ b/d2l-assignment-editor.js
@@ -4,14 +4,8 @@ Create Brightspace assignments
 
 @demo demo/d2l-assignment-editor.html
 */
-/*
-  FIXME(polymer-modulizer): the above comments were extracted
-  from HTML and may be out of place here. Review them and
-  then delete this comment!
-*/
-import '@polymer/polymer/polymer-legacy.js';
-
-import 'lazy-imports/lazy-imports-behavior.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';
 import 'd2l-attachments-ui/d2l-attachment-list.js';
 import 'd2l-attachments-ui/d2l-attachment.js';
 import 'd2l-button/d2l-button.js';
@@ -29,7 +23,7 @@ import 'd2l-datetime-picker/d2l-datetime-picker.js';
 const $_documentContainer = document.createElement('template');
 
 $_documentContainer.innerHTML = `<dom-module id="d2l-assignment-editor">
-	
+
 	<template strip-whitespace="">
 		<style include="select-styles d2l-field-styles d2l-input-styles d2l-bubble-styles">
 			[hidden] {
@@ -311,8 +305,7 @@ Polymer({
 	is: 'd2l-assignment-editor',
 
 	behaviors: [
-		D2L.PolymerBehaviors.Assignment.LocalizeBehavior,
-		Polymer.LazyImportsBehavior
+		D2L.PolymerBehaviors.Assignment.LocalizeBehavior
 	],
 	listeners: {
 		'd2l-assignment-save-failed': '_failed',
@@ -466,11 +459,6 @@ Polymer({
 			type: Number
 		}
 	},
-	attached: function() {
-		Polymer.RenderStatus.afterNextRender(this, function() {
-			this.importLazyGroup('datetime');
-		}.bind(this));
-	},
 	_onAttachmentRemoved: function(e) {
 		var attachment = this.$.attachments.modelForElement(e.target).item;
 		this._removeAttachment(attachment, e.target);
@@ -608,7 +596,7 @@ Polymer({
 	},
 	_toggleBubble: function(field, show) {
 		var fieldElement = this.$[field];
-		var bubble = Polymer.dom(fieldElement).nextElementSibling;
+		var bubble = dom(fieldElement).nextElementSibling;
 		this.toggleClass('d2l-bubble-show', show, bubble);
 		if (show) {
 			fieldElement.setAttribute('aria-invalid', true);
diff --git a/d2l-assignment-html-editor.js b/d2l-assignment-html-editor.js
index 81da059..3a75cc8 100644
--- a/d2l-assignment-html-editor.js
+++ b/d2l-assignment-html-editor.js
@@ -1,5 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
-import 'd2l-html-editor/d2l-html-editor-client-framed.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-html-editor/d2l-html-editor.js';
 import 'd2l-inputs/d2l-input-shared-styles.js';
 const $_documentContainer = document.createElement('template');
diff --git a/d2l-assignment-input.js b/d2l-assignment-input.js
index fe5a637..5f6d274 100644
--- a/d2l-assignment-input.js
+++ b/d2l-assignment-input.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import './d2l-assignment-text-area.js';
 import './d2l-assignment-html-editor.js';
 const $_documentContainer = document.createElement('template');
diff --git a/d2l-assignment-text-area.js b/d2l-assignment-text-area.js
index 76be054..5d2ab76 100644
--- a/d2l-assignment-text-area.js
+++ b/d2l-assignment-text-area.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-tooltip/d2l-tooltip.js';
 import 'd2l-inputs/d2l-input-textarea.js';
 const $_documentContainer = document.createElement('template');
diff --git a/d2l-assignment-viewer-data.js b/d2l-assignment-viewer-data.js
index 1087ad5..aa86bef 100644
--- a/d2l-assignment-viewer-data.js
+++ b/d2l-assignment-viewer-data.js
@@ -1,15 +1,15 @@
-import '@polymer/polymer/polymer-legacy.js';
-import 'd2l-hypermedia-constants/d2l-hm-constants-behavior.js';
-import 'siren-parser/siren-parser.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import {Classes, Rels} from 'd2l-hypermedia-constants';
 import './d2l-assignment-attachment-behavior.js';
 import './d2l-assignment-behavior.js';
+import SirenParse from 'siren-parser';
+
 Polymer({
 
 	is: 'd2l-assignment-viewer-data',
 	behaviors: [
 		window.D2L.AssignmentAttachmentBehavior,
-		window.D2L.AssignmentBehavior,
-		window.D2L.Hypermedia.HMConstantsBehavior
+		window.D2L.AssignmentBehavior
 	],
 	properties: {
 		url: {
@@ -110,7 +110,7 @@ Polymer({
 			if (response.ok) {
 				response.json()
 					.then(function(body) {
-						var resource = window.D2L.Hypermedia.Siren.Parse(body);
+						var resource = SirenParse(body);
 						if (resource.hasClass('assignment')) {
 							_this.resource = resource;
 							_this.name = _this.resource.properties.name;
@@ -121,8 +121,8 @@ Polymer({
 							_this.completionDate = _this.resource.properties.completionDate !== undefined ? _this.resource.properties.completionDate : null;
 							_this.hasAssignmentDetails = _this.canAddGrade || _this.dueDate !== undefined;
 
-							var richTextInstructions = _this.resource.getSubEntityByRel(_this.HypermediaRels.Assignments.instructions);
-							if (richTextInstructions && richTextInstructions.hasClass(_this.HypermediaClasses.text.richtext)) {
+							var richTextInstructions = _this.resource.getSubEntityByRel(Rels.Assignments.instructions);
+							if (richTextInstructions && richTextInstructions.hasClass(Classes.text.richtext)) {
 								_this.instructions = richTextInstructions.properties.html;
 							} else {
 								_this.instructions = _this.resource.properties.instructions;
@@ -158,17 +158,17 @@ Polymer({
 								_this.outOf = outOf;
 							}
 
-							if (_this.resource.hasLinkByRel(_this.HypermediaRels.Activities.activityUsage)) {
-								var activityUsageLink = _this.resource.getLinkByRel(_this.HypermediaRels.Activities.activityUsage);
+							if (_this.resource.hasLinkByRel(Rels.Activities.activityUsage)) {
+								var activityUsageLink = _this.resource.getLinkByRel(Rels.Activities.activityUsage);
 								_this.activityUsageLink = activityUsageLink.href;
 
 								Promise.resolve(_this._getActivityUsageInfo()).then(function(res) { // eslint-disable-line no-undef
 									if (res.ok) {
 										res.json()
 											.then(function(linkBody) {
-												var linkResource = window.D2L.Hypermedia.Siren.Parse(linkBody);
-												if (linkResource.hasLinkByRel(_this.HypermediaRels.Activities.myActivityUsage)) {
-													var myActivityUsageLink = linkResource.getLinkByRel(_this.HypermediaRels.Activities.myActivityUsage);
+												var linkResource = SirenParse(linkBody);
+												if (linkResource.hasLinkByRel(Rels.Activities.myActivityUsage)) {
+													var myActivityUsageLink = linkResource.getLinkByRel(Rels.Activities.myActivityUsage);
 													_this.myActivityUsageLink = myActivityUsageLink.href;
 												}
 
@@ -253,7 +253,7 @@ Polymer({
 		//		 return;
 		//	 }
 		//	 response.json().then(function(body) {
-		//		 var publishResource = window.D2L.Hypermedia.Siren.Parse(body);
+		//		 var publishResource = SirenParse(body);
 		//		 if (publishResource.hasClass('published') || !postNow) {
 		//			 _this.fire('d2l-assignment-save-complete', {
 		//				 id: id,
@@ -265,7 +265,7 @@ Polymer({
 		//		 _this.callUrl(publishAction.href, publishAction.method).then(function(response) {
 		//			 if (response.ok) {
 		//				 response.json().then(function(body) {
-		//					 var resource = window.D2L.Hypermedia.Siren.Parse(body);
+		//					 var resource = SirenParse(body);
 		//					 if (resource.hasClass('published')) {
 		//						 _this.fire('d2l-assignment-save-complete', {
 		//							 id: id,
diff --git a/d2l-assignment-viewer.js b/d2l-assignment-viewer.js
index 088c101..47f7dd0 100644
--- a/d2l-assignment-viewer.js
+++ b/d2l-assignment-viewer.js
@@ -4,12 +4,7 @@ View Brightspace assignments
 
 @demo demo/d2l-assignment-viewer.html
 */
-/*
-  FIXME(polymer-modulizer): the above comments were extracted
-  from HTML and may be out of place here. Review them and
-  then delete this comment!
-*/
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 
 import 'd2l-link/d2l-link.js';
 import 'd2l-alert/d2l-alert.js';
@@ -18,7 +13,8 @@ import './localize-behavior.js';
 import 's-html/s-html.js';
 import './d2l-assignment-viewer-data.js';
 import 'd2l-more-less/d2l-more-less.js';
-import 'd2l-attachments-ui/d2l-attachment-ui.js';
+import 'd2l-attachments-ui/d2l-attachment-list.js';
+import 'd2l-attachments-ui/d2l-attachment.js';
 const $_documentContainer = document.createElement('template');
 
 $_documentContainer.innerHTML = `<dom-module id="d2l-assignment-viewer">
diff --git a/d2l-bubble-styles.js b/d2l-bubble-styles.js
index aff77b0..091be7b 100644
--- a/d2l-bubble-styles.js
+++ b/d2l-bubble-styles.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-colors/d2l-colors.js';
 const $_documentContainer = document.createElement('template');
 
diff --git a/d2l-field-styles.js b/d2l-field-styles.js
index 2b55ba3..c643250 100644
--- a/d2l-field-styles.js
+++ b/d2l-field-styles.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-colors/d2l-colors.js';
 const $_documentContainer = document.createElement('template');
 
diff --git a/d2l-loaded-assignment-viewer.js b/d2l-loaded-assignment-viewer.js
index e5daeb7..a83eae7 100644
--- a/d2l-loaded-assignment-viewer.js
+++ b/d2l-loaded-assignment-viewer.js
@@ -1,9 +1,10 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-typography/d2l-typography.js';
 import './localize-behavior.js';
 import 's-html/s-html.js';
 import './d2l-assignment-viewer-data.js';
-import 'd2l-attachments-ui/d2l-attachment-ui.js';
+import 'd2l-attachments-ui/d2l-attachment-list.js';
+import 'd2l-attachments-ui/d2l-attachment.js';
 import './d2l-field-styles.js';
 const $_documentContainer = document.createElement('template');
 
diff --git a/d2l-planned-assignment-viewer-data.js b/d2l-planned-assignment-viewer-data.js
index 165cc9b..f72e8fe 100644
--- a/d2l-planned-assignment-viewer-data.js
+++ b/d2l-planned-assignment-viewer-data.js
@@ -1,5 +1,5 @@
-import '@polymer/polymer/polymer-legacy.js';
-import 'siren-parser/siren-parser.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import SirenParse from 'siren-parser';
 import './d2l-assignment-attachment-behavior.js';
 import './d2l-assignment-behavior.js';
 Polymer({
@@ -35,7 +35,7 @@ Polymer({
 				if (response.ok) {
 					response.json()
 						.then(function(body) {
-							_this.resource = window.D2L.Hypermedia.Siren.Parse(body);
+							_this.resource = SirenParse(body);
 							if (_this.resource.hasClass('assignment')) {
 								_this.name = _this.resource.properties.name;
 
diff --git a/d2l-planned-assignment-viewer.js b/d2l-planned-assignment-viewer.js
index deb8d91..18fb063 100644
--- a/d2l-planned-assignment-viewer.js
+++ b/d2l-planned-assignment-viewer.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-typography/d2l-typography.js';
 import 'd2l-alert/d2l-alert.js';
 import './d2l-planned-assignment-viewer-data.js';
diff --git a/demo/d2l-assignment-editor.html b/demo/d2l-assignment-editor.html
index 863e486..c57c38b 100644
--- a/demo/d2l-assignment-editor.html
+++ b/demo/d2l-assignment-editor.html
@@ -12,6 +12,8 @@
 		<script type="module" src="../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
 		<script type="module" src="../../d2l-button/d2l-button.js"></script>
 		<script type="module" src="../d2l-assignment-editor.js"></script>
+		<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
+		<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 
 		<!-- FIXME(polymer-modulizer):
 		These imperative modules that innerHTML your HTML are
@@ -38,7 +40,7 @@
 import '@polymer/iron-demo-helpers/demo-snippet.js';
 import 'd2l-button/d2l-button.js';
 import '../d2l-assignment-editor.js';
-function printFormData(event) {
+window.printFormData = function(event) {
 	if (event.detail.entries) {
 		var output = "";
 		for (var pair of event.detail.entries()) {
@@ -51,7 +53,7 @@
 	}
 }
 
-function save() {
+window.save = function() {
 	var editor = document.getElementById('editor');
 	editor.addEventListener('d2l-assignment-save-failed', printFormData);
 	editor.save();
diff --git a/demo/d2l-assignment-viewer.html b/demo/d2l-assignment-viewer.html
index 77a5d61..1ee8f8f 100644
--- a/demo/d2l-assignment-viewer.html
+++ b/demo/d2l-assignment-viewer.html
@@ -12,6 +12,8 @@
 		<script type="module" src="../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
 		<script type="module" src="../d2l-assignment-viewer.js"></script>
 		<script type="module" src="../../d2l-button/d2l-button.js"></script>
+		<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
+		<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 
 		<!-- FIXME(polymer-modulizer):
 		These imperative modules that innerHTML your HTML are
@@ -34,11 +36,7 @@
 	</head>
 	<body>
 		<script type="module">
-import '@polymer/iron-demo-helpers/demo-pages-shared-styles.js';
-import '@polymer/iron-demo-helpers/demo-snippet.js';
-import '../d2l-assignment-viewer.js';
-import 'd2l-button/d2l-button.js';
-function toggleInstructorView() {
+window.toggleInstructorView = function() {
 	document.getElementById('viewer').canViewAllSubmissions =
 		!document.getElementById('viewer').canViewAllSubmissions;
 }
diff --git a/localize-behavior.js b/localize-behavior.js
index 815d0e3..699c960 100644
--- a/localize-behavior.js
+++ b/localize-behavior.js
@@ -1,10 +1,13 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-localize-behavior/d2l-localize-behavior.js';
 window.D2L = window.D2L || {};
 window.D2L.PolymerBehaviors = window.D2L.PolymerBehaviors || {};
 window.D2L.PolymerBehaviors.Assignment = window.D2L.PolymerBehaviors.Assignment || {};
 /** @polymerBehavior D2L.PolymerBehaviors.Assignment.LocalizeBehavior */
 D2L.PolymerBehaviors.Assignment.LocalizeBehaviorImpl = {
+	get importMeta() {
+		return import.meta;
+	},
 	properties: {
 		resources: {
 			value: function() {
diff --git a/package.json b/package.json
index 4a4053a..13e6196 100644
--- a/package.json
+++ b/package.json
@@ -45,26 +45,27 @@
   },
   "dependencies": {
     "@polymer/polymer": "^3.0.0",
-    "d2l-tooltip": "BrightspaceUI/tooltip#semver:^3",
-    "d2l-inputs": "BrightspaceUI/inputs#semver:^2",
+    "d2l-alert": "BrightspaceUI/alert#semver:^4",
+    "d2l-attachments-ui": "Brightspace/attachments-ui#semver:^3",
     "d2l-button": "BrightspaceUI/button#semver:^5",
     "d2l-colors": "BrightspaceUI/colors#semver:^4",
+    "d2l-datetime-picker": "BrightspaceUI/datetime-picker#semver:^4",
+    "d2l-fetch": "Brightspace/d2l-fetch.git#semver:^2",
+    "d2l-html-editor": "Brightspace/d2l-html-editor#semver:^2",
+    "d2l-hypermedia-constants": "^6",
     "d2l-icons": "BrightspaceUI/icons#semver:^6",
+    "d2l-inputs": "BrightspaceUI/inputs#semver:^2",
     "d2l-link": "BrightspaceUI/link#semver:^5",
-    "d2l-typography": "BrightspaceUI/typography#semver:^7",
+    "d2l-loading-spinner": "BrightspaceUI/loading-spinner#semver:^7",
+    "d2l-localize-behavior": "BrightspaceUI/localize-behavior#semver:^2",
+    "d2l-more-less": "BrightspaceUI/more-less#semver:^5",
     "d2l-offscreen": "BrightspaceUI/offscreen#semver:^4",
+    "d2l-tooltip": "BrightspaceUI/tooltip#semver:^3",
+    "d2l-typography": "BrightspaceUI/typography#semver:^7",
     "s-html": "Brightspace/s-html#semver:^2.0.0",
-    "d2l-datetime-picker": "BrightspaceUI/datetime-picker#semver:^4",
-    "d2l-loading-spinner": "BrightspaceUI/loading-spinner#semver:^7",
-    "d2l-attachments-ui": "Brightspace/attachments-ui#semver:^3",
-    "d2l-alert": "BrightspaceUI/alert#semver:^4",
-    "whatwg-fetch": "^2.0.0",
-    "d2l-hypermedia-constants": "^6",
-    "d2l-fetch": "Brightspace/d2l-fetch.git#semver:^2",
     "siren-parser": "^8.0.0",
-    "d2l-html-editor": "Brightspace/d2l-html-editor#semver:^2",
-    "d2l-more-less": "BrightspaceUI/more-less#semver:^5",
-    "d2l-localize-behavior": "BrightspaceUI/localize-behavior#semver:^2"
+    "vui-input": "^2.1.0",
+    "whatwg-fetch": "^2.0.0"
   },
   "resolutions": {
     "inherits": "2.0.3",
diff --git a/test-resources/behavior-elements/assignment-attachment-behavior.js b/test-resources/behavior-elements/assignment-attachment-behavior.js
index c95417b..c34593d 100644
--- a/test-resources/behavior-elements/assignment-attachment-behavior.js
+++ b/test-resources/behavior-elements/assignment-attachment-behavior.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import '../../d2l-assignment-attachment-behavior.js';
 Polymer({
 	is: 'assignment-attachment-behavior',
diff --git a/test/d2l-assignment-editor_test.html b/test/d2l-assignment-editor_test.html
index f25c8d2..5daf17b 100644
--- a/test/d2l-assignment-editor_test.html
+++ b/test/d2l-assignment-editor_test.html
@@ -26,8 +26,11 @@
 			<d2l-assignment-editor></d2l-assignment-editor>
 		</template>
 	</test-fixture>
+	<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
+	<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 	<script type="module">
-import '../d2l-assignment-editor.js';
+	import '../d2l-assignment-editor.js';
+	import SirenParse from 'siren-parser';
 function getAttachment() {
 	return {
 		type: 'Document',
@@ -266,7 +269,7 @@
 		it('save succeeds', function(done) {
 			var editor = fixture('manual');
 			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
+				= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
 
 			editor.addEventListener('d2l-assignment-save-complete', function(event) {
 				assert(fetch.calledWith(sinon.match.has('method', 'POST')));
@@ -289,7 +292,7 @@
 		beforeEach(function() {
 			editor = fixture('manual');
 			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
+				= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
 
 			editor.name = 'How now brown cow';
 			editor.instructions = 'In a while crocodile';
@@ -359,7 +362,7 @@
 		beforeEach(function() {
 			editor = fixture('manual');
 			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
+				= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
 
 			editor.name = 'How now brown cow';
 			editor.instructions = 'In a while crocodile';
@@ -379,7 +382,7 @@
 			flush(function() {
 				expect(editor.$.name.value).to.be.empty;
 				expect(editor.$.instructions.value).to.be.empty;
-				expect(editor.$.dueDate.datetime).to.be.empty;
+				expect(editor.$.dueDate.datetime).to.be.null;
 				expect(editor.$.addToGrades.checked).to.not.be.true;
 				expect(editor.$.maximumGrade.value).to.equal('100');
 				flush(function() {
@@ -395,7 +398,7 @@
 			flush(function() {
 				expect(editor.$.name.value).to.be.empty;
 				expect(editor.$.instructions.value).to.be.empty;
-				expect(editor.$.dueDate.datetime).to.be.empty;
+				expect(editor.$.dueDate.datetime).to.be.null;
 				expect(editor.$.addToGrades.checked).to.not.be.true;
 				expect(editor.$.maximumGrade.value).to.equal('100');
 				expect(document.activeElement).to.not.equal(editor.$.name);
@@ -485,7 +488,7 @@
 		it('save succeeds', function(done) {
 			var editor = fixture('manual');
 			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
+				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor))
 
 			editor.addEventListener('d2l-assignment-save-complete', function(event) {
 				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
@@ -507,7 +510,7 @@
 		it('skips instructions if not updated', function(done) {
 			var editor = fixture('manual');
 			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
+				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor))
 
 			editor.addEventListener('d2l-assignment-save-complete', function(event) {
 				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
@@ -528,7 +531,7 @@
 		it('skips dueDate if not provided or updated', function(done) {
 			var editor = fixture('manual');
 			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructorNoDueDate))
+				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructorNoDueDate))
 
 			editor.addEventListener('d2l-assignment-save-complete', function(event) {
 				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
@@ -549,7 +552,7 @@
 		it('includes dueDate if reset', function(done) {
 			var editor = fixture('manual');
 			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
+				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor))
 
 			editor.addEventListener('d2l-assignment-save-complete', function(event) {
 				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
@@ -712,8 +715,8 @@
 
 		it('adds all the new files', function() {
 			var attachment = getAttachment();
-			attachmentsToSave = [ attachment ];
-			existingAttachments = [];
+			var attachmentsToSave = [ attachment ];
+			var existingAttachments = [];
 			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
 			expect(promiseArray.length).to.equal(1);
 			expect(promiseArray[0]).to.equal(savePromise);
@@ -721,16 +724,16 @@
 		it('does not add or delete any files that are new and marked as removed', function() {
 			var attachment = getAttachment();
 			attachment.isDeleted = true;
-			attachmentsToSave = [ attachment ];
-			existingAttachments = [];
+			var attachmentsToSave = [ attachment ];
+			var existingAttachments = [];
 			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
 			expect(promiseArray.length).to.equal(0);
 		});
 		it('deletes all the removed files', function() {
 			var attachment = getExistingAttachment();
 			attachment.isDeleted = true;
-			attachmentsToSave = [];
-			existingAttachments = [ attachment ];
+			var attachmentsToSave = [];
+			var existingAttachments = [ attachment ];
 			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
 			expect(promiseArray.length).to.equal(1);
 			expect(promiseArray[0]).to.equal(deletePromise);
diff --git a/test/d2l-assignment-viewer_test.html b/test/d2l-assignment-viewer_test.html
index 2a13cf0..14a6ded 100644
--- a/test/d2l-assignment-viewer_test.html
+++ b/test/d2l-assignment-viewer_test.html
@@ -25,8 +25,11 @@
 			<d2l-assignment-viewer url="/assignmentStudent"></d2l-assignment-viewer>
 		</template>
 	</test-fixture>
+	<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
+	<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 	<script type="module">
-import '../d2l-assignment-viewer.js';
+	import '../d2l-assignment-viewer.js';
+	import SirenParse from 'siren-parser';
 describe('d2l-assignment-viewer', function() {
 	var viewer;
 	var fetch;
@@ -469,7 +472,7 @@
 		it('successfully deletes an assignment', function(done) {
 			var viewer = fixture('basicInstructor');
 				viewer.$.data.resource
-					= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor));
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
 			var fetch = sinon.stub(window.d2lfetch, 'fetch');
 			var promise = Promise.resolve({
@@ -489,7 +492,7 @@
 		it('fails to delete an assignment', function(done) {
 			var viewer = fixture('basicInstructor');
 			viewer.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor));
+				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
 			var fetch = sinon.stub(window.d2lfetch, 'fetch');
 

From a878fd4e843f9a4cb680580b6a47a72ef3479e5b Mon Sep 17 00:00:00 2001
From: Vincent Wong <Vincent.Wong@D2L.com>
Date: Mon, 14 Jan 2019 15:47:23 -0800
Subject: [PATCH 3/4] Publish repo to npm-local in artifactory

---
 .circleci/config.yml                          | 29 +++++++------------
 _circle.yml                                   | 19 ------------
 demo/d2l-assignment-editor.html               |  8 ++---
 demo/d2l-assignment-viewer.html               |  8 ++---
 package.json                                  |  2 +-
 scripts/deploy_artifactory.sh                 | 18 ------------
 ...l-assignment-attachment-behavior_test.html |  4 +--
 test/d2l-assignment-editor_test.html          |  4 +--
 test/d2l-assignment-viewer_test.html          |  4 +--
 9 files changed, 26 insertions(+), 70 deletions(-)
 delete mode 100644 _circle.yml
 delete mode 100644 scripts/deploy_artifactory.sh

diff --git a/.circleci/config.yml b/.circleci/config.yml
index 6387e19..e0478b8 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -2,7 +2,7 @@ version: 2
 
 defaults: &defaults
   docker:
-    - image: circleci/node:8-stretch-browsers
+    - image: circleci/node:10.15-stretch-browsers
 
 jobs:
   build:
@@ -11,30 +11,22 @@ jobs:
       - checkout
       - run: curl -ks -u$ARTIFACTORY_USER:$ARTIFACTORY_PASS "https://d2lartifacts.artifactoryonline.com/d2lartifacts/api/npm/npm-local/auth/d2l" -o .npmrc
       - run:
-          name: Setup Bower Artifactory Registry
-          command: echo "export bower_registry__search=\"[https://${ARTIFACTORY_USER}:`node -p "encodeURIComponent('$ARTIFACTORY_PASS')"`@d2lartifacts.jfrog.io/d2lartifacts/api/bower/bower-local, http://registry.bower.io]\"" >> $BASH_ENV
+          name: Setup NPM Artifactory Registry
+          command: npm config set @d2l:registry "https://d2lartifacts.artifactoryonline.com/d2lartifacts/api/npm/npm-local/"
       - restore_cache:
           keys:
-            - v3-package-json-{{ checksum "package.json" }}
-            - v3-package-json- # if cache for exact version of `package.json` is not present then load any most recent one
-      - restore_cache:
-          keys:
-            - v3-bower-json-{{ checksum "bower.json" }}
-            - v3-bower-json-
+            - v5-package-json-{{ checksum "package.json" }}
+            - v5-package-json- # if cache for exact version of `package.json` is not present then load any most recent one
       - run:
           name: Installing Dependencies
-          command: yarn
+          command: npm install
       - run:
           name: Run Build
-          command: yarn build
+          command: npm run build
       - save_cache:
-          key: v3-package-json-{{ checksum "package.json" }}
+          key: v5-package-json-{{ checksum "package.json" }}
           paths:
             - node_modules
-      - save_cache:
-          key: v3-bower-json-{{ checksum "bower.json" }}
-          paths:
-            - bower_components
       - persist_to_workspace:
           root: ../
           paths: ./*
@@ -48,16 +40,17 @@ jobs:
           name: Fix Missing Dependencies
           command: sudo apt-get install libgconf-2-4
       - run: export LAUNCHPAD_BROWSERS=chrome
-      - run: yarn test
+      - run: npm run test
 
   deploy:
     <<: *defaults
     steps:
       - attach_workspace:
           at: ~/
+      - run: curl -ks -u$ARTIFACTORY_USER:$ARTIFACTORY_PASS "https://d2lartifacts.artifactoryonline.com/d2lartifacts/api/npm/npm-local/auth/d2l" -o .npmrc
       - deploy:
           name: Deploy To Artifactory
-          command: /bin/bash ./scripts/deploy_artifactory.sh $ARTIFACTORY_USER $ARTIFACTORY_PASS $CIRCLE_TAG
+          command: npm publish --registry "https://d2lartifacts.artifactoryonline.com/d2lartifacts/api/npm/npm-local/"
 
 workflows:
   version: 2
diff --git a/_circle.yml b/_circle.yml
deleted file mode 100644
index cd28643..0000000
--- a/_circle.yml
+++ /dev/null
@@ -1,19 +0,0 @@
-machine:
-  node:
-    version: 6.1.0
-dependencies:
-  override:
-    - yarn
-  cache_directories:
-    - ~/.cache/yarn
-
-test:
-  override:
-    - yarn test
-
-deployment:
-  release:
-    tag: /v[0-9]+(\.[0-9]+)*/
-    owner: Brightspace
-    commands:
-      - /bin/bash ./scripts/deploy_artifactory.sh $ARTIFACTORY_USER $ARTIFACTORY_PASS $CIRCLE_TAG
diff --git a/demo/d2l-assignment-editor.html b/demo/d2l-assignment-editor.html
index c57c38b..624ca1f 100644
--- a/demo/d2l-assignment-editor.html
+++ b/demo/d2l-assignment-editor.html
@@ -6,11 +6,11 @@
 
 		<title>d2l-assignment-editor demo</title>
 
-		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
 
-		<script type="module" src="../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
-		<script type="module" src="../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
-		<script type="module" src="../../d2l-button/d2l-button.js"></script>
+		<script type="module" src="../../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
+		<script type="module" src="../../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
+		<script type="module" src="../../../d2l-button/d2l-button.js"></script>
 		<script type="module" src="../d2l-assignment-editor.js"></script>
 		<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
 		<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
diff --git a/demo/d2l-assignment-viewer.html b/demo/d2l-assignment-viewer.html
index 1ee8f8f..3bf1ca8 100644
--- a/demo/d2l-assignment-viewer.html
+++ b/demo/d2l-assignment-viewer.html
@@ -6,12 +6,12 @@
 
 		<title>d2l-assignment-editor demo</title>
 
-		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
 
-		<script type="module" src="../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
-		<script type="module" src="../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
+		<script type="module" src="../../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
+		<script type="module" src="../../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
 		<script type="module" src="../d2l-assignment-viewer.js"></script>
-		<script type="module" src="../../d2l-button/d2l-button.js"></script>
+		<script type="module" src="../../../d2l-button/d2l-button.js"></script>
 		<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
 		<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 
diff --git a/package.json b/package.json
index 13e6196..d50449c 100644
--- a/package.json
+++ b/package.json
@@ -4,7 +4,7 @@
     "type": "git",
     "url": "https://github.com/BrightspaceUI/assignment-editor.git"
   },
-  "name": "d2l-assignments-ui",
+  "name": "@d2l/d2l-assignments-ui",
   "version": "2.41.0",
   "scripts": {
     "serve": "polymer serve",
diff --git a/scripts/deploy_artifactory.sh b/scripts/deploy_artifactory.sh
deleted file mode 100644
index d83e211..0000000
--- a/scripts/deploy_artifactory.sh
+++ /dev/null
@@ -1,18 +0,0 @@
-#!/bin/bash
-
-set -eu
-
-USER=$1
-PASS=$2
-TAG=$3
-
-echo $3
-
-if $CIRCLECI; then
-	sudo npm install -g artifactory-push
-else
-	npm install -g artifactory-push
-fi
-
-tar --exclude=.* --exclude=node_modules --exclude=bower_components --exclude=scripts --exclude=circle.yml --exclude=package.json --exclude=yarn.lock --exclude=src --exclude=app.html --exclude=sass --exclude=css --exclude=CONTRIBUTING.md -cvzf d2l-assignments-ui-$TAG.tar.gz *
-artifactory-push -f d2l-assignments-ui-$TAG.tar.gz -t https://d2lartifacts.artifactoryonline.com/d2lartifacts/simple/bower-local/d2l-assignments-ui/d2l-assignments-ui/d2l-assignments-ui-$TAG.tar.gz -u $USER -p $PASS
diff --git a/test/d2l-assignment-attachment-behavior_test.html b/test/d2l-assignment-attachment-behavior_test.html
index 2398ee3..5b45d0d 100644
--- a/test/d2l-assignment-attachment-behavior_test.html
+++ b/test/d2l-assignment-attachment-behavior_test.html
@@ -6,8 +6,8 @@
 
 		<title>d2l-assignment-attachment-behavior test</title>
 
-		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-		<script src="../../wct-browser-legacy/browser.js"></script>
+		<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../../wct-browser-legacy/browser.js"></script>
 
 		<script type="module" src="../test-resources/behavior-elements/assignment-attachment-behavior.js"></script>
 	</head>
diff --git a/test/d2l-assignment-editor_test.html b/test/d2l-assignment-editor_test.html
index 5daf17b..629c8d7 100644
--- a/test/d2l-assignment-editor_test.html
+++ b/test/d2l-assignment-editor_test.html
@@ -6,8 +6,8 @@
 
 	<title>d2l-assignment-editor test</title>
 
-	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-	<script src="../../wct-browser-legacy/browser.js"></script>
+	<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+	<script src="../../../wct-browser-legacy/browser.js"></script>
 
 	<script type="module" src="../d2l-assignment-editor.js"></script>
 
diff --git a/test/d2l-assignment-viewer_test.html b/test/d2l-assignment-viewer_test.html
index 14a6ded..19b8c0b 100644
--- a/test/d2l-assignment-viewer_test.html
+++ b/test/d2l-assignment-viewer_test.html
@@ -6,8 +6,8 @@
 
 	<title>d2l-assignment-viewer test</title>
 
-	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-	<script src="../../wct-browser-legacy/browser.js"></script>
+	<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+	<script src="../../../wct-browser-legacy/browser.js"></script>
 
 	<script type="module" src="../d2l-assignment-viewer.js"></script>
 

From 726ec09665708c2c723783269c240093dbb8e2d9 Mon Sep 17 00:00:00 2001
From: Vincent Wong <Vincent.Wong@D2L.com>
Date: Mon, 14 Jan 2019 17:01:07 -0800
Subject: [PATCH 4/4] Fix lint issues

---
 .eslintignore                                 |    3 +-
 .eslintrc.json                                |    4 +-
 .vscode/launch.json                           |    3 -
 d2l-assignment-attachment-behavior.js         |    2 +-
 d2l-assignment-behavior.js                    |    2 +-
 d2l-assignment-viewer-data.js                 |    4 +-
 d2l-bubble-styles.js                          |    2 +-
 d2l-field-styles.js                           |    2 +-
 demo/d2l-assignment-editor.html               |   12 +-
 demo/d2l-assignment-viewer.html               |    2 +-
 localize-behavior.js                          |    2 +-
 package.json                                  |    6 +-
 ...l-assignment-attachment-behavior_test.html |    2 -
 test/d2l-assignment-editor_test.html          | 1332 ++++++++---------
 test/d2l-assignment-viewer_test.html          |  821 +++++-----
 test/index.html                               |    4 +-
 16 files changed, 1095 insertions(+), 1108 deletions(-)

diff --git a/.eslintignore b/.eslintignore
index 2746b53..7c6cebf 100644
--- a/.eslintignore
+++ b/.eslintignore
@@ -1,3 +1,4 @@
-gulpfile.js
+gulpfile.js
 test/acceptance/*
 reports
+test/fixtures/*
\ No newline at end of file
diff --git a/.eslintrc.json b/.eslintrc.json
index 95346a6..acb3499 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -1,6 +1,6 @@
 {
-  "extends": "brightspace/polymer-3-config",
+  "extends": "brightspace/wct-polymer-3-config",
   "globals": {
-	  "moment": false
+    "moment": false
   }
 }
diff --git a/.vscode/launch.json b/.vscode/launch.json
index f9ab8be..4c558cc 100644
--- a/.vscode/launch.json
+++ b/.vscode/launch.json
@@ -1,7 +1,4 @@
 {
-    // Use IntelliSense to learn about possible Node.js debug attributes.
-    // Hover to view descriptions of existing attributes.
-    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
     "version": "0.2.0",
     "configurations": [
         {
diff --git a/d2l-assignment-attachment-behavior.js b/d2l-assignment-attachment-behavior.js
index 4d90c92..b576a3d 100644
--- a/d2l-assignment-attachment-behavior.js
+++ b/d2l-assignment-attachment-behavior.js
@@ -1,4 +1,4 @@
-import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import '@polymer/polymer/polymer-legacy.js';
 /** @polymerBehavior window.D2L.AssignmentAttachmentBehavior*/
 var AttachmentBehavior = {
 	linkToAttachment: function(linkEntity) {
diff --git a/d2l-assignment-behavior.js b/d2l-assignment-behavior.js
index a3a819c..9fac563 100644
--- a/d2l-assignment-behavior.js
+++ b/d2l-assignment-behavior.js
@@ -1,4 +1,4 @@
-import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import '@polymer/polymer/polymer-legacy.js';
 import 'd2l-fetch/d2l-fetch.js';
 import 'whatwg-fetch/fetch.js';
 /** @polymerBehavior window.D2L.AssignmentBehavior*/
diff --git a/d2l-assignment-viewer-data.js b/d2l-assignment-viewer-data.js
index aa86bef..b689d45 100644
--- a/d2l-assignment-viewer-data.js
+++ b/d2l-assignment-viewer-data.js
@@ -143,7 +143,7 @@ Polymer({
 							}
 
 							var fileAttachments = _this.resource.getSubEntityByClass('attachments');
-							_this.fileAttachmentList = _this._populateFileAttachments( fileAttachments );
+							_this.fileAttachmentList = _this._populateFileAttachments(fileAttachments);
 							var submissionStatus = _this.resource.getSubEntityByClass('submission-status');
 							if (submissionStatus) {
 								_this.graded = submissionStatus.hasClass('graded');
@@ -288,7 +288,7 @@ Polymer({
 		if (fileAttachments) {
 			var files = fileAttachments.getSubEntitiesByClass('file');
 			if (files) {
-				for (var i = 0; i < files.length; i++ ) {
+				for (var i = 0; i < files.length; i++) {
 					var attachment = {
 						type: 'Document',
 						id: files[i].getLinksByRel('self')[0].href,
diff --git a/d2l-bubble-styles.js b/d2l-bubble-styles.js
index 091be7b..aff77b0 100644
--- a/d2l-bubble-styles.js
+++ b/d2l-bubble-styles.js
@@ -1,4 +1,4 @@
-import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import '@polymer/polymer/polymer-legacy.js';
 import 'd2l-colors/d2l-colors.js';
 const $_documentContainer = document.createElement('template');
 
diff --git a/d2l-field-styles.js b/d2l-field-styles.js
index c643250..2b55ba3 100644
--- a/d2l-field-styles.js
+++ b/d2l-field-styles.js
@@ -1,4 +1,4 @@
-import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import '@polymer/polymer/polymer-legacy.js';
 import 'd2l-colors/d2l-colors.js';
 const $_documentContainer = document.createElement('template');
 
diff --git a/demo/d2l-assignment-editor.html b/demo/d2l-assignment-editor.html
index 624ca1f..4409730 100644
--- a/demo/d2l-assignment-editor.html
+++ b/demo/d2l-assignment-editor.html
@@ -42,22 +42,22 @@
 import '../d2l-assignment-editor.js';
 window.printFormData = function(event) {
 	if (event.detail.entries) {
-		var output = "";
+		var output = '';
 		for (var pair of event.detail.entries()) {
-			output += pair[0]+ ': ' + pair[1] + '<br>';
+			output += pair[0] + ': ' + pair[1] + '<br>';
 		}
 		var console = document.getElementById('output');
 		console.innerHTML = output;
 		var editor = document.getElementById('editor');
-		editor.removeEventListener('d2l-assignment-save-failed', printFormData);
+		editor.removeEventListener('d2l-assignment-save-failed', window.printFormData);
 	}
-}
+};
 
 window.save = function() {
 	var editor = document.getElementById('editor');
-	editor.addEventListener('d2l-assignment-save-failed', printFormData);
+	editor.addEventListener('d2l-assignment-save-failed', window.printFormData);
 	editor.save();
-}
+};
 
 document.body.addEventListener('dom-change', function loaded() {
 	document.body.removeEventListener('dom-change', loaded);
diff --git a/demo/d2l-assignment-viewer.html b/demo/d2l-assignment-viewer.html
index 3bf1ca8..15d9998 100644
--- a/demo/d2l-assignment-viewer.html
+++ b/demo/d2l-assignment-viewer.html
@@ -39,7 +39,7 @@
 window.toggleInstructorView = function() {
 	document.getElementById('viewer').canViewAllSubmissions =
 		!document.getElementById('viewer').canViewAllSubmissions;
-}
+};
 </script>
 		<script type="module">
 const $_documentContainer = document.createElement('template');
diff --git a/localize-behavior.js b/localize-behavior.js
index 699c960..6e572dd 100644
--- a/localize-behavior.js
+++ b/localize-behavior.js
@@ -1,4 +1,4 @@
-import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import '@polymer/polymer/polymer-legacy.js';
 import 'd2l-localize-behavior/d2l-localize-behavior.js';
 window.D2L = window.D2L || {};
 window.D2L.PolymerBehaviors = window.D2L.PolymerBehaviors || {};
diff --git a/package.json b/package.json
index d50449c..0f674f5 100644
--- a/package.json
+++ b/package.json
@@ -27,9 +27,9 @@
     "babel-eslint": "^10.0.1",
     "bower": "^1.7.7",
     "bower-art-resolver": "^2.0.8",
-    "eslint": "^3.7.1",
-    "eslint-config-brightspace": "^0.2.4",
-    "eslint-plugin-html": "^1.5.3",
+    "eslint": "^4.19.1",
+    "eslint-config-brightspace": "^0.4.0",
+    "eslint-plugin-html": "^4.0.5",
     "gulp": "^3.9.1",
     "gulp-autoprefixer": "^4.0.0",
     "gulp-bump": "^2.7.0",
diff --git a/test/d2l-assignment-attachment-behavior_test.html b/test/d2l-assignment-attachment-behavior_test.html
index 5b45d0d..ff5bdb1 100644
--- a/test/d2l-assignment-attachment-behavior_test.html
+++ b/test/d2l-assignment-attachment-behavior_test.html
@@ -26,8 +26,6 @@
 		var linkHref = 'linkHref';
 		var deleteAction = 'deleteAction';
 		var linkName = 'linkName';
-		var linkType = 'linkType';
-
 
 		var link = {
 			getActionByName: sinon.stub().returns(deleteAction),
diff --git a/test/d2l-assignment-editor_test.html b/test/d2l-assignment-editor_test.html
index 629c8d7..c30bc74 100644
--- a/test/d2l-assignment-editor_test.html
+++ b/test/d2l-assignment-editor_test.html
@@ -31,867 +31,863 @@
 	<script type="module">
 	import '../d2l-assignment-editor.js';
 	import SirenParse from 'siren-parser';
-function getAttachment() {
-	return {
-		type: 'Document',
-		name: 'name',
-		id: 'testId',
-		url: 'testUrl',
-		isDeleted: false,
-		file: new File([], 'fileName'),
-	};
-}
-function getExistingAttachment() {
-	return {
-		type: 'Document',
-		name: 'name',
-		id: 'testId',
-		url: 'testUrl',
-		isDeleted: false,
-		deleteAction: {
-			href: 'testDeleteUrl',
-			method: 'DELETE'
-		},
-	};
-}
-function getSubmissionOptions() {
-	var actions = window.testFixtures.assignmentHomeCanCreate.actions;
-	var quickCreate = actions.find(function(action){ 
-		return action.name == "quick-create-folder";
-	});
-
-	var availableSubmssionOptions = quickCreate.fields.find(function(field) {
-		return field.name == "submissionType";
-	});
-
-	var availableCompletionOptions = quickCreate.fields.find(function(field) {
-		return field.name == "completionType";
-	});
-
-	return {
-		availableSubmssionOptions: availableSubmssionOptions,
-		availableCompletionOptions: availableCompletionOptions
-	};
-}
-
-describe('d2l-assignment-editor', function() {
-	var editor;
-	var fetch;
-
-	afterEach(() => {
-		fetch && fetch.restore();
-	});
-
-	describe('when loading new editor and can create', function() {
-		beforeEach(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
-				}
-			});
-			window.d2lfetch.fetch.returns(promise);
-		});
-
-		it('is loaded if can create assignments', function(done) {
-			var editor = fixture('fromUrl');
-			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-				if (done.isDone) return;
-				assert.equal(event.detail, true);
+	function getAttachment() {
+		return {
+			type: 'Document',
+			name: 'name',
+			id: 'testId',
+			url: 'testUrl',
+			isDeleted: false,
+			file: new File([], 'fileName'),
+		};
+	}
+	function getExistingAttachment() {
+		return {
+			type: 'Document',
+			name: 'name',
+			id: 'testId',
+			url: 'testUrl',
+			isDeleted: false,
+			deleteAction: {
+				href: 'testDeleteUrl',
+				method: 'DELETE'
+			},
+		};
+	}
+	function getSubmissionOptions() {
+		var actions = window.testFixtures.assignmentHomeCanCreate.actions;
+		var quickCreate = actions.find(function(action) {
+			return action.name === 'quick-create-folder';
+		});
+
+		var availableSubmssionOptions = quickCreate.fields.find(function(field) {
+			return field.name === 'submissionType';
+		});
+
+		var availableCompletionOptions = quickCreate.fields.find(function(field) {
+			return field.name === 'completionType';
+		});
+
+		return {
+			availableSubmssionOptions: availableSubmssionOptions,
+			availableCompletionOptions: availableCompletionOptions
+		};
+	}
+
+	describe('d2l-assignment-editor', function() {
+		var editor;
+		var fetch;
 
-				done.isDone = true;
-				done();
-			});
+		afterEach(() => {
+			fetch && fetch.restore();
 		});
-	});
 
-	describe('when loading new editor and cannot create', function() {
-		describe('assignments tool loaded', function() {
+		describe('when loading new editor and can create', function() {
 			beforeEach(function() {
 				fetch = sinon.stub(window.d2lfetch, 'fetch');
 				var promise = Promise.resolve({
 					ok: true,
 					json: function() {
-						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCannotCreate));
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
 					}
 				});
 				window.d2lfetch.fetch.returns(promise);
 			});
 
-			it('is not loaded if cannot create assignments', function(done) {
+			it('is loaded if can create assignments', function(done) {
 				var editor = fixture('fromUrl');
 				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					assert.equal(event.detail, false);
+					if (done.isDone) return;
+					assert.equal(event.detail, true);
+
+					done.isDone = true;
 					done();
 				});
 			});
 		});
 
-		describe('assignments tool disabled', function() {
-			beforeEach(function() {
-				fetch = sinon.stub(window.d2lfetch, 'fetch');
-				var promise = Promise.resolve({
-					ok: false,
+		describe('when loading new editor and cannot create', function() {
+			describe('assignments tool loaded', function() {
+				beforeEach(function() {
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
+					var promise = Promise.resolve({
+						ok: true,
+						json: function() {
+							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCannotCreate));
+						}
+					});
+					window.d2lfetch.fetch.returns(promise);
 				});
-				window.d2lfetch.fetch.returns(promise);
-			});
 
-			it('is not loaded', function(done) {
-				var editor = fixture('fromUrl');
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					assert.equal(event.detail, false);
-					done();
+				it('is not loaded if cannot create assignments', function(done) {
+					var editor = fixture('fromUrl');
+					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+						assert.equal(event.detail, false);
+						done();
+					});
 				});
 			});
-		});
-	});
 
-	describe('assignments validation errors', function() {
-		describe('name validation error', function() {
-			var editor;
-			beforeEach(function() {
-				editor = fixture('manual');
-				editor.$.instructions.value = 'In a while crocodile';
-				editor.$.dueDate.value = '2017-10-10T05:05:05.555';
-			});
+			describe('assignments tool disabled', function() {
+				beforeEach(function() {
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
+					var promise = Promise.resolve({
+						ok: false,
+					});
+					window.d2lfetch.fetch.returns(promise);
+				});
 
-			it('shows validation error for invalid field', function(done) {
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#name-error').className).to.contain('d2l-bubble-show');
-					done();
+				it('is not loaded', function(done) {
+					var editor = fixture('fromUrl');
+					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+						assert.equal(event.detail, false);
+						done();
+					});
 				});
 			});
+		});
 
-			it('sets invalid state on field', function(done) {
-				editor.save();
-				flush(function() {
-					expect(editor.$.name.hasAttribute('aria-invalid')).to.be.true;
-					done();
+		describe('assignments validation errors', function() {
+			describe('name validation error', function() {
+				var editor;
+				beforeEach(function() {
+					editor = fixture('manual');
+					editor.$.instructions.value = 'In a while crocodile';
+					editor.$.dueDate.value = '2017-10-10T05:05:05.555';
 				});
-			});
 
-			it('clears error state on typing', function(done) {
-				editor.save();
-				flush(function() {
-					editor.name = "Fix me";
+				it('shows validation error for invalid field', function(done) {
+					editor.save();
 					flush(function() {
-						expect(editor.$.name.hasAttribute('aria-invaliid')).to.be.false;
-						expect(editor.$$('#name-error').className).not.to.contain('d2l-bubble-show');
+						expect(editor.$$('#name-error').className).to.contain('d2l-bubble-show');
 						done();
 					});
 				});
-			});
-		});
 
-		describe('maximumGrade validation error', function() {
-			var editor;
-			beforeEach(function() {
-				editor = fixture('manual');
-				editor.addToGrades = true;
-				editor.$.name.value = 'See you later alligator';
-				editor.$.instructions.value = 'In a while crocodile';
-				editor.$.dueDate.value = '2017-10-10T05:05:05.555';
-				editor.$.maximumGrade.value = '';
-			});
+				it('sets invalid state on field', function(done) {
+					editor.save();
+					flush(function() {
+						expect(editor.$.name.hasAttribute('aria-invalid')).to.be.true;
+						done();
+					});
+				});
 
-			it('shows validation error for invalid field, empty input', function(done) {
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-					done();
+				it('clears error state on typing', function(done) {
+					editor.save();
+					flush(function() {
+						editor.name = 'Fix me';
+						flush(function() {
+							expect(editor.$.name.hasAttribute('aria-invaliid')).to.be.false;
+							expect(editor.$$('#name-error').className).not.to.contain('d2l-bubble-show');
+							done();
+						});
+					});
 				});
 			});
 
-			it('shows validation error for invalid field, number too small', function(done) {
-				editor.$.maximumGrade.value = '0.001';
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-					done();
+			describe('maximumGrade validation error', function() {
+				var editor;
+				beforeEach(function() {
+					editor = fixture('manual');
+					editor.addToGrades = true;
+					editor.$.name.value = 'See you later alligator';
+					editor.$.instructions.value = 'In a while crocodile';
+					editor.$.dueDate.value = '2017-10-10T05:05:05.555';
+					editor.$.maximumGrade.value = '';
 				});
-			});
 
-			it('shows validation error for invalid field, number too large', function(done) {
-				editor.$.maximumGrade.value = '10000000000';
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-					done();
+				it('shows validation error for invalid field, empty input', function(done) {
+					editor.save();
+					flush(function() {
+						expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+						done();
+					});
 				});
-			});
 
-			it('shows validation error for invalid field, not a number', function(done) {
-				editor.$.maximumGrade.value = 'D2L';
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-					done();
+				it('shows validation error for invalid field, number too small', function(done) {
+					editor.$.maximumGrade.value = '0.001';
+					editor.save();
+					flush(function() {
+						expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+						done();
+					});
 				});
-			});
 
-			it('sets invalid state on field', function(done) {
-				editor.save();
-				flush(function() {
-					expect(editor.$.maximumGrade.hasAttribute('aria-invalid')).to.be.true;
-					done();
+				it('shows validation error for invalid field, number too large', function(done) {
+					editor.$.maximumGrade.value = '10000000000';
+					editor.save();
+					flush(function() {
+						expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+						done();
+					});
 				});
-			});
 
-			it('clears error state on typing', function(done) {
-				editor.save();
-				flush(function() {
-					editor.maximumGrade = "1";
+				it('shows validation error for invalid field, not a number', function(done) {
+					editor.$.maximumGrade.value = 'D2L';
+					editor.save();
 					flush(function() {
-						expect(editor.$.maximumGrade.hasAttribute('aria-invaliid')).to.be.false;
-						expect(editor.$$('#maximum-grade-error').className).not.to.contain('d2l-bubble-show');
+						expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
 						done();
 					});
 				});
-			});
-		});
-	});
 
-	describe('assignments save new', function() {
-		beforeEach(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
+				it('sets invalid state on field', function(done) {
+					editor.save();
+					flush(function() {
+						expect(editor.$.maximumGrade.hasAttribute('aria-invalid')).to.be.true;
+						done();
+					});
+				});
 
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assigmentNewFolder));
-				}
+				it('clears error state on typing', function(done) {
+					editor.save();
+					flush(function() {
+						editor.maximumGrade = '1';
+						flush(function() {
+							expect(editor.$.maximumGrade.hasAttribute('aria-invaliid')).to.be.false;
+							expect(editor.$$('#maximum-grade-error').className).not.to.contain('d2l-bubble-show');
+							done();
+						});
+					});
+				});
 			});
-			window.d2lfetch.fetch.returns(promise);
 		});
 
-		it('save succeeds', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
-
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'POST')));
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+		describe('assignments save new', function() {
+			beforeEach(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					assert(data.includes("Testing 123"));
-					done();
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assigmentNewFolder));
+					}
 				});
+				window.d2lfetch.fetch.returns(promise);
 			});
-			editor.name = "Testing 123";
-			editor.save();
-		});
-	});
-
-	describe('assignments checkDirty', function() {
-		var editor;
-		beforeEach(function() {
-			editor = fixture('manual');
-			editor.$.data.resource
-				= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
-
-			editor.name = 'How now brown cow';
-			editor.instructions = 'In a while crocodile';
-			editor.dueDate = '2017-10-10T05:05:05.555';
-			editor.addToGrades = true;
-			editor.maximumGrade = '10';
-			editor.existingAttachments = [ getExistingAttachment() ];
-			editor.attachmentsToSave = [];
-
-			editor.$.data.getInitialValues = function() {
-				return {
-					name: 'How now brown cow',
-					instructions: 'In a while crocodile',
-					dueDate: '2017-10-10T05:05:05.555',
-					outOf: '10',
-					addToGrades: true,
-					existingAttachments: [ getExistingAttachment() ],
-					attachmentsToSave: []
-				}
-			}
-		});
 
-		it('returns false when the nothing is changed', function() {
-			expect(editor.checkDirty()).to.be.false;
-		});
+			it('save succeeds', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
 
-		it('returns true when the name is changed', function() {
-			editor.name = 'CHANGEDNAME';
-			expect(editor.checkDirty()).to.be.true;
-		});
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'POST')));
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-		it('returns true when the instructions are changed', function() {
-			editor.instructions = 'CHANGEDINSTRUCTIONS';
-			expect(editor.checkDirty()).to.be.true;
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						assert(data.includes('Testing 123'));
+						done();
+					});
+				});
+				editor.name = 'Testing 123';
+				editor.save();
+			});
 		});
 
-		it('returns true when the dueDate is changed', function() {
-			editor.dueDate = '2017-10-10T05:05:05.123';
-			expect(editor.checkDirty()).to.be.true;
-		});
+		describe('assignments checkDirty', function() {
+			var editor;
+			beforeEach(function() {
+				editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
 
-		it('returns true when addToGrades is changed', function() {
-			editor.addToGrades = false;
-			expect(editor.checkDirty()).to.be.true;
-		});
+				editor.name = 'How now brown cow';
+				editor.instructions = 'In a while crocodile';
+				editor.dueDate = '2017-10-10T05:05:05.555';
+				editor.addToGrades = true;
+				editor.maximumGrade = '10';
+				editor.existingAttachments = [ getExistingAttachment() ];
+				editor.attachmentsToSave = [];
+
+				editor.$.data.getInitialValues = function() {
+					return {
+						name: 'How now brown cow',
+						instructions: 'In a while crocodile',
+						dueDate: '2017-10-10T05:05:05.555',
+						outOf: '10',
+						addToGrades: true,
+						existingAttachments: [ getExistingAttachment() ],
+						attachmentsToSave: []
+					};
+				};
+			});
 
-		it('returns true when the maximum grade is changed', function() {
-			editor.maximumGrade = '100';
-			expect(editor.checkDirty()).to.be.true;
-		});
+			it('returns false when the nothing is changed', function() {
+				expect(editor.checkDirty()).to.be.false;
+			});
 
-		it('returns true when any attachments are in the removed state', function() {
-			editor.attachmentsToSave = [ getAttachment() ];
-			expect(editor.checkDirty()).to.be.true;
-		});
+			it('returns true when the name is changed', function() {
+				editor.name = 'CHANGEDNAME';
+				expect(editor.checkDirty()).to.be.true;
+			});
 
-		it('returns true when there are any new attachments added', function() {
-			var deletedAttachment = getExistingAttachment();
-			deletedAttachment.isDeleted = true;
-			editor.existingAttachments = [ deletedAttachment ];
-			expect(editor.checkDirty()).to.be.true;
-		});
-	});
+			it('returns true when the instructions are changed', function() {
+				editor.instructions = 'CHANGEDINSTRUCTIONS';
+				expect(editor.checkDirty()).to.be.true;
+			});
 
-	describe('assignments clear', function() {
-		var editor;
-		beforeEach(function() {
-			editor = fixture('manual');
-			editor.$.data.resource
-				= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
-
-			editor.name = 'How now brown cow';
-			editor.instructions = 'In a while crocodile';
-			editor.dueDate = '2017-10-10T05:05:05.555';
-			editor.addToGrades = true;
-			editor.maximumGrade = '10';
-
-			expect(editor.$.name.value).to.equal('How now brown cow');
-			expect(editor.$.instructions.value).to.equal('In a while crocodile');
-			expect(editor.$.dueDate.datetime).to.equal('2017-10-10T05:05:05.555');
-			expect(editor.$.addToGrades.checked).to.be.true;
-			expect(editor.$.maximumGrade.value).to.equal('10');
-		});
+			it('returns true when the dueDate is changed', function() {
+				editor.dueDate = '2017-10-10T05:05:05.123';
+				expect(editor.checkDirty()).to.be.true;
+			});
 
-		it('clears all fields and sets focus', function(done) {
-			editor.clear();
-			flush(function() {
-				expect(editor.$.name.value).to.be.empty;
-				expect(editor.$.instructions.value).to.be.empty;
-				expect(editor.$.dueDate.datetime).to.be.null;
-				expect(editor.$.addToGrades.checked).to.not.be.true;
-				expect(editor.$.maximumGrade.value).to.equal('100');
-				flush(function() {
-					expect(document.activeElement).to.equal(editor.$.name);
-				});
-				done();
+			it('returns true when addToGrades is changed', function() {
+				editor.addToGrades = false;
+				expect(editor.checkDirty()).to.be.true;
 			});
 
-		});
+			it('returns true when the maximum grade is changed', function() {
+				editor.maximumGrade = '100';
+				expect(editor.checkDirty()).to.be.true;
+			});
 
-		it('clears all fields and skips focus', function(done) {
-			editor.clear(true);
-			flush(function() {
-				expect(editor.$.name.value).to.be.empty;
-				expect(editor.$.instructions.value).to.be.empty;
-				expect(editor.$.dueDate.datetime).to.be.null;
-				expect(editor.$.addToGrades.checked).to.not.be.true;
-				expect(editor.$.maximumGrade.value).to.equal('100');
-				expect(document.activeElement).to.not.equal(editor.$.name);
-				done();
+			it('returns true when any attachments are in the removed state', function() {
+				editor.attachmentsToSave = [ getAttachment() ];
+				expect(editor.checkDirty()).to.be.true;
 			});
-		});
-	});
 
-	describe('when loading existing assignment and can edit', function() {
-		beforeEach(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-				}
+			it('returns true when there are any new attachments added', function() {
+				var deletedAttachment = getExistingAttachment();
+				deletedAttachment.isDeleted = true;
+				editor.existingAttachments = [ deletedAttachment ];
+				expect(editor.checkDirty()).to.be.true;
 			});
-			window.d2lfetch.fetch.returns(promise);
 		});
 
-		it('is loaded if can edit assignments', function(done) {
-			var editor = fixture('fromUrl');
-			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-				if (done.isDone) return;
-				assert.equal(event.detail, true);
+		describe('assignments clear', function() {
+			var editor;
+			beforeEach(function() {
+				editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
+
+				editor.name = 'How now brown cow';
+				editor.instructions = 'In a while crocodile';
+				editor.dueDate = '2017-10-10T05:05:05.555';
+				editor.addToGrades = true;
+				editor.maximumGrade = '10';
 
-				done.isDone = true;
-				done();
+				expect(editor.$.name.value).to.equal('How now brown cow');
+				expect(editor.$.instructions.value).to.equal('In a while crocodile');
+				expect(editor.$.dueDate.datetime).to.equal('2017-10-10T05:05:05.555');
+				expect(editor.$.addToGrades.checked).to.be.true;
+				expect(editor.$.maximumGrade.value).to.equal('10');
 			});
-		});
 
-		it('populates existing fields', function(done) {
-			var editor = fixture('fromUrl');
-			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-				if (done.isDone) return;
+			it('clears all fields and sets focus', function(done) {
+				editor.clear();
 				flush(function() {
-					expect(editor.$.name.value).to.equal('Here is your new assignment');
-					expect(editor.$.instructions.value).to.equal('These are the instructions');
-					// Cannot do exact date comparisons until we introduce timezones - as will fail in CircleCI
-					// expect(editor.$.dueDate.value).to.equal('2017-12-31T12:59:00');
-					expect(editor.$.dueDate.datetime).to.not.be.empty;
+					expect(editor.$.name.value).to.be.empty;
+					expect(editor.$.instructions.value).to.be.empty;
+					expect(editor.$.dueDate.datetime).to.be.null;
+					expect(editor.$.addToGrades.checked).to.not.be.true;
+					expect(editor.$.maximumGrade.value).to.equal('100');
+					flush(function() {
+						expect(document.activeElement).to.equal(editor.$.name);
+					});
+					done();
+				});
 
-					done.isDone = true;
+			});
+
+			it('clears all fields and skips focus', function(done) {
+				editor.clear(true);
+				flush(function() {
+					expect(editor.$.name.value).to.be.empty;
+					expect(editor.$.instructions.value).to.be.empty;
+					expect(editor.$.dueDate.datetime).to.be.null;
+					expect(editor.$.addToGrades.checked).to.not.be.true;
+					expect(editor.$.maximumGrade.value).to.equal('100');
+					expect(document.activeElement).to.not.equal(editor.$.name);
 					done();
 				});
 			});
 		});
-	});
 
-	describe('when loading existing assignment and cannot edit', function() {
-		describe('assignments tool enabled', function() {
+		describe('when loading existing assignment and can edit', function() {
 			beforeEach(function() {
 				fetch = sinon.stub(window.d2lfetch, 'fetch');
-
 				var promise = Promise.resolve({
 					ok: true,
 					json: function() {
-						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
 					}
 				});
 				window.d2lfetch.fetch.returns(promise);
 			});
 
-			it('is not loaded if cannot edit assignments', function(done) {
+			it('is loaded if can edit assignments', function(done) {
 				var editor = fixture('fromUrl');
 				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					assert.equal(event.detail, false);
+					if (done.isDone) return;
+					assert.equal(event.detail, true);
+
+					done.isDone = true;
 					done();
 				});
 			});
-		});
-	});
 
-	describe('assignments edit', function() {
-		beforeEach(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			it('populates existing fields', function(done) {
+				var editor = fixture('fromUrl');
+				editor.addEventListener('d2l-assignment-editor-loaded', function() {
+					if (done.isDone) return;
+					flush(function() {
+						expect(editor.$.name.value).to.equal('Here is your new assignment');
+						expect(editor.$.instructions.value).to.equal('These are the instructions');
+						// Cannot do exact date comparisons until we introduce timezones - as will fail in CircleCI
+						// expect(editor.$.dueDate.value).to.equal('2017-12-31T12:59:00');
+						expect(editor.$.dueDate.datetime).to.not.be.empty;
 
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-				}
+						done.isDone = true;
+						done();
+					});
+				});
 			});
-			window.d2lfetch.fetch.returns(promise);
 		});
 
-		it('save succeeds', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor))
+		describe('when loading existing assignment and cannot edit', function() {
+			describe('assignments tool enabled', function() {
+				beforeEach(function() {
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+					var promise = Promise.resolve({
+						ok: true,
+						json: function() {
+							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
+						}
+					});
+					window.d2lfetch.fetch.returns(promise);
+				});
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					assert(data.includes("Testing 123"));
-					assert(data.includes("mission"));
-					done();
+				it('is not loaded if cannot edit assignments', function(done) {
+					var editor = fixture('fromUrl');
+					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+						assert.equal(event.detail, false);
+						done();
+					});
 				});
 			});
-			editor.name = "Testing 123";
-			editor.instructions = "This is your mission should you choose to accept it";
-			editor.save();
 		});
 
-		it('skips instructions if not updated', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor))
-
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+		describe('assignments edit', function() {
+			beforeEach(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					expect(data.includes("instructions")).to.be.false;
-					done();
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
+					}
 				});
+				window.d2lfetch.fetch.returns(promise);
 			});
-			editor.name = "Testing 123";
-			editor.instructions = "These are the instructions";
-			editor.save();
-		});
 
-		it('skips dueDate if not provided or updated', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructorNoDueDate))
+			it('save succeeds', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					expect(data.includes("dueDate")).to.be.false;
-					done();
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						assert(data.includes('Testing 123'));
+						assert(data.includes('mission'));
+						done();
+					});
 				});
+				editor.name = 'Testing 123';
+				editor.instructions = 'This is your mission should you choose to accept it';
+				editor.save();
 			});
-			editor.name = "Testing 123";
-			editor.instructions = "These are the instructions";
-			editor.save();
-		});
 
-		it('includes dueDate if reset', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor))
+			it('skips instructions if not updated', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					expect(data.includes("dueDate")).to.be.true;
-					done();
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						expect(data.includes('instructions')).to.be.false;
+						done();
+					});
 				});
+				editor.name = 'Testing 123';
+				editor.instructions = 'These are the instructions';
+				editor.save();
 			});
-			editor.name = "Testing 123";
-			editor.instructions = "These are the instructions";
-			editor.dueDate = "";
-			editor.save();
-		});
-	});
 
-	describe('add to grades checkbox', function() {
-		var editor;
-		var hiddenMaxGradeInput = 'div.maximum-grade-wrapper[hidden]';
+			it('skips dueDate if not provided or updated', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructorNoDueDate));
 
-		beforeEach(function() {
-			editor = fixture('manual');
-			expect(editor.$.addToGrades).to.not.be.null;
-		});
-
-		it('when addToGrades is true, checkbox should be checked and max grade field visible', function() {
-			editor.addToGrades = true;
-			expect(editor.$.addToGrades.checked).to.be.true;
-			expect(editor.$$(hiddenMaxGradeInput)).to.be.null;
-		});
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-		it('when addToGrades is false, checkbox should not be checked and max grade field hidden', function() {
-			editor.addToGrades = false;
-			expect(editor.$.addToGrades.checked).to.be.false;
-			expect(editor.$$(hiddenMaxGradeInput)).to.not.be.null;
-		});
-	});
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						expect(data.includes('dueDate')).to.be.false;
+						done();
+					});
+				});
+				editor.name = 'Testing 123';
+				editor.instructions = 'These are the instructions';
+				editor.save();
+			});
 
-	describe('addding file attachments', function() {
-		var editor;
+			it('includes dueDate if reset', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-		beforeEach(function() {
-			editor = fixture('manual');
-			editor.$.data._newFileToAttachment = sinon.stub().returns(getAttachment());
-		});
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-		describe('when making a new assignment', function() {
-			beforeEach(function() {
-				editor.isNewAssignment = true;
-			});
-			it('adds a file', function() {
-				editor.addFiles([ new File([], 'f1') ]);
-				expect(editor.attachmentsToSave.length).to.equal(1);
-			});
-			it('adds multiple files', function() {
-				editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
-				expect(editor.attachmentsToSave.length).to.equal(2);
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						expect(data.includes('dueDate')).to.be.true;
+						done();
+					});
+				});
+				editor.name = 'Testing 123';
+				editor.instructions = 'These are the instructions';
+				editor.dueDate = '';
+				editor.save();
 			});
 		});
 
-		describe('when editing an assignment', function() {
+		describe('add to grades checkbox', function() {
+			var editor;
+			var hiddenMaxGradeInput = 'div.maximum-grade-wrapper[hidden]';
+
 			beforeEach(function() {
-				editor.isNewAssignment = false;
+				editor = fixture('manual');
+				expect(editor.$.addToGrades).to.not.be.null;
 			});
-			it('adds a file', function() {
-				editor.addFiles([ new File([], 'f1') ]);
-				expect(editor.attachmentsToSave.length).to.equal(1);
+
+			it('when addToGrades is true, checkbox should be checked and max grade field visible', function() {
+				editor.addToGrades = true;
+				expect(editor.$.addToGrades.checked).to.be.true;
+				expect(editor.$$(hiddenMaxGradeInput)).to.be.null;
 			});
-			it('adds multiple files', function() {
-				editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
-				expect(editor.attachmentsToSave.length).to.equal(2);
+
+			it('when addToGrades is false, checkbox should not be checked and max grade field hidden', function() {
+				editor.addToGrades = false;
+				expect(editor.$.addToGrades.checked).to.be.false;
+				expect(editor.$$(hiddenMaxGradeInput)).to.not.be.null;
 			});
 		});
-	});
-	describe('removing an attachment', function() {
-		var editor;
 
-		beforeEach(function() {
-			editor = fixture('manual');
-		});
+		describe('addding file attachments', function() {
+			var editor;
 
-		describe('when making a new assignment', function() {
 			beforeEach(function() {
-				editor.isNewAssignment = true;
+				editor = fixture('manual');
+				editor.$.data._newFileToAttachment = sinon.stub().returns(getAttachment());
 			});
 
-			it('removes the attachment from the view', function() {
-				editor.attachmentsToSave = [ getAttachment() ];
-				var elementModel = {
-					item: editor.attachmentsToSave[0],
-					set: sinon.stub()
-				};
-				editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+			describe('when making a new assignment', function() {
+				beforeEach(function() {
+					editor.isNewAssignment = true;
+				});
+				it('adds a file', function() {
+					editor.addFiles([ new File([], 'f1') ]);
+					expect(editor.attachmentsToSave.length).to.equal(1);
+				});
+				it('adds multiple files', function() {
+					editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
+					expect(editor.attachmentsToSave.length).to.equal(2);
+				});
+			});
 
-				expect(editor.attachmentsToSave.length).to.equal(1);
-				editor._onAttachmentRemoved({
-					target: editor.$$('d2l-attachment')
+			describe('when editing an assignment', function() {
+				beforeEach(function() {
+					editor.isNewAssignment = false;
+				});
+				it('adds a file', function() {
+					editor.addFiles([ new File([], 'f1') ]);
+					expect(editor.attachmentsToSave.length).to.equal(1);
+				});
+				it('adds multiple files', function() {
+					editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
+					expect(editor.attachmentsToSave.length).to.equal(2);
 				});
-				expect(editor.attachmentsToSave.length).to.equal(0);
 			});
 		});
+		describe('removing an attachment', function() {
+			var editor;
 
-		describe('when editing an assignment', function() {
 			beforeEach(function() {
-				editor.isNewAssignment = false;
+				editor = fixture('manual');
 			});
-			it('sets a new attachment to "undo" state', function(done) {
-				editor.attachmentsToSave = [ getAttachment() ];
-				var elementModel = {
-					item: editor.attachmentsToSave[0],
-					set: sinon.stub()
-				};
-				editor.$.attachments.modelForElement = sinon.stub().returns( elementModel );
-				editor._onAttachmentRemoved({
-					target: editor.$$('d2l-attachment')
+
+			describe('when making a new assignment', function() {
+				beforeEach(function() {
+					editor.isNewAssignment = true;
 				});
 
-				expect(editor.existingAttachments.length).to.equal(0);
-				expect(editor.attachmentsToSave.length).to.equal(1);
-				expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
-				done();
-			});
-			it('sets an existing attachment to "undo" state', function() {
-				editor.existingAttachments = [ getExistingAttachment() ];
-				var elementModel = {
-					item: editor.existingAttachments[0],
-					set: sinon.stub()
-				};
-				editor.$.attachments.modelForElement = sinon.stub().returns( elementModel );
-				editor._onAttachmentRemoved({
-					target: editor.$$('d2l-attachment')
+				it('removes the attachment from the view', function() {
+					editor.attachmentsToSave = [ getAttachment() ];
+					var elementModel = {
+						item: editor.attachmentsToSave[0],
+						set: sinon.stub()
+					};
+					editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+
+					expect(editor.attachmentsToSave.length).to.equal(1);
+					editor._onAttachmentRemoved({
+						target: editor.$$('d2l-attachment')
+					});
+					expect(editor.attachmentsToSave.length).to.equal(0);
 				});
-				expect(editor.attachmentsToSave.length).to.equal(0);
-				expect(editor.existingAttachments.length).to.equal(1);
-				expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
 			});
-		});
-	});
 
-	describe('saving an assignment', function() {
-		var editor,
-			attachments,
-			data,
-			savePromise = 'savePromise',
-			deletePromise = 'deletePromise';
-
-		beforeEach(function() {
-			editor = fixture('manual');
-			data = editor.$.data;
-			attachments = {
-				hasActionByName: sinon.stub().returns(true),
-				getActionByName: sinon.stub().returns('action')
-			};
-			data._saveFile = sinon.stub().returns(savePromise);
-			data._removeFile = sinon.stub().returns(deletePromise);
-		});
+			describe('when editing an assignment', function() {
+				beforeEach(function() {
+					editor.isNewAssignment = false;
+				});
+				it('sets a new attachment to "undo" state', function(done) {
+					editor.attachmentsToSave = [ getAttachment() ];
+					var elementModel = {
+						item: editor.attachmentsToSave[0],
+						set: sinon.stub()
+					};
+					editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+					editor._onAttachmentRemoved({
+						target: editor.$$('d2l-attachment')
+					});
 
-		it('adds all the new files', function() {
-			var attachment = getAttachment();
-			var attachmentsToSave = [ attachment ];
-			var existingAttachments = [];
-			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-			expect(promiseArray.length).to.equal(1);
-			expect(promiseArray[0]).to.equal(savePromise);
-		});
-		it('does not add or delete any files that are new and marked as removed', function() {
-			var attachment = getAttachment();
-			attachment.isDeleted = true;
-			var attachmentsToSave = [ attachment ];
-			var existingAttachments = [];
-			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-			expect(promiseArray.length).to.equal(0);
-		});
-		it('deletes all the removed files', function() {
-			var attachment = getExistingAttachment();
-			attachment.isDeleted = true;
-			var attachmentsToSave = [];
-			var existingAttachments = [ attachment ];
-			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-			expect(promiseArray.length).to.equal(1);
-			expect(promiseArray[0]).to.equal(deletePromise);
+					expect(editor.existingAttachments.length).to.equal(0);
+					expect(editor.attachmentsToSave.length).to.equal(1);
+					expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
+					done();
+				});
+				it('sets an existing attachment to "undo" state', function() {
+					editor.existingAttachments = [ getExistingAttachment() ];
+					var elementModel = {
+						item: editor.existingAttachments[0],
+						set: sinon.stub()
+					};
+					editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+					editor._onAttachmentRemoved({
+						target: editor.$$('d2l-attachment')
+					});
+					expect(editor.attachmentsToSave.length).to.equal(0);
+					expect(editor.existingAttachments.length).to.equal(1);
+					expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
+				});
+			});
 		});
-	});
-
-	describe('generating attachment objects', function() {
-		var editor;
 
-		beforeEach(function() {
-			editor = fixture('manual');
-		});
+		describe('saving an assignment', function() {
+			var editor,
+				attachments,
+				data,
+				savePromise = 'savePromise',
+				deletePromise = 'deletePromise';
 
-		it('generates the correct attachment object from a new "File" object', function() {
-			var objectUrl = 'objectUrl';
-			var fileName = 'fileName';
-			URL.createObjectURL = sinon.stub().returns(objectUrl);
-			var newFile = new File([], fileName);
-			var createdAttachment = editor.$.data._newFileToAttachment(newFile);
-
-			expect(createdAttachment).to.deep.include({
-				type: 'Document',
-				name: fileName,
-				id: objectUrl,
-				url: objectUrl,
-				file: newFile,
-				isDeleted: false
-			});
-		});
+			beforeEach(function() {
+				editor = fixture('manual');
+				data = editor.$.data;
+				attachments = {
+					hasActionByName: sinon.stub().returns(true),
+					getActionByName: sinon.stub().returns('action')
+				};
+				data._saveFile = sinon.stub().returns(savePromise);
+				data._removeFile = sinon.stub().returns(deletePromise);
+			});
+
+			it('adds all the new files', function() {
+				var attachment = getAttachment();
+				var attachmentsToSave = [ attachment ];
+				var existingAttachments = [];
+				var promiseArray = data._getAddDeletePromises(attachments, attachmentsToSave, existingAttachments);
+				expect(promiseArray.length).to.equal(1);
+				expect(promiseArray[0]).to.equal(savePromise);
+			});
+			it('does not add or delete any files that are new and marked as removed', function() {
+				var attachment = getAttachment();
+				attachment.isDeleted = true;
+				var attachmentsToSave = [ attachment ];
+				var existingAttachments = [];
+				var promiseArray = data._getAddDeletePromises(attachments, attachmentsToSave, existingAttachments);
+				expect(promiseArray.length).to.equal(0);
+			});
+			it('deletes all the removed files', function() {
+				var attachment = getExistingAttachment();
+				attachment.isDeleted = true;
+				var attachmentsToSave = [];
+				var existingAttachments = [ attachment ];
+				var promiseArray = data._getAddDeletePromises(attachments, attachmentsToSave, existingAttachments);
+				expect(promiseArray.length).to.equal(1);
+				expect(promiseArray[0]).to.equal(deletePromise);
+			});
+		});
+
+		describe('generating attachment objects', function() {
+			var editor;
 
-		it('generates the correct attachment object from file attachment returned from HM', function() {
-			var fileHref = 'fileHref';
-			var deleteAction = 'deleteAction';
-			var fileName = 'fileName';
-			var fileType = 'fileType';
-
-			var file = {
-				getLinkByRel: sinon.stub().returns({ href: fileHref }),
-				getActionByName: sinon.stub().returns(deleteAction),
-				properties: {
-					name: fileName
-				}
-			};
-
-			var createdAttachment = editor.$.data._existingFileToAttachment(file);
-			expect(createdAttachment).to.deep.include({
-				type: 'Document',
-				name: fileName,
-				id: fileHref,
-				url: fileHref,
-				deleteAction: deleteAction,
-				isDeleted: false
+			beforeEach(function() {
+				editor = fixture('manual');
 			});
-		});
 
-		it('generates the correct attachment object from link attachment returned from HM', function() {
-			var linkHref = 'linkHref';
-			var deleteAction = 'deleteAction';
-			var linkName = 'linkName';
-			var linkType = 'linkType';
+			it('generates the correct attachment object from a new "File" object', function() {
+				var objectUrl = 'objectUrl';
+				var fileName = 'fileName';
+				URL.createObjectURL = sinon.stub().returns(objectUrl);
+				var newFile = new File([], fileName);
+				var createdAttachment = editor.$.data._newFileToAttachment(newFile);
 
+				expect(createdAttachment).to.deep.include({
+					type: 'Document',
+					name: fileName,
+					id: objectUrl,
+					url: objectUrl,
+					file: newFile,
+					isDeleted: false
+				});
+			});
 
-			var link = {
-				getActionByName: sinon.stub().returns(deleteAction),
-				properties: {
-					name: linkName,
-					href: linkHref
-				}
-			};
-
-			var createdAttachment = editor.$.data.linkToAttachment(link);
-			expect(createdAttachment).to.deep.include({
-				name: linkName,
-				id: linkHref,
-				url: linkHref,
-				deleteAction: deleteAction,
-				isDeleted: false
-			});
-			expect(createdAttachment.type).to.be.undefined;
-		});
-	});
-
-	describe('Submission options dropdowns', function() {
-		describe('When no submission options are passed', function() {
-			it('Should not show the submission type options dropdown', function(done) {
+			it('generates the correct attachment object from file attachment returned from HM', function() {
+				var fileHref = 'fileHref';
+				var deleteAction = 'deleteAction';
+				var fileName = 'fileName';
 
-				fetch = sinon.stub(window.d2lfetch, 'fetch');
-				var promise = Promise.resolve({
-					ok: true,
-					json: function() {
-						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreateNoSubmissionOptions));
+				var file = {
+					getLinkByRel: sinon.stub().returns({ href: fileHref }),
+					getActionByName: sinon.stub().returns(deleteAction),
+					properties: {
+						name: fileName
 					}
+				};
+
+				var createdAttachment = editor.$.data._existingFileToAttachment(file);
+				expect(createdAttachment).to.deep.include({
+					type: 'Document',
+					name: fileName,
+					id: fileHref,
+					url: fileHref,
+					deleteAction: deleteAction,
+					isDeleted: false
 				});
-				window.d2lfetch.fetch.returns(promise);
-				
-				editor = fixture('fromUrl');
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					expect(editor.$.assignmentSubmissionOptions.hidden).to.be.true;
-					done();
-				});						
 			});
-		});
 
-		describe('When valid submission options are passed', function() {
-			var editor;
-			var submissionOptions = getSubmissionOptions();
+			it('generates the correct attachment object from link attachment returned from HM', function() {
+				var linkHref = 'linkHref';
+				var deleteAction = 'deleteAction';
+				var linkName = 'linkName';
 
-			beforeEach(function() {
-				fetch = sinon.stub(window.d2lfetch, 'fetch');
-				var promise = Promise.resolve({
-					ok: true,
-					json: function() {
-						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
+				var link = {
+					getActionByName: sinon.stub().returns(deleteAction),
+					properties: {
+						name: linkName,
+						href: linkHref
 					}
+				};
+
+				var createdAttachment = editor.$.data.linkToAttachment(link);
+				expect(createdAttachment).to.deep.include({
+					name: linkName,
+					id: linkHref,
+					url: linkHref,
+					deleteAction: deleteAction,
+					isDeleted: false
 				});
-				window.d2lfetch.fetch.returns(promise);
-				editor = fixture('fromUrl');
+				expect(createdAttachment.type).to.be.undefined;
 			});
+		});
 
+		describe('Submission options dropdowns', function() {
+			describe('When no submission options are passed', function() {
+				it('Should not show the submission type options dropdown', function(done) {
 
-			it('Should show the submission type options dropdown', function(done) {
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {							
-					expect(editor.$.assignmentSubmissionOptions.hidden).to.be.false;
-					done();
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
+					var promise = Promise.resolve({
+						ok: true,
+						json: function() {
+							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreateNoSubmissionOptions));
+						}
+					});
+					window.d2lfetch.fetch.returns(promise);
+
+					editor = fixture('fromUrl');
+					editor.addEventListener('d2l-assignment-editor-loaded', function() {
+						expect(editor.$.assignmentSubmissionOptions.hidden).to.be.true;
+						done();
+					});
 				});
 			});
 
-			it('Should hide the completion options when none are associated with the currently selected submission option', function(done) {
-				var submissionTypeWithNoCompletion = submissionOptions.availableSubmssionOptions.value.find(function(option){
-					return option.completionTypes == null;
+			describe('When valid submission options are passed', function() {
+				var editor;
+				var submissionOptions = getSubmissionOptions();
+
+				beforeEach(function() {
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
+					var promise = Promise.resolve({
+						ok: true,
+						json: function() {
+							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
+						}
+					});
+					window.d2lfetch.fetch.returns(promise);
+					editor = fixture('fromUrl');
 				});
 
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					editor.submissionType = submissionTypeWithNoCompletion.value;
-					flush(function(){
-						expect(editor.$$('#completionType').hidden).to.be.true;
+				it('Should show the submission type options dropdown', function(done) {
+					editor.addEventListener('d2l-assignment-editor-loaded', function() {
+						expect(editor.$.assignmentSubmissionOptions.hidden).to.be.false;
 						done();
-					});					
+					});
 				});
-			});
 
-			it('Should shows the correct completion options that are associated with the currently selected submission option', function(done) {
-				var submissionTypeWithCompletionTypes = submissionOptions.availableSubmssionOptions.value.find(function(option){
-					return option.completionTypes != null;
+				it('Should hide the completion options when none are associated with the currently selected submission option', function(done) {
+					var submissionTypeWithNoCompletion = submissionOptions.availableSubmssionOptions.value.find(function(option) {
+						return option.completionTypes === null;
+					});
+
+					editor.addEventListener('d2l-assignment-editor-loaded', function() {
+						editor.submissionType = submissionTypeWithNoCompletion.value;
+						flush(function() {
+							expect(editor.$$('#completionType').hidden).to.be.true;
+							done();
+						});
+					});
 				});
 
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					editor.submissionType = submissionTypeWithCompletionTypes.value;
-					flush(function(){
-						expect(editor.$$('#completionType').hidden).to.be.false;
-						expect(editor.$$('#completionOptionsSelect').length).to.equal(submissionTypeWithCompletionTypes.completionTypes.length);								
-						done();
+				it('Should shows the correct completion options that are associated with the currently selected submission option', function(done) {
+					var submissionTypeWithCompletionTypes = submissionOptions.availableSubmssionOptions.value.find(function(option) {
+						return option.completionTypes !== null;
+					});
+
+					editor.addEventListener('d2l-assignment-editor-loaded', function() {
+						editor.submissionType = submissionTypeWithCompletionTypes.value;
+						flush(function() {
+							expect(editor.$$('#completionType').hidden).to.be.false;
+							expect(editor.$$('#completionOptionsSelect').length).to.equal(submissionTypeWithCompletionTypes.completionTypes.length);
+							done();
+						});
 					});
 				});
 			});
 		});
 	});
-});
-</script>
+	</script>
 	</body>
 </html>
diff --git a/test/d2l-assignment-viewer_test.html b/test/d2l-assignment-viewer_test.html
index 19b8c0b..492fec8 100644
--- a/test/d2l-assignment-viewer_test.html
+++ b/test/d2l-assignment-viewer_test.html
@@ -30,24 +30,23 @@
 	<script type="module">
 	import '../d2l-assignment-viewer.js';
 	import SirenParse from 'siren-parser';
-describe('d2l-assignment-viewer', function() {
-	var viewer;
-	var fetch;
+	describe('d2l-assignment-viewer', function() {
+		var fetch;
 
-	afterEach(() => {
-		fetch && fetch.restore();
-	});
+		afterEach(() => {
+			fetch && fetch.restore();
+		});
 
-	describe('loading attachments', function() {
-		it('loads file attachments', function() {
-			var viewer = fixture('basicInstructor');
-			var name1 = 'name1';
-			var name2 = 'name2';
-			var fileHref1 = 'fileHref1';
-			var fileHref2 = 'fileHref2';
+		describe('loading attachments', function() {
+			it('loads file attachments', function() {
+				var viewer = fixture('basicInstructor');
+				var name1 = 'name1';
+				var name2 = 'name2';
+				var fileHref1 = 'fileHref1';
+				var fileHref2 = 'fileHref2';
 
-			var stub = sinon.stub();
-			stub.withArgs('file').returns([
+				var stub = sinon.stub();
+				stub.withArgs('file').returns([
 					{
 						properties: { name: name1 },
 						getLinksByRel: sinon.stub().returns([{ href: fileHref1 }])
@@ -56,461 +55,457 @@
 						properties: { name: name2 },
 						getLinksByRel: sinon.stub().returns([{ href: fileHref2 }])
 					}
-			])
-			stub.withArgs('link').returns([
-				{
-					properties: {name: name1,
-								 href: fileHref1 },
-					getActionByName: sinon.stub().returns('delete')
-				}
-			]);
-			var fileAttachments = {getSubEntitiesByClass: stub};
-
-
-			var files = viewer.$.data._populateFileAttachments(fileAttachments);
-			expect(files.length).to.equal(3);
-			expect(files[0]).to.deep.include({
-				type: 'Document',
-				id: fileHref1,
-				name: name1,
-				url: fileHref1
-			});
-			expect(files[1]).to.deep.include({
-				type: 'Document',
-				id: fileHref2,
-				name: name2,
-				url: fileHref2
-			});
-			expect(files[2]).to.deep.include({
-				id: fileHref1,
-				name: name1,
-				url: fileHref1
+				]);
+				stub.withArgs('link').returns([
+					{
+						properties: {name: name1,
+							href: fileHref1 },
+						getActionByName: sinon.stub().returns('delete')
+					}
+				]);
+				var fileAttachments = {getSubEntitiesByClass: stub};
+
+				var files = viewer.$.data._populateFileAttachments(fileAttachments);
+				expect(files.length).to.equal(3);
+				expect(files[0]).to.deep.include({
+					type: 'Document',
+					id: fileHref1,
+					name: name1,
+					url: fileHref1
+				});
+				expect(files[1]).to.deep.include({
+					type: 'Document',
+					id: fileHref2,
+					name: name2,
+					url: fileHref2
+				});
+				expect(files[2]).to.deep.include({
+					id: fileHref1,
+					name: name1,
+					url: fileHref1
+				});
+				expect(files[2].type).to.be.undefined;
 			});
-			expect(files[2].type).to.be.undefined;
-		})
-	});
+		});
 
-	describe('when loading viewer as instructor', function() {
-		it('loads a non observational assignment', function(done) {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-				}
+		describe('when loading viewer as instructor', function() {
+			it('loads a non observational assignment', function(done) {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
+					}
+				});
+				fetch.returns(promise);
+
+				var viewer = fixture('basicInstructor');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.true;
+					expect(event.detail.canDeleteAssignment).to.be.true;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.totalUsers).to.equal(280);
+					expect(viewer.totalUsersWithSubmissions).to.equal(50);
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.true;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
+						expect(viewer.instructorSubmissionLabel).to.equal('view_submissions');
+						expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalSubmissions');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
-			fetch.returns(promise);
-
-			var viewer = fixture('basicInstructor');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.true;
-				expect(event.detail.canDeleteAssignment).to.be.true;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.totalUsers).to.equal(280);
-				expect(viewer.totalUsersWithSubmissions).to.equal(50);
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.true;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
-					expect(viewer.instructorSubmissionLabel).to.equal('view_submissions');
-					expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalSubmissions');
-					done.isDone = true;
-					done();
-				})
+
+			it('loads an observational assignment', function(done) {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.observationalAssignmentForInstructor));
+					}
+				});
+				fetch.returns(promise);
+
+				var viewer = fixture('basicInstructor');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.true;
+					expect(event.detail.canDeleteAssignment).to.be.true;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.totalUsers).to.equal(280);
+					expect(viewer.totalUsersWithSubmissions).to.equal(50);
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.true;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
+						expect(viewer.instructorSubmissionLabel).to.equal('view_completions');
+						expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalCompletions');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
 
-		it('loads an observational assignment', function(done) {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.observationalAssignmentForInstructor));
-				}
-			});
-			fetch.returns(promise);
-
-			var viewer = fixture('basicInstructor');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.true;
-				expect(event.detail.canDeleteAssignment).to.be.true;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.totalUsers).to.equal(280);
-				expect(viewer.totalUsersWithSubmissions).to.equal(50);
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.true;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
-					expect(viewer.instructorSubmissionLabel).to.equal('view_completions');
-					expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalCompletions');
-					done.isDone = true;
-					done();
-				})
-			});
-		});				
-	});			
-
-	describe('when loading viewer as student', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
-				}
+		describe('when loading viewer as student', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.false;
-				expect(viewer.submissionType).to.equal(0);
-				expect(viewer.completionDate).to.be.null;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
-					expect(viewer.submissionLabel).to.equal('submit');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.false;
+					expect(viewer.submissionType).to.equal(0);
+					expect(viewer.completionDate).to.be.null;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
+						expect(viewer.submissionLabel).to.equal('submit');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as user that cannot access link', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForUser));
-				}
-			});
-			var promise2 = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.activityForUser));
-				}
+		describe('when loading viewer as user that cannot access link', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForUser));
+					}
+				});
+				var promise2 = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.activityForUser));
+					}
+				});
+				fetch.onCall(0).returns(promise);
+				fetch.onCall(1).returns(promise2);
 			});
-			fetch.onCall(0).returns(promise);
-			fetch.onCall(1).returns(promise2);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.link).to.equal(null);
-				expect(viewer.myActivityUsageLink).to.equal('http://activities.api.dev.brightspace.com/activities/6606_2000_5/usages/123060/users/30223')
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.false;
-				expect(viewer.submissionType).to.equal(0);
-				expect(viewer.completionDate).to.be.null;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission')).to.not.exist;
-					expect(viewer.submissionLabel).to.equal('submit');
-					expect(viewer.$$('span.name-text').hidden).to.be.false;
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal(null);
+					expect(viewer.myActivityUsageLink).to.equal('http://activities.api.dev.brightspace.com/activities/6606_2000_5/usages/123060/users/30223');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.false;
+					expect(viewer.submissionType).to.equal(0);
+					expect(viewer.completionDate).to.be.null;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission')).to.not.exist;
+						expect(viewer.submissionLabel).to.equal('submit');
+						expect(viewer.$$('span.name-text').hidden).to.be.false;
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with graded assignment', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.gradedAssignmentForStudent));
-				}
+		describe('when loading viewer as student with graded assignment', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.gradedAssignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.true;
-				expect(viewer.submitted).to.be.true;
-				expect(viewer.submissionType).to.equal(0);
-				expect(viewer.completionDate).to.be.null;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-					expect(viewer.submissionLabel).to.be.equal('submit_graded');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.true;
+					expect(viewer.submitted).to.be.true;
+					expect(viewer.submissionType).to.equal(0);
+					expect(viewer.completionDate).to.be.null;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+						expect(viewer.submissionLabel).to.be.equal('submit_graded');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with submissions', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.submittedAssignmentForStudent));
-				}
+		describe('when loading viewer as student with submissions', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.submittedAssignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.true;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-					expect(viewer.submissionLabel).to.equal('submit_submitted');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.true;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+						expect(viewer.submissionLabel).to.equal('submit_submitted');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with completed observational assignment', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.completeAssignmentForStudent));
-				}
+		describe('when loading viewer as student with completed observational assignment', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.completeAssignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment');
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.true;
-				expect(viewer.submissionType).to.equal(2);
-				expect(viewer.completionDate).to.equal('2017-12-21T20:59:00.000Z');
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-					expect(viewer.submissionLabel).to.be.equal('submit_completed');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.true;
+					expect(viewer.submissionType).to.equal(2);
+					expect(viewer.completionDate).to.equal('2017-12-21T20:59:00.000Z');
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+						expect(viewer.submissionLabel).to.be.equal('submit_completed');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with incomplete observational assignment', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudent));
-				}
+		describe('when loading viewer as student with incomplete observational assignment', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment');
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.false;
-				expect(viewer.submissionType).to.equal(2);
-				expect(viewer.completionDate).to.be.null;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
-					expect(viewer.submissionLabel).to.be.equal('submit_view_details');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.false;
+					expect(viewer.submissionType).to.equal(2);
+					expect(viewer.completionDate).to.be.null;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
+						expect(viewer.submissionLabel).to.be.equal('submit_view_details');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with incomplete observational assignment, with completion type as marked by learner', function() {
-		before(function() {
-			var completionType = 
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudentMarkedAsComplete));
-				}
+		describe('when loading viewer as student with incomplete observational assignment, with completion type as marked by learner', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudentMarkedAsComplete));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.false;
-				expect(viewer.submissionType).to.equal(2);
-				expect(viewer.completionDate).to.be.null;
-				flush(function() {
-					expect(viewer.submissionLabel).to.be.equal('submit_mark_as_complete');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function() {
+					if (done.isDone) return;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.false;
+					expect(viewer.submissionType).to.equal(2);
+					expect(viewer.completionDate).to.be.null;
+					flush(function() {
+						expect(viewer.submissionLabel).to.be.equal('submit_mark_as_complete');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-
-	describe('when loading assignment without due date as instructor', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					var result = window.testFixtures.assignmentForInstructor;
-					delete result.properties.dueDate;
-					return Promise.resolve(JSON.stringify(result));
-				}
+		describe('when loading assignment without due date as instructor', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						var result = window.testFixtures.assignmentForInstructor;
+						delete result.properties.dueDate;
+						return Promise.resolve(JSON.stringify(result));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('hides the due date', function(done) {
-			var viewer = fixture('basicInstructor');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.true;
-				expect(viewer.dueDate).to.be.undefined;
-				flush(function() {
-					expect(viewer.$$('#due-date')).to.be.null;
-					done.isDone = true;
-					done();
+			it('hides the due date', function(done) {
+				var viewer = fixture('basicInstructor');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.true;
+					expect(viewer.dueDate).to.be.undefined;
+					flush(function() {
+						expect(viewer.$$('#due-date')).to.be.null;
+						done.isDone = true;
+						done();
+					});
 				});
 			});
 		});
-	});
 
-	describe('when deleting assignment as instructor', function() {
-		it('successfully deletes an assignment', function(done) {
-			var viewer = fixture('basicInstructor');
+		describe('when deleting assignment as instructor', function() {
+			it('successfully deletes an assignment', function(done) {
+				var viewer = fixture('basicInstructor');
 				viewer.$.data.resource
 					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
+				var fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true
+				});
+				fetch.returns(promise);
 
-			var fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true
-			});
-			fetch.returns(promise);
-
-			viewer.addEventListener('d2l-assignment-delete-complete', function(event) {
-				if (done.isDone) return;
-				assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
-				done.isDone = true;
-				done();
+				viewer.addEventListener('d2l-assignment-delete-complete', function() {
+					if (done.isDone) return;
+					assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
+					done.isDone = true;
+					done();
+				});
+				viewer.delete();
 			});
-			viewer.delete();
-		});
 
-		it('fails to delete an assignment', function(done) {
-			var viewer = fixture('basicInstructor');
-			viewer.$.data.resource
-				= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
+			it('fails to delete an assignment', function(done) {
+				var viewer = fixture('basicInstructor');
+				viewer.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-			var fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-			var promise = Promise.resolve({
-				ok: false
-			});
-			fetch.returns(promise);
+				var promise = Promise.resolve({
+					ok: false
+				});
+				fetch.returns(promise);
 
-			viewer.addEventListener('d2l-assignment-delete-failed', function(event) {
-				if (done.isDone) return;
-				assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
-				done.isDone = true;
-				done();
+				viewer.addEventListener('d2l-assignment-delete-failed', function() {
+					if (done.isDone) return;
+					assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
+					done.isDone = true;
+					done();
+				});
+				viewer.delete();
 			});
-			viewer.delete();
 		});
 	});
-});
-</script>
+	</script>
 	</body>
 </html>
diff --git a/test/index.html b/test/index.html
index 6a6b5ce..e767aad 100644
--- a/test/index.html
+++ b/test/index.html
@@ -1,7 +1,7 @@
 <html>
 	<head>
-		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-		<script src="../../wct-browser-legacy/browser.js"></script>
+		<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../../wct-browser-legacy/browser.js"></script>
 	</head>
 	<body>
 		<script>
