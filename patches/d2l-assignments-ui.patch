From 72e3640fb789d07148fd3cd8cc52083d1311b219 Mon Sep 17 00:00:00 2001
From: Vincent Wong <Vincent.Wong@D2L.com>
Date: Wed, 16 Jan 2019 14:03:18 -0800
Subject: [PATCH] fix patch

---
 .circleci/config.yml                          |   29 +-
 .eslintignore                                 |    3 +-
 .eslintrc.json                                |    4 +-
 .gitignore                                    |    2 -
 .vscode/launch.json                           |    3 -
 _circle.yml                                   |   19 -
 d2l-assignment-editor-data.js                 |   10 +-
 d2l-assignment-editor.js                      |   22 +-
 d2l-assignment-html-editor.js                 |    3 +-
 d2l-assignment-input.js                       |    2 +-
 d2l-assignment-text-area.js                   |    2 +-
 d2l-assignment-viewer-data.js                 |   34 +-
 d2l-assignment-viewer.js                      |   10 +-
 d2l-loaded-assignment-viewer.js               |    5 +-
 d2l-planned-assignment-viewer-data.js         |    6 +-
 d2l-planned-assignment-viewer.js              |    2 +-
 demo/d2l-assignment-editor.html               |   26 +-
 demo/d2l-assignment-viewer.html               |   18 +-
 localize-behavior.js                          |    3 +
 package.json                                  |   35 +-
 scripts/deploy_artifactory.sh                 |   18 -
 .../assignment-attachment-behavior.js         |    2 +-
 ...l-assignment-attachment-behavior_test.html |    6 +-
 test/d2l-assignment-editor_test.html          | 1341 ++++++++---------
 test/d2l-assignment-viewer_test.html          |  832 +++++-----
 test/index.html                               |    4 +-
 26 files changed, 1188 insertions(+), 1253 deletions(-)
 delete mode 100644 _circle.yml
 delete mode 100644 scripts/deploy_artifactory.sh

diff --git a/.circleci/config.yml b/.circleci/config.yml
index 6387e19..e0478b8 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -2,7 +2,7 @@ version: 2
 
 defaults: &defaults
   docker:
-    - image: circleci/node:8-stretch-browsers
+    - image: circleci/node:10.15-stretch-browsers
 
 jobs:
   build:
@@ -11,30 +11,22 @@ jobs:
       - checkout
       - run: curl -ks -u$ARTIFACTORY_USER:$ARTIFACTORY_PASS "https://d2lartifacts.artifactoryonline.com/d2lartifacts/api/npm/npm-local/auth/d2l" -o .npmrc
       - run:
-          name: Setup Bower Artifactory Registry
-          command: echo "export bower_registry__search=\"[https://${ARTIFACTORY_USER}:`node -p "encodeURIComponent('$ARTIFACTORY_PASS')"`@d2lartifacts.jfrog.io/d2lartifacts/api/bower/bower-local, http://registry.bower.io]\"" >> $BASH_ENV
+          name: Setup NPM Artifactory Registry
+          command: npm config set @d2l:registry "https://d2lartifacts.artifactoryonline.com/d2lartifacts/api/npm/npm-local/"
       - restore_cache:
           keys:
-            - v3-package-json-{{ checksum "package.json" }}
-            - v3-package-json- # if cache for exact version of `package.json` is not present then load any most recent one
-      - restore_cache:
-          keys:
-            - v3-bower-json-{{ checksum "bower.json" }}
-            - v3-bower-json-
+            - v5-package-json-{{ checksum "package.json" }}
+            - v5-package-json- # if cache for exact version of `package.json` is not present then load any most recent one
       - run:
           name: Installing Dependencies
-          command: yarn
+          command: npm install
       - run:
           name: Run Build
-          command: yarn build
+          command: npm run build
       - save_cache:
-          key: v3-package-json-{{ checksum "package.json" }}
+          key: v5-package-json-{{ checksum "package.json" }}
           paths:
             - node_modules
-      - save_cache:
-          key: v3-bower-json-{{ checksum "bower.json" }}
-          paths:
-            - bower_components
       - persist_to_workspace:
           root: ../
           paths: ./*
@@ -48,16 +40,17 @@ jobs:
           name: Fix Missing Dependencies
           command: sudo apt-get install libgconf-2-4
       - run: export LAUNCHPAD_BROWSERS=chrome
-      - run: yarn test
+      - run: npm run test
 
   deploy:
     <<: *defaults
     steps:
       - attach_workspace:
           at: ~/
+      - run: curl -ks -u$ARTIFACTORY_USER:$ARTIFACTORY_PASS "https://d2lartifacts.artifactoryonline.com/d2lartifacts/api/npm/npm-local/auth/d2l" -o .npmrc
       - deploy:
           name: Deploy To Artifactory
-          command: /bin/bash ./scripts/deploy_artifactory.sh $ARTIFACTORY_USER $ARTIFACTORY_PASS $CIRCLE_TAG
+          command: npm publish --registry "https://d2lartifacts.artifactoryonline.com/d2lartifacts/api/npm/npm-local/"
 
 workflows:
   version: 2
diff --git a/.eslintignore b/.eslintignore
index 2746b53..7c6cebf 100644
--- a/.eslintignore
+++ b/.eslintignore
@@ -1,3 +1,4 @@
-gulpfile.js
+gulpfile.js
 test/acceptance/*
 reports
+test/fixtures/*
\ No newline at end of file
diff --git a/.eslintrc.json b/.eslintrc.json
index 95346a6..acb3499 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -1,6 +1,6 @@
 {
-  "extends": "brightspace/polymer-3-config",
+  "extends": "brightspace/wct-polymer-3-config",
   "globals": {
-	  "moment": false
+    "moment": false
   }
 }
diff --git a/.gitignore b/.gitignore
index a31bb10..3c3c157 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,5 +4,3 @@ css/**
 
 package-lock.json
 *.log
-
-node_modules
diff --git a/.vscode/launch.json b/.vscode/launch.json
index f9ab8be..4c558cc 100644
--- a/.vscode/launch.json
+++ b/.vscode/launch.json
@@ -1,7 +1,4 @@
 {
-    // Use IntelliSense to learn about possible Node.js debug attributes.
-    // Hover to view descriptions of existing attributes.
-    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
     "version": "0.2.0",
     "configurations": [
         {
diff --git a/_circle.yml b/_circle.yml
deleted file mode 100644
index cd28643..0000000
--- a/_circle.yml
+++ /dev/null
@@ -1,19 +0,0 @@
-machine:
-  node:
-    version: 6.1.0
-dependencies:
-  override:
-    - yarn
-  cache_directories:
-    - ~/.cache/yarn
-
-test:
-  override:
-    - yarn test
-
-deployment:
-  release:
-    tag: /v[0-9]+(\.[0-9]+)*/
-    owner: Brightspace
-    commands:
-      - /bin/bash ./scripts/deploy_artifactory.sh $ARTIFACTORY_USER $ARTIFACTORY_PASS $CIRCLE_TAG
diff --git a/d2l-assignment-editor-data.js b/d2l-assignment-editor-data.js
index 9b33be7..8c9f6b0 100644
--- a/d2l-assignment-editor-data.js
+++ b/d2l-assignment-editor-data.js
@@ -1,6 +1,6 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import './localize-behavior.js';
-import 'siren-parser/siren-parser.js';
+import SirenParse from 'siren-parser';
 import './d2l-assignment-attachment-behavior.js';
 import './d2l-assignment-behavior.js';
 Polymer({
@@ -95,7 +95,7 @@ Polymer({
 				if (response.ok) {
 					response.json()
 						.then(function(body) {
-							_this.resource = window.D2L.Hypermedia.Siren.Parse(body);
+							_this.resource = SirenParse(body);
 							var action = _this.resource.getActionByName('quick-create-folder');
 							if (action) {
 								_this.loaded = true;
@@ -202,7 +202,7 @@ Polymer({
 				if (response.ok) {
 					response.json()
 						.then(function(body) {
-							var resource = window.D2L.Hypermedia.Siren.Parse(body);
+							var resource = SirenParse(body);
 							var self = resource.getLinkByRel('self');
 							if (self) {
 								var attachments = resource.getSubEntityByRel('https://assignments.api.brightspace.com/rels/attachments');
@@ -318,7 +318,7 @@ Polymer({
 			data.append('instructions', instructions);
 		}
 
-		var validatedDate = this._processDate(dueDate);
+		var validatedDate = dueDate && this._processDate(dueDate);
 		var resetDueDate = !validatedDate && action && this._getFieldValue(action, 'dueDate');
 		if (validatedDate || resetDueDate) {
 			data.append('dueDate', resetDueDate ? '' : validatedDate);
diff --git a/d2l-assignment-editor.js b/d2l-assignment-editor.js
index f093666..82f53c1 100644
--- a/d2l-assignment-editor.js
+++ b/d2l-assignment-editor.js
@@ -4,14 +4,8 @@ Create Brightspace assignments
 
 @demo demo/d2l-assignment-editor.html
 */
-/*
-  FIXME(polymer-modulizer): the above comments were extracted
-  from HTML and may be out of place here. Review them and
-  then delete this comment!
-*/
-import '@polymer/polymer/polymer-legacy.js';
-
-import 'lazy-imports/lazy-imports-behavior.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';
 import 'd2l-attachments-ui/d2l-attachment-list.js';
 import 'd2l-attachments-ui/d2l-attachment.js';
 import 'd2l-button/d2l-button.js';
@@ -29,7 +23,7 @@ import 'd2l-datetime-picker/d2l-datetime-picker.js';
 const $_documentContainer = document.createElement('template');
 
 $_documentContainer.innerHTML = `<dom-module id="d2l-assignment-editor">
-	
+
 	<template strip-whitespace="">
 		<style include="select-styles d2l-field-styles d2l-input-styles d2l-bubble-styles">
 			[hidden] {
@@ -311,8 +305,7 @@ Polymer({
 	is: 'd2l-assignment-editor',
 
 	behaviors: [
-		D2L.PolymerBehaviors.Assignment.LocalizeBehavior,
-		Polymer.LazyImportsBehavior
+		D2L.PolymerBehaviors.Assignment.LocalizeBehavior
 	],
 	listeners: {
 		'd2l-assignment-save-failed': '_failed',
@@ -466,11 +459,6 @@ Polymer({
 			type: Number
 		}
 	},
-	attached: function() {
-		Polymer.RenderStatus.afterNextRender(this, function() {
-			this.importLazyGroup('datetime');
-		}.bind(this));
-	},
 	_onAttachmentRemoved: function(e) {
 		var attachment = this.$.attachments.modelForElement(e.target).item;
 		this._removeAttachment(attachment, e.target);
@@ -608,7 +596,7 @@ Polymer({
 	},
 	_toggleBubble: function(field, show) {
 		var fieldElement = this.$[field];
-		var bubble = Polymer.dom(fieldElement).nextElementSibling;
+		var bubble = dom(fieldElement).nextElementSibling;
 		this.toggleClass('d2l-bubble-show', show, bubble);
 		if (show) {
 			fieldElement.setAttribute('aria-invalid', true);
diff --git a/d2l-assignment-html-editor.js b/d2l-assignment-html-editor.js
index 81da059..3a75cc8 100644
--- a/d2l-assignment-html-editor.js
+++ b/d2l-assignment-html-editor.js
@@ -1,5 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
-import 'd2l-html-editor/d2l-html-editor-client-framed.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-html-editor/d2l-html-editor.js';
 import 'd2l-inputs/d2l-input-shared-styles.js';
 const $_documentContainer = document.createElement('template');
diff --git a/d2l-assignment-input.js b/d2l-assignment-input.js
index fe5a637..5f6d274 100644
--- a/d2l-assignment-input.js
+++ b/d2l-assignment-input.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import './d2l-assignment-text-area.js';
 import './d2l-assignment-html-editor.js';
 const $_documentContainer = document.createElement('template');
diff --git a/d2l-assignment-text-area.js b/d2l-assignment-text-area.js
index 76be054..5d2ab76 100644
--- a/d2l-assignment-text-area.js
+++ b/d2l-assignment-text-area.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-tooltip/d2l-tooltip.js';
 import 'd2l-inputs/d2l-input-textarea.js';
 const $_documentContainer = document.createElement('template');
diff --git a/d2l-assignment-viewer-data.js b/d2l-assignment-viewer-data.js
index 1087ad5..b689d45 100644
--- a/d2l-assignment-viewer-data.js
+++ b/d2l-assignment-viewer-data.js
@@ -1,15 +1,15 @@
-import '@polymer/polymer/polymer-legacy.js';
-import 'd2l-hypermedia-constants/d2l-hm-constants-behavior.js';
-import 'siren-parser/siren-parser.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import {Classes, Rels} from 'd2l-hypermedia-constants';
 import './d2l-assignment-attachment-behavior.js';
 import './d2l-assignment-behavior.js';
+import SirenParse from 'siren-parser';
+
 Polymer({
 
 	is: 'd2l-assignment-viewer-data',
 	behaviors: [
 		window.D2L.AssignmentAttachmentBehavior,
-		window.D2L.AssignmentBehavior,
-		window.D2L.Hypermedia.HMConstantsBehavior
+		window.D2L.AssignmentBehavior
 	],
 	properties: {
 		url: {
@@ -110,7 +110,7 @@ Polymer({
 			if (response.ok) {
 				response.json()
 					.then(function(body) {
-						var resource = window.D2L.Hypermedia.Siren.Parse(body);
+						var resource = SirenParse(body);
 						if (resource.hasClass('assignment')) {
 							_this.resource = resource;
 							_this.name = _this.resource.properties.name;
@@ -121,8 +121,8 @@ Polymer({
 							_this.completionDate = _this.resource.properties.completionDate !== undefined ? _this.resource.properties.completionDate : null;
 							_this.hasAssignmentDetails = _this.canAddGrade || _this.dueDate !== undefined;
 
-							var richTextInstructions = _this.resource.getSubEntityByRel(_this.HypermediaRels.Assignments.instructions);
-							if (richTextInstructions && richTextInstructions.hasClass(_this.HypermediaClasses.text.richtext)) {
+							var richTextInstructions = _this.resource.getSubEntityByRel(Rels.Assignments.instructions);
+							if (richTextInstructions && richTextInstructions.hasClass(Classes.text.richtext)) {
 								_this.instructions = richTextInstructions.properties.html;
 							} else {
 								_this.instructions = _this.resource.properties.instructions;
@@ -143,7 +143,7 @@ Polymer({
 							}
 
 							var fileAttachments = _this.resource.getSubEntityByClass('attachments');
-							_this.fileAttachmentList = _this._populateFileAttachments( fileAttachments );
+							_this.fileAttachmentList = _this._populateFileAttachments(fileAttachments);
 							var submissionStatus = _this.resource.getSubEntityByClass('submission-status');
 							if (submissionStatus) {
 								_this.graded = submissionStatus.hasClass('graded');
@@ -158,17 +158,17 @@ Polymer({
 								_this.outOf = outOf;
 							}
 
-							if (_this.resource.hasLinkByRel(_this.HypermediaRels.Activities.activityUsage)) {
-								var activityUsageLink = _this.resource.getLinkByRel(_this.HypermediaRels.Activities.activityUsage);
+							if (_this.resource.hasLinkByRel(Rels.Activities.activityUsage)) {
+								var activityUsageLink = _this.resource.getLinkByRel(Rels.Activities.activityUsage);
 								_this.activityUsageLink = activityUsageLink.href;
 
 								Promise.resolve(_this._getActivityUsageInfo()).then(function(res) { // eslint-disable-line no-undef
 									if (res.ok) {
 										res.json()
 											.then(function(linkBody) {
-												var linkResource = window.D2L.Hypermedia.Siren.Parse(linkBody);
-												if (linkResource.hasLinkByRel(_this.HypermediaRels.Activities.myActivityUsage)) {
-													var myActivityUsageLink = linkResource.getLinkByRel(_this.HypermediaRels.Activities.myActivityUsage);
+												var linkResource = SirenParse(linkBody);
+												if (linkResource.hasLinkByRel(Rels.Activities.myActivityUsage)) {
+													var myActivityUsageLink = linkResource.getLinkByRel(Rels.Activities.myActivityUsage);
 													_this.myActivityUsageLink = myActivityUsageLink.href;
 												}
 
@@ -253,7 +253,7 @@ Polymer({
 		//		 return;
 		//	 }
 		//	 response.json().then(function(body) {
-		//		 var publishResource = window.D2L.Hypermedia.Siren.Parse(body);
+		//		 var publishResource = SirenParse(body);
 		//		 if (publishResource.hasClass('published') || !postNow) {
 		//			 _this.fire('d2l-assignment-save-complete', {
 		//				 id: id,
@@ -265,7 +265,7 @@ Polymer({
 		//		 _this.callUrl(publishAction.href, publishAction.method).then(function(response) {
 		//			 if (response.ok) {
 		//				 response.json().then(function(body) {
-		//					 var resource = window.D2L.Hypermedia.Siren.Parse(body);
+		//					 var resource = SirenParse(body);
 		//					 if (resource.hasClass('published')) {
 		//						 _this.fire('d2l-assignment-save-complete', {
 		//							 id: id,
@@ -288,7 +288,7 @@ Polymer({
 		if (fileAttachments) {
 			var files = fileAttachments.getSubEntitiesByClass('file');
 			if (files) {
-				for (var i = 0; i < files.length; i++ ) {
+				for (var i = 0; i < files.length; i++) {
 					var attachment = {
 						type: 'Document',
 						id: files[i].getLinksByRel('self')[0].href,
diff --git a/d2l-assignment-viewer.js b/d2l-assignment-viewer.js
index 088c101..47f7dd0 100644
--- a/d2l-assignment-viewer.js
+++ b/d2l-assignment-viewer.js
@@ -4,12 +4,7 @@ View Brightspace assignments
 
 @demo demo/d2l-assignment-viewer.html
 */
-/*
-  FIXME(polymer-modulizer): the above comments were extracted
-  from HTML and may be out of place here. Review them and
-  then delete this comment!
-*/
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 
 import 'd2l-link/d2l-link.js';
 import 'd2l-alert/d2l-alert.js';
@@ -18,7 +13,8 @@ import './localize-behavior.js';
 import 's-html/s-html.js';
 import './d2l-assignment-viewer-data.js';
 import 'd2l-more-less/d2l-more-less.js';
-import 'd2l-attachments-ui/d2l-attachment-ui.js';
+import 'd2l-attachments-ui/d2l-attachment-list.js';
+import 'd2l-attachments-ui/d2l-attachment.js';
 const $_documentContainer = document.createElement('template');
 
 $_documentContainer.innerHTML = `<dom-module id="d2l-assignment-viewer">
diff --git a/d2l-loaded-assignment-viewer.js b/d2l-loaded-assignment-viewer.js
index e5daeb7..a83eae7 100644
--- a/d2l-loaded-assignment-viewer.js
+++ b/d2l-loaded-assignment-viewer.js
@@ -1,9 +1,10 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-typography/d2l-typography.js';
 import './localize-behavior.js';
 import 's-html/s-html.js';
 import './d2l-assignment-viewer-data.js';
-import 'd2l-attachments-ui/d2l-attachment-ui.js';
+import 'd2l-attachments-ui/d2l-attachment-list.js';
+import 'd2l-attachments-ui/d2l-attachment.js';
 import './d2l-field-styles.js';
 const $_documentContainer = document.createElement('template');
 
diff --git a/d2l-planned-assignment-viewer-data.js b/d2l-planned-assignment-viewer-data.js
index 165cc9b..f72e8fe 100644
--- a/d2l-planned-assignment-viewer-data.js
+++ b/d2l-planned-assignment-viewer-data.js
@@ -1,5 +1,5 @@
-import '@polymer/polymer/polymer-legacy.js';
-import 'siren-parser/siren-parser.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import SirenParse from 'siren-parser';
 import './d2l-assignment-attachment-behavior.js';
 import './d2l-assignment-behavior.js';
 Polymer({
@@ -35,7 +35,7 @@ Polymer({
 				if (response.ok) {
 					response.json()
 						.then(function(body) {
-							_this.resource = window.D2L.Hypermedia.Siren.Parse(body);
+							_this.resource = SirenParse(body);
 							if (_this.resource.hasClass('assignment')) {
 								_this.name = _this.resource.properties.name;
 
diff --git a/d2l-planned-assignment-viewer.js b/d2l-planned-assignment-viewer.js
index deb8d91..18fb063 100644
--- a/d2l-planned-assignment-viewer.js
+++ b/d2l-planned-assignment-viewer.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import 'd2l-typography/d2l-typography.js';
 import 'd2l-alert/d2l-alert.js';
 import './d2l-planned-assignment-viewer-data.js';
diff --git a/demo/d2l-assignment-editor.html b/demo/d2l-assignment-editor.html
index 863e486..4409730 100644
--- a/demo/d2l-assignment-editor.html
+++ b/demo/d2l-assignment-editor.html
@@ -6,12 +6,14 @@
 
 		<title>d2l-assignment-editor demo</title>
 
-		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
 
-		<script type="module" src="../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
-		<script type="module" src="../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
-		<script type="module" src="../../d2l-button/d2l-button.js"></script>
+		<script type="module" src="../../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
+		<script type="module" src="../../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
+		<script type="module" src="../../../d2l-button/d2l-button.js"></script>
 		<script type="module" src="../d2l-assignment-editor.js"></script>
+		<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
+		<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 
 		<!-- FIXME(polymer-modulizer):
 		These imperative modules that innerHTML your HTML are
@@ -38,24 +40,24 @@
 import '@polymer/iron-demo-helpers/demo-snippet.js';
 import 'd2l-button/d2l-button.js';
 import '../d2l-assignment-editor.js';
-function printFormData(event) {
+window.printFormData = function(event) {
 	if (event.detail.entries) {
-		var output = "";
+		var output = '';
 		for (var pair of event.detail.entries()) {
-			output += pair[0]+ ': ' + pair[1] + '<br>';
+			output += pair[0] + ': ' + pair[1] + '<br>';
 		}
 		var console = document.getElementById('output');
 		console.innerHTML = output;
 		var editor = document.getElementById('editor');
-		editor.removeEventListener('d2l-assignment-save-failed', printFormData);
+		editor.removeEventListener('d2l-assignment-save-failed', window.printFormData);
 	}
-}
+};
 
-function save() {
+window.save = function() {
 	var editor = document.getElementById('editor');
-	editor.addEventListener('d2l-assignment-save-failed', printFormData);
+	editor.addEventListener('d2l-assignment-save-failed', window.printFormData);
 	editor.save();
-}
+};
 
 document.body.addEventListener('dom-change', function loaded() {
 	document.body.removeEventListener('dom-change', loaded);
diff --git a/demo/d2l-assignment-viewer.html b/demo/d2l-assignment-viewer.html
index 77a5d61..15d9998 100644
--- a/demo/d2l-assignment-viewer.html
+++ b/demo/d2l-assignment-viewer.html
@@ -6,12 +6,14 @@
 
 		<title>d2l-assignment-editor demo</title>
 
-		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
 
-		<script type="module" src="../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
-		<script type="module" src="../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
+		<script type="module" src="../../../@polymer/iron-demo-helpers/demo-pages-shared-styles.js"></script>
+		<script type="module" src="../../../@polymer/iron-demo-helpers/demo-snippet.js"></script>
 		<script type="module" src="../d2l-assignment-viewer.js"></script>
-		<script type="module" src="../../d2l-button/d2l-button.js"></script>
+		<script type="module" src="../../../d2l-button/d2l-button.js"></script>
+		<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
+		<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 
 		<!-- FIXME(polymer-modulizer):
 		These imperative modules that innerHTML your HTML are
@@ -34,14 +36,10 @@
 	</head>
 	<body>
 		<script type="module">
-import '@polymer/iron-demo-helpers/demo-pages-shared-styles.js';
-import '@polymer/iron-demo-helpers/demo-snippet.js';
-import '../d2l-assignment-viewer.js';
-import 'd2l-button/d2l-button.js';
-function toggleInstructorView() {
+window.toggleInstructorView = function() {
 	document.getElementById('viewer').canViewAllSubmissions =
 		!document.getElementById('viewer').canViewAllSubmissions;
-}
+};
 </script>
 		<script type="module">
 const $_documentContainer = document.createElement('template');
diff --git a/localize-behavior.js b/localize-behavior.js
index 815d0e3..6e572dd 100644
--- a/localize-behavior.js
+++ b/localize-behavior.js
@@ -5,6 +5,9 @@ window.D2L.PolymerBehaviors = window.D2L.PolymerBehaviors || {};
 window.D2L.PolymerBehaviors.Assignment = window.D2L.PolymerBehaviors.Assignment || {};
 /** @polymerBehavior D2L.PolymerBehaviors.Assignment.LocalizeBehavior */
 D2L.PolymerBehaviors.Assignment.LocalizeBehaviorImpl = {
+	get importMeta() {
+		return import.meta;
+	},
 	properties: {
 		resources: {
 			value: function() {
diff --git a/package.json b/package.json
index 4a4053a..0f674f5 100644
--- a/package.json
+++ b/package.json
@@ -4,7 +4,7 @@
     "type": "git",
     "url": "https://github.com/BrightspaceUI/assignment-editor.git"
   },
-  "name": "d2l-assignments-ui",
+  "name": "@d2l/d2l-assignments-ui",
   "version": "2.41.0",
   "scripts": {
     "serve": "polymer serve",
@@ -27,9 +27,9 @@
     "babel-eslint": "^10.0.1",
     "bower": "^1.7.7",
     "bower-art-resolver": "^2.0.8",
-    "eslint": "^3.7.1",
-    "eslint-config-brightspace": "^0.2.4",
-    "eslint-plugin-html": "^1.5.3",
+    "eslint": "^4.19.1",
+    "eslint-config-brightspace": "^0.4.0",
+    "eslint-plugin-html": "^4.0.5",
     "gulp": "^3.9.1",
     "gulp-autoprefixer": "^4.0.0",
     "gulp-bump": "^2.7.0",
@@ -45,26 +45,27 @@
   },
   "dependencies": {
     "@polymer/polymer": "^3.0.0",
-    "d2l-tooltip": "BrightspaceUI/tooltip#semver:^3",
-    "d2l-inputs": "BrightspaceUI/inputs#semver:^2",
+    "d2l-alert": "BrightspaceUI/alert#semver:^4",
+    "d2l-attachments-ui": "Brightspace/attachments-ui#semver:^3",
     "d2l-button": "BrightspaceUI/button#semver:^5",
     "d2l-colors": "BrightspaceUI/colors#semver:^4",
+    "d2l-datetime-picker": "BrightspaceUI/datetime-picker#semver:^4",
+    "d2l-fetch": "Brightspace/d2l-fetch.git#semver:^2",
+    "d2l-html-editor": "Brightspace/d2l-html-editor#semver:^2",
+    "d2l-hypermedia-constants": "^6",
     "d2l-icons": "BrightspaceUI/icons#semver:^6",
+    "d2l-inputs": "BrightspaceUI/inputs#semver:^2",
     "d2l-link": "BrightspaceUI/link#semver:^5",
-    "d2l-typography": "BrightspaceUI/typography#semver:^7",
+    "d2l-loading-spinner": "BrightspaceUI/loading-spinner#semver:^7",
+    "d2l-localize-behavior": "BrightspaceUI/localize-behavior#semver:^2",
+    "d2l-more-less": "BrightspaceUI/more-less#semver:^5",
     "d2l-offscreen": "BrightspaceUI/offscreen#semver:^4",
+    "d2l-tooltip": "BrightspaceUI/tooltip#semver:^3",
+    "d2l-typography": "BrightspaceUI/typography#semver:^7",
     "s-html": "Brightspace/s-html#semver:^2.0.0",
-    "d2l-datetime-picker": "BrightspaceUI/datetime-picker#semver:^4",
-    "d2l-loading-spinner": "BrightspaceUI/loading-spinner#semver:^7",
-    "d2l-attachments-ui": "Brightspace/attachments-ui#semver:^3",
-    "d2l-alert": "BrightspaceUI/alert#semver:^4",
-    "whatwg-fetch": "^2.0.0",
-    "d2l-hypermedia-constants": "^6",
-    "d2l-fetch": "Brightspace/d2l-fetch.git#semver:^2",
     "siren-parser": "^8.0.0",
-    "d2l-html-editor": "Brightspace/d2l-html-editor#semver:^2",
-    "d2l-more-less": "BrightspaceUI/more-less#semver:^5",
-    "d2l-localize-behavior": "BrightspaceUI/localize-behavior#semver:^2"
+    "vui-input": "^2.1.0",
+    "whatwg-fetch": "^2.0.0"
   },
   "resolutions": {
     "inherits": "2.0.3",
diff --git a/scripts/deploy_artifactory.sh b/scripts/deploy_artifactory.sh
deleted file mode 100644
index d83e211..0000000
--- a/scripts/deploy_artifactory.sh
+++ /dev/null
@@ -1,18 +0,0 @@
-#!/bin/bash
-
-set -eu
-
-USER=$1
-PASS=$2
-TAG=$3
-
-echo $3
-
-if $CIRCLECI; then
-	sudo npm install -g artifactory-push
-else
-	npm install -g artifactory-push
-fi
-
-tar --exclude=.* --exclude=node_modules --exclude=bower_components --exclude=scripts --exclude=circle.yml --exclude=package.json --exclude=yarn.lock --exclude=src --exclude=app.html --exclude=sass --exclude=css --exclude=CONTRIBUTING.md -cvzf d2l-assignments-ui-$TAG.tar.gz *
-artifactory-push -f d2l-assignments-ui-$TAG.tar.gz -t https://d2lartifacts.artifactoryonline.com/d2lartifacts/simple/bower-local/d2l-assignments-ui/d2l-assignments-ui/d2l-assignments-ui-$TAG.tar.gz -u $USER -p $PASS
diff --git a/test-resources/behavior-elements/assignment-attachment-behavior.js b/test-resources/behavior-elements/assignment-attachment-behavior.js
index c95417b..c34593d 100644
--- a/test-resources/behavior-elements/assignment-attachment-behavior.js
+++ b/test-resources/behavior-elements/assignment-attachment-behavior.js
@@ -1,4 +1,4 @@
-import '@polymer/polymer/polymer-legacy.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 import '../../d2l-assignment-attachment-behavior.js';
 Polymer({
 	is: 'assignment-attachment-behavior',
diff --git a/test/d2l-assignment-attachment-behavior_test.html b/test/d2l-assignment-attachment-behavior_test.html
index 2398ee3..ff5bdb1 100644
--- a/test/d2l-assignment-attachment-behavior_test.html
+++ b/test/d2l-assignment-attachment-behavior_test.html
@@ -6,8 +6,8 @@
 
 		<title>d2l-assignment-attachment-behavior test</title>
 
-		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-		<script src="../../wct-browser-legacy/browser.js"></script>
+		<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../../wct-browser-legacy/browser.js"></script>
 
 		<script type="module" src="../test-resources/behavior-elements/assignment-attachment-behavior.js"></script>
 	</head>
@@ -26,8 +26,6 @@
 		var linkHref = 'linkHref';
 		var deleteAction = 'deleteAction';
 		var linkName = 'linkName';
-		var linkType = 'linkType';
-
 
 		var link = {
 			getActionByName: sinon.stub().returns(deleteAction),
diff --git a/test/d2l-assignment-editor_test.html b/test/d2l-assignment-editor_test.html
index f25c8d2..c30bc74 100644
--- a/test/d2l-assignment-editor_test.html
+++ b/test/d2l-assignment-editor_test.html
@@ -6,8 +6,8 @@
 
 	<title>d2l-assignment-editor test</title>
 
-	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-	<script src="../../wct-browser-legacy/browser.js"></script>
+	<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+	<script src="../../../wct-browser-legacy/browser.js"></script>
 
 	<script type="module" src="../d2l-assignment-editor.js"></script>
 
@@ -26,869 +26,868 @@
 			<d2l-assignment-editor></d2l-assignment-editor>
 		</template>
 	</test-fixture>
+	<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
+	<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 	<script type="module">
-import '../d2l-assignment-editor.js';
-function getAttachment() {
-	return {
-		type: 'Document',
-		name: 'name',
-		id: 'testId',
-		url: 'testUrl',
-		isDeleted: false,
-		file: new File([], 'fileName'),
-	};
-}
-function getExistingAttachment() {
-	return {
-		type: 'Document',
-		name: 'name',
-		id: 'testId',
-		url: 'testUrl',
-		isDeleted: false,
-		deleteAction: {
-			href: 'testDeleteUrl',
-			method: 'DELETE'
-		},
-	};
-}
-function getSubmissionOptions() {
-	var actions = window.testFixtures.assignmentHomeCanCreate.actions;
-	var quickCreate = actions.find(function(action){ 
-		return action.name == "quick-create-folder";
-	});
-
-	var availableSubmssionOptions = quickCreate.fields.find(function(field) {
-		return field.name == "submissionType";
-	});
-
-	var availableCompletionOptions = quickCreate.fields.find(function(field) {
-		return field.name == "completionType";
-	});
-
-	return {
-		availableSubmssionOptions: availableSubmssionOptions,
-		availableCompletionOptions: availableCompletionOptions
-	};
-}
-
-describe('d2l-assignment-editor', function() {
-	var editor;
-	var fetch;
-
-	afterEach(() => {
-		fetch && fetch.restore();
-	});
-
-	describe('when loading new editor and can create', function() {
-		beforeEach(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
-				}
-			});
-			window.d2lfetch.fetch.returns(promise);
-		});
-
-		it('is loaded if can create assignments', function(done) {
-			var editor = fixture('fromUrl');
-			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-				if (done.isDone) return;
-				assert.equal(event.detail, true);
+	import '../d2l-assignment-editor.js';
+	import SirenParse from 'siren-parser';
+	function getAttachment() {
+		return {
+			type: 'Document',
+			name: 'name',
+			id: 'testId',
+			url: 'testUrl',
+			isDeleted: false,
+			file: new File([], 'fileName'),
+		};
+	}
+	function getExistingAttachment() {
+		return {
+			type: 'Document',
+			name: 'name',
+			id: 'testId',
+			url: 'testUrl',
+			isDeleted: false,
+			deleteAction: {
+				href: 'testDeleteUrl',
+				method: 'DELETE'
+			},
+		};
+	}
+	function getSubmissionOptions() {
+		var actions = window.testFixtures.assignmentHomeCanCreate.actions;
+		var quickCreate = actions.find(function(action) {
+			return action.name === 'quick-create-folder';
+		});
+
+		var availableSubmssionOptions = quickCreate.fields.find(function(field) {
+			return field.name === 'submissionType';
+		});
+
+		var availableCompletionOptions = quickCreate.fields.find(function(field) {
+			return field.name === 'completionType';
+		});
+
+		return {
+			availableSubmssionOptions: availableSubmssionOptions,
+			availableCompletionOptions: availableCompletionOptions
+		};
+	}
+
+	describe('d2l-assignment-editor', function() {
+		var editor;
+		var fetch;
 
-				done.isDone = true;
-				done();
-			});
+		afterEach(() => {
+			fetch && fetch.restore();
 		});
-	});
 
-	describe('when loading new editor and cannot create', function() {
-		describe('assignments tool loaded', function() {
+		describe('when loading new editor and can create', function() {
 			beforeEach(function() {
 				fetch = sinon.stub(window.d2lfetch, 'fetch');
 				var promise = Promise.resolve({
 					ok: true,
 					json: function() {
-						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCannotCreate));
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
 					}
 				});
 				window.d2lfetch.fetch.returns(promise);
 			});
 
-			it('is not loaded if cannot create assignments', function(done) {
+			it('is loaded if can create assignments', function(done) {
 				var editor = fixture('fromUrl');
 				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					assert.equal(event.detail, false);
+					if (done.isDone) return;
+					assert.equal(event.detail, true);
+
+					done.isDone = true;
 					done();
 				});
 			});
 		});
 
-		describe('assignments tool disabled', function() {
-			beforeEach(function() {
-				fetch = sinon.stub(window.d2lfetch, 'fetch');
-				var promise = Promise.resolve({
-					ok: false,
+		describe('when loading new editor and cannot create', function() {
+			describe('assignments tool loaded', function() {
+				beforeEach(function() {
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
+					var promise = Promise.resolve({
+						ok: true,
+						json: function() {
+							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCannotCreate));
+						}
+					});
+					window.d2lfetch.fetch.returns(promise);
 				});
-				window.d2lfetch.fetch.returns(promise);
-			});
 
-			it('is not loaded', function(done) {
-				var editor = fixture('fromUrl');
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					assert.equal(event.detail, false);
-					done();
+				it('is not loaded if cannot create assignments', function(done) {
+					var editor = fixture('fromUrl');
+					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+						assert.equal(event.detail, false);
+						done();
+					});
 				});
 			});
-		});
-	});
 
-	describe('assignments validation errors', function() {
-		describe('name validation error', function() {
-			var editor;
-			beforeEach(function() {
-				editor = fixture('manual');
-				editor.$.instructions.value = 'In a while crocodile';
-				editor.$.dueDate.value = '2017-10-10T05:05:05.555';
-			});
+			describe('assignments tool disabled', function() {
+				beforeEach(function() {
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
+					var promise = Promise.resolve({
+						ok: false,
+					});
+					window.d2lfetch.fetch.returns(promise);
+				});
 
-			it('shows validation error for invalid field', function(done) {
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#name-error').className).to.contain('d2l-bubble-show');
-					done();
+				it('is not loaded', function(done) {
+					var editor = fixture('fromUrl');
+					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+						assert.equal(event.detail, false);
+						done();
+					});
 				});
 			});
+		});
 
-			it('sets invalid state on field', function(done) {
-				editor.save();
-				flush(function() {
-					expect(editor.$.name.hasAttribute('aria-invalid')).to.be.true;
-					done();
+		describe('assignments validation errors', function() {
+			describe('name validation error', function() {
+				var editor;
+				beforeEach(function() {
+					editor = fixture('manual');
+					editor.$.instructions.value = 'In a while crocodile';
+					editor.$.dueDate.value = '2017-10-10T05:05:05.555';
 				});
-			});
 
-			it('clears error state on typing', function(done) {
-				editor.save();
-				flush(function() {
-					editor.name = "Fix me";
+				it('shows validation error for invalid field', function(done) {
+					editor.save();
 					flush(function() {
-						expect(editor.$.name.hasAttribute('aria-invaliid')).to.be.false;
-						expect(editor.$$('#name-error').className).not.to.contain('d2l-bubble-show');
+						expect(editor.$$('#name-error').className).to.contain('d2l-bubble-show');
 						done();
 					});
 				});
-			});
-		});
 
-		describe('maximumGrade validation error', function() {
-			var editor;
-			beforeEach(function() {
-				editor = fixture('manual');
-				editor.addToGrades = true;
-				editor.$.name.value = 'See you later alligator';
-				editor.$.instructions.value = 'In a while crocodile';
-				editor.$.dueDate.value = '2017-10-10T05:05:05.555';
-				editor.$.maximumGrade.value = '';
-			});
+				it('sets invalid state on field', function(done) {
+					editor.save();
+					flush(function() {
+						expect(editor.$.name.hasAttribute('aria-invalid')).to.be.true;
+						done();
+					});
+				});
 
-			it('shows validation error for invalid field, empty input', function(done) {
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-					done();
+				it('clears error state on typing', function(done) {
+					editor.save();
+					flush(function() {
+						editor.name = 'Fix me';
+						flush(function() {
+							expect(editor.$.name.hasAttribute('aria-invaliid')).to.be.false;
+							expect(editor.$$('#name-error').className).not.to.contain('d2l-bubble-show');
+							done();
+						});
+					});
 				});
 			});
 
-			it('shows validation error for invalid field, number too small', function(done) {
-				editor.$.maximumGrade.value = '0.001';
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-					done();
+			describe('maximumGrade validation error', function() {
+				var editor;
+				beforeEach(function() {
+					editor = fixture('manual');
+					editor.addToGrades = true;
+					editor.$.name.value = 'See you later alligator';
+					editor.$.instructions.value = 'In a while crocodile';
+					editor.$.dueDate.value = '2017-10-10T05:05:05.555';
+					editor.$.maximumGrade.value = '';
 				});
-			});
 
-			it('shows validation error for invalid field, number too large', function(done) {
-				editor.$.maximumGrade.value = '10000000000';
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-					done();
+				it('shows validation error for invalid field, empty input', function(done) {
+					editor.save();
+					flush(function() {
+						expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+						done();
+					});
 				});
-			});
 
-			it('shows validation error for invalid field, not a number', function(done) {
-				editor.$.maximumGrade.value = 'D2L';
-				editor.save();
-				flush(function() {
-					expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
-					done();
+				it('shows validation error for invalid field, number too small', function(done) {
+					editor.$.maximumGrade.value = '0.001';
+					editor.save();
+					flush(function() {
+						expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+						done();
+					});
 				});
-			});
 
-			it('sets invalid state on field', function(done) {
-				editor.save();
-				flush(function() {
-					expect(editor.$.maximumGrade.hasAttribute('aria-invalid')).to.be.true;
-					done();
+				it('shows validation error for invalid field, number too large', function(done) {
+					editor.$.maximumGrade.value = '10000000000';
+					editor.save();
+					flush(function() {
+						expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
+						done();
+					});
 				});
-			});
 
-			it('clears error state on typing', function(done) {
-				editor.save();
-				flush(function() {
-					editor.maximumGrade = "1";
+				it('shows validation error for invalid field, not a number', function(done) {
+					editor.$.maximumGrade.value = 'D2L';
+					editor.save();
 					flush(function() {
-						expect(editor.$.maximumGrade.hasAttribute('aria-invaliid')).to.be.false;
-						expect(editor.$$('#maximum-grade-error').className).not.to.contain('d2l-bubble-show');
+						expect(editor.$$('#maximum-grade-error').className).to.contain('d2l-bubble-show');
 						done();
 					});
 				});
-			});
-		});
-	});
 
-	describe('assignments save new', function() {
-		beforeEach(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
+				it('sets invalid state on field', function(done) {
+					editor.save();
+					flush(function() {
+						expect(editor.$.maximumGrade.hasAttribute('aria-invalid')).to.be.true;
+						done();
+					});
+				});
 
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assigmentNewFolder));
-				}
+				it('clears error state on typing', function(done) {
+					editor.save();
+					flush(function() {
+						editor.maximumGrade = '1';
+						flush(function() {
+							expect(editor.$.maximumGrade.hasAttribute('aria-invaliid')).to.be.false;
+							expect(editor.$$('#maximum-grade-error').className).not.to.contain('d2l-bubble-show');
+							done();
+						});
+					});
+				});
 			});
-			window.d2lfetch.fetch.returns(promise);
 		});
 
-		it('save succeeds', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
-
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'POST')));
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+		describe('assignments save new', function() {
+			beforeEach(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					assert(data.includes("Testing 123"));
-					done();
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assigmentNewFolder));
+					}
 				});
+				window.d2lfetch.fetch.returns(promise);
 			});
-			editor.name = "Testing 123";
-			editor.save();
-		});
-	});
-
-	describe('assignments checkDirty', function() {
-		var editor;
-		beforeEach(function() {
-			editor = fixture('manual');
-			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
-
-			editor.name = 'How now brown cow';
-			editor.instructions = 'In a while crocodile';
-			editor.dueDate = '2017-10-10T05:05:05.555';
-			editor.addToGrades = true;
-			editor.maximumGrade = '10';
-			editor.existingAttachments = [ getExistingAttachment() ];
-			editor.attachmentsToSave = [];
-
-			editor.$.data.getInitialValues = function() {
-				return {
-					name: 'How now brown cow',
-					instructions: 'In a while crocodile',
-					dueDate: '2017-10-10T05:05:05.555',
-					outOf: '10',
-					addToGrades: true,
-					existingAttachments: [ getExistingAttachment() ],
-					attachmentsToSave: []
-				}
-			}
-		});
 
-		it('returns false when the nothing is changed', function() {
-			expect(editor.checkDirty()).to.be.false;
-		});
+			it('save succeeds', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
 
-		it('returns true when the name is changed', function() {
-			editor.name = 'CHANGEDNAME';
-			expect(editor.checkDirty()).to.be.true;
-		});
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'POST')));
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-		it('returns true when the instructions are changed', function() {
-			editor.instructions = 'CHANGEDINSTRUCTIONS';
-			expect(editor.checkDirty()).to.be.true;
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						assert(data.includes('Testing 123'));
+						done();
+					});
+				});
+				editor.name = 'Testing 123';
+				editor.save();
+			});
 		});
 
-		it('returns true when the dueDate is changed', function() {
-			editor.dueDate = '2017-10-10T05:05:05.123';
-			expect(editor.checkDirty()).to.be.true;
-		});
+		describe('assignments checkDirty', function() {
+			var editor;
+			beforeEach(function() {
+				editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
 
-		it('returns true when addToGrades is changed', function() {
-			editor.addToGrades = false;
-			expect(editor.checkDirty()).to.be.true;
-		});
+				editor.name = 'How now brown cow';
+				editor.instructions = 'In a while crocodile';
+				editor.dueDate = '2017-10-10T05:05:05.555';
+				editor.addToGrades = true;
+				editor.maximumGrade = '10';
+				editor.existingAttachments = [ getExistingAttachment() ];
+				editor.attachmentsToSave = [];
+
+				editor.$.data.getInitialValues = function() {
+					return {
+						name: 'How now brown cow',
+						instructions: 'In a while crocodile',
+						dueDate: '2017-10-10T05:05:05.555',
+						outOf: '10',
+						addToGrades: true,
+						existingAttachments: [ getExistingAttachment() ],
+						attachmentsToSave: []
+					};
+				};
+			});
 
-		it('returns true when the maximum grade is changed', function() {
-			editor.maximumGrade = '100';
-			expect(editor.checkDirty()).to.be.true;
-		});
+			it('returns false when the nothing is changed', function() {
+				expect(editor.checkDirty()).to.be.false;
+			});
 
-		it('returns true when any attachments are in the removed state', function() {
-			editor.attachmentsToSave = [ getAttachment() ];
-			expect(editor.checkDirty()).to.be.true;
-		});
+			it('returns true when the name is changed', function() {
+				editor.name = 'CHANGEDNAME';
+				expect(editor.checkDirty()).to.be.true;
+			});
 
-		it('returns true when there are any new attachments added', function() {
-			var deletedAttachment = getExistingAttachment();
-			deletedAttachment.isDeleted = true;
-			editor.existingAttachments = [ deletedAttachment ];
-			expect(editor.checkDirty()).to.be.true;
-		});
-	});
+			it('returns true when the instructions are changed', function() {
+				editor.instructions = 'CHANGEDINSTRUCTIONS';
+				expect(editor.checkDirty()).to.be.true;
+			});
 
-	describe('assignments clear', function() {
-		var editor;
-		beforeEach(function() {
-			editor = fixture('manual');
-			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate))
-
-			editor.name = 'How now brown cow';
-			editor.instructions = 'In a while crocodile';
-			editor.dueDate = '2017-10-10T05:05:05.555';
-			editor.addToGrades = true;
-			editor.maximumGrade = '10';
-
-			expect(editor.$.name.value).to.equal('How now brown cow');
-			expect(editor.$.instructions.value).to.equal('In a while crocodile');
-			expect(editor.$.dueDate.datetime).to.equal('2017-10-10T05:05:05.555');
-			expect(editor.$.addToGrades.checked).to.be.true;
-			expect(editor.$.maximumGrade.value).to.equal('10');
-		});
+			it('returns true when the dueDate is changed', function() {
+				editor.dueDate = '2017-10-10T05:05:05.123';
+				expect(editor.checkDirty()).to.be.true;
+			});
 
-		it('clears all fields and sets focus', function(done) {
-			editor.clear();
-			flush(function() {
-				expect(editor.$.name.value).to.be.empty;
-				expect(editor.$.instructions.value).to.be.empty;
-				expect(editor.$.dueDate.datetime).to.be.empty;
-				expect(editor.$.addToGrades.checked).to.not.be.true;
-				expect(editor.$.maximumGrade.value).to.equal('100');
-				flush(function() {
-					expect(document.activeElement).to.equal(editor.$.name);
-				});
-				done();
+			it('returns true when addToGrades is changed', function() {
+				editor.addToGrades = false;
+				expect(editor.checkDirty()).to.be.true;
 			});
 
-		});
+			it('returns true when the maximum grade is changed', function() {
+				editor.maximumGrade = '100';
+				expect(editor.checkDirty()).to.be.true;
+			});
 
-		it('clears all fields and skips focus', function(done) {
-			editor.clear(true);
-			flush(function() {
-				expect(editor.$.name.value).to.be.empty;
-				expect(editor.$.instructions.value).to.be.empty;
-				expect(editor.$.dueDate.datetime).to.be.empty;
-				expect(editor.$.addToGrades.checked).to.not.be.true;
-				expect(editor.$.maximumGrade.value).to.equal('100');
-				expect(document.activeElement).to.not.equal(editor.$.name);
-				done();
+			it('returns true when any attachments are in the removed state', function() {
+				editor.attachmentsToSave = [ getAttachment() ];
+				expect(editor.checkDirty()).to.be.true;
 			});
-		});
-	});
 
-	describe('when loading existing assignment and can edit', function() {
-		beforeEach(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-				}
+			it('returns true when there are any new attachments added', function() {
+				var deletedAttachment = getExistingAttachment();
+				deletedAttachment.isDeleted = true;
+				editor.existingAttachments = [ deletedAttachment ];
+				expect(editor.checkDirty()).to.be.true;
 			});
-			window.d2lfetch.fetch.returns(promise);
 		});
 
-		it('is loaded if can edit assignments', function(done) {
-			var editor = fixture('fromUrl');
-			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-				if (done.isDone) return;
-				assert.equal(event.detail, true);
+		describe('assignments clear', function() {
+			var editor;
+			beforeEach(function() {
+				editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
+
+				editor.name = 'How now brown cow';
+				editor.instructions = 'In a while crocodile';
+				editor.dueDate = '2017-10-10T05:05:05.555';
+				editor.addToGrades = true;
+				editor.maximumGrade = '10';
 
-				done.isDone = true;
-				done();
+				expect(editor.$.name.value).to.equal('How now brown cow');
+				expect(editor.$.instructions.value).to.equal('In a while crocodile');
+				expect(editor.$.dueDate.datetime).to.equal('2017-10-10T05:05:05.555');
+				expect(editor.$.addToGrades.checked).to.be.true;
+				expect(editor.$.maximumGrade.value).to.equal('10');
 			});
-		});
 
-		it('populates existing fields', function(done) {
-			var editor = fixture('fromUrl');
-			editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-				if (done.isDone) return;
+			it('clears all fields and sets focus', function(done) {
+				editor.clear();
 				flush(function() {
-					expect(editor.$.name.value).to.equal('Here is your new assignment');
-					expect(editor.$.instructions.value).to.equal('These are the instructions');
-					// Cannot do exact date comparisons until we introduce timezones - as will fail in CircleCI
-					// expect(editor.$.dueDate.value).to.equal('2017-12-31T12:59:00');
-					expect(editor.$.dueDate.datetime).to.not.be.empty;
+					expect(editor.$.name.value).to.be.empty;
+					expect(editor.$.instructions.value).to.be.empty;
+					expect(editor.$.dueDate.datetime).to.be.null;
+					expect(editor.$.addToGrades.checked).to.not.be.true;
+					expect(editor.$.maximumGrade.value).to.equal('100');
+					flush(function() {
+						expect(document.activeElement).to.equal(editor.$.name);
+					});
+					done();
+				});
 
-					done.isDone = true;
+			});
+
+			it('clears all fields and skips focus', function(done) {
+				editor.clear(true);
+				flush(function() {
+					expect(editor.$.name.value).to.be.empty;
+					expect(editor.$.instructions.value).to.be.empty;
+					expect(editor.$.dueDate.datetime).to.be.null;
+					expect(editor.$.addToGrades.checked).to.not.be.true;
+					expect(editor.$.maximumGrade.value).to.equal('100');
+					expect(document.activeElement).to.not.equal(editor.$.name);
 					done();
 				});
 			});
 		});
-	});
 
-	describe('when loading existing assignment and cannot edit', function() {
-		describe('assignments tool enabled', function() {
+		describe('when loading existing assignment and can edit', function() {
 			beforeEach(function() {
 				fetch = sinon.stub(window.d2lfetch, 'fetch');
-
 				var promise = Promise.resolve({
 					ok: true,
 					json: function() {
-						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
 					}
 				});
 				window.d2lfetch.fetch.returns(promise);
 			});
 
-			it('is not loaded if cannot edit assignments', function(done) {
+			it('is loaded if can edit assignments', function(done) {
 				var editor = fixture('fromUrl');
 				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					assert.equal(event.detail, false);
+					if (done.isDone) return;
+					assert.equal(event.detail, true);
+
+					done.isDone = true;
 					done();
 				});
 			});
-		});
-	});
 
-	describe('assignments edit', function() {
-		beforeEach(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
+			it('populates existing fields', function(done) {
+				var editor = fixture('fromUrl');
+				editor.addEventListener('d2l-assignment-editor-loaded', function() {
+					if (done.isDone) return;
+					flush(function() {
+						expect(editor.$.name.value).to.equal('Here is your new assignment');
+						expect(editor.$.instructions.value).to.equal('These are the instructions');
+						// Cannot do exact date comparisons until we introduce timezones - as will fail in CircleCI
+						// expect(editor.$.dueDate.value).to.equal('2017-12-31T12:59:00');
+						expect(editor.$.dueDate.datetime).to.not.be.empty;
 
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-				}
+						done.isDone = true;
+						done();
+					});
+				});
 			});
-			window.d2lfetch.fetch.returns(promise);
 		});
 
-		it('save succeeds', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
+		describe('when loading existing assignment and cannot edit', function() {
+			describe('assignments tool enabled', function() {
+				beforeEach(function() {
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+					var promise = Promise.resolve({
+						ok: true,
+						json: function() {
+							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
+						}
+					});
+					window.d2lfetch.fetch.returns(promise);
+				});
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					assert(data.includes("Testing 123"));
-					assert(data.includes("mission"));
-					done();
+				it('is not loaded if cannot edit assignments', function(done) {
+					var editor = fixture('fromUrl');
+					editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
+						assert.equal(event.detail, false);
+						done();
+					});
 				});
 			});
-			editor.name = "Testing 123";
-			editor.instructions = "This is your mission should you choose to accept it";
-			editor.save();
 		});
 
-		it('skips instructions if not updated', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
-
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+		describe('assignments edit', function() {
+			beforeEach(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					expect(data.includes("instructions")).to.be.false;
-					done();
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
+					}
 				});
+				window.d2lfetch.fetch.returns(promise);
 			});
-			editor.name = "Testing 123";
-			editor.instructions = "These are the instructions";
-			editor.save();
-		});
 
-		it('skips dueDate if not provided or updated', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructorNoDueDate))
+			it('save succeeds', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					expect(data.includes("dueDate")).to.be.false;
-					done();
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						assert(data.includes('Testing 123'));
+						assert(data.includes('mission'));
+						done();
+					});
 				});
+				editor.name = 'Testing 123';
+				editor.instructions = 'This is your mission should you choose to accept it';
+				editor.save();
 			});
-			editor.name = "Testing 123";
-			editor.instructions = "These are the instructions";
-			editor.save();
-		});
 
-		it('includes dueDate if reset', function(done) {
-			var editor = fixture('manual');
-			editor.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor))
+			it('skips instructions if not updated', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-			editor.addEventListener('d2l-assignment-save-complete', function(event) {
-				assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
-				assert.equal(event.detail.id,
-					"http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028");
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-				var request = fetch.args[0][0];
-				request.text().then(function(data) {
-					expect(data.includes("dueDate")).to.be.true;
-					done();
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						expect(data.includes('instructions')).to.be.false;
+						done();
+					});
 				});
+				editor.name = 'Testing 123';
+				editor.instructions = 'These are the instructions';
+				editor.save();
 			});
-			editor.name = "Testing 123";
-			editor.instructions = "These are the instructions";
-			editor.dueDate = "";
-			editor.save();
-		});
-	});
 
-	describe('add to grades checkbox', function() {
-		var editor;
-		var hiddenMaxGradeInput = 'div.maximum-grade-wrapper[hidden]';
+			it('skips dueDate if not provided or updated', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructorNoDueDate));
 
-		beforeEach(function() {
-			editor = fixture('manual');
-			expect(editor.$.addToGrades).to.not.be.null;
-		});
-
-		it('when addToGrades is true, checkbox should be checked and max grade field visible', function() {
-			editor.addToGrades = true;
-			expect(editor.$.addToGrades.checked).to.be.true;
-			expect(editor.$$(hiddenMaxGradeInput)).to.be.null;
-		});
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-		it('when addToGrades is false, checkbox should not be checked and max grade field hidden', function() {
-			editor.addToGrades = false;
-			expect(editor.$.addToGrades.checked).to.be.false;
-			expect(editor.$$(hiddenMaxGradeInput)).to.not.be.null;
-		});
-	});
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						expect(data.includes('dueDate')).to.be.false;
+						done();
+					});
+				});
+				editor.name = 'Testing 123';
+				editor.instructions = 'These are the instructions';
+				editor.save();
+			});
 
-	describe('addding file attachments', function() {
-		var editor;
+			it('includes dueDate if reset', function(done) {
+				var editor = fixture('manual');
+				editor.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-		beforeEach(function() {
-			editor = fixture('manual');
-			editor.$.data._newFileToAttachment = sinon.stub().returns(getAttachment());
-		});
+				editor.addEventListener('d2l-assignment-save-complete', function(event) {
+					assert(fetch.calledWith(sinon.match.has('method', 'PUT')), 'HTTP method');
+					assert.equal(event.detail.id,
+						'http://ULX1-MBAYLY:44444/d2l/api/hm/assignments/6609/folders/40028');
 
-		describe('when making a new assignment', function() {
-			beforeEach(function() {
-				editor.isNewAssignment = true;
-			});
-			it('adds a file', function() {
-				editor.addFiles([ new File([], 'f1') ]);
-				expect(editor.attachmentsToSave.length).to.equal(1);
-			});
-			it('adds multiple files', function() {
-				editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
-				expect(editor.attachmentsToSave.length).to.equal(2);
+					var request = fetch.args[0][0];
+					request.text().then(function(data) {
+						expect(data.includes('dueDate')).to.be.true;
+						done();
+					});
+				});
+				editor.name = 'Testing 123';
+				editor.instructions = 'These are the instructions';
+				editor.dueDate = '';
+				editor.save();
 			});
 		});
 
-		describe('when editing an assignment', function() {
+		describe('add to grades checkbox', function() {
+			var editor;
+			var hiddenMaxGradeInput = 'div.maximum-grade-wrapper[hidden]';
+
 			beforeEach(function() {
-				editor.isNewAssignment = false;
+				editor = fixture('manual');
+				expect(editor.$.addToGrades).to.not.be.null;
 			});
-			it('adds a file', function() {
-				editor.addFiles([ new File([], 'f1') ]);
-				expect(editor.attachmentsToSave.length).to.equal(1);
+
+			it('when addToGrades is true, checkbox should be checked and max grade field visible', function() {
+				editor.addToGrades = true;
+				expect(editor.$.addToGrades.checked).to.be.true;
+				expect(editor.$$(hiddenMaxGradeInput)).to.be.null;
 			});
-			it('adds multiple files', function() {
-				editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
-				expect(editor.attachmentsToSave.length).to.equal(2);
+
+			it('when addToGrades is false, checkbox should not be checked and max grade field hidden', function() {
+				editor.addToGrades = false;
+				expect(editor.$.addToGrades.checked).to.be.false;
+				expect(editor.$$(hiddenMaxGradeInput)).to.not.be.null;
 			});
 		});
-	});
-	describe('removing an attachment', function() {
-		var editor;
 
-		beforeEach(function() {
-			editor = fixture('manual');
-		});
+		describe('addding file attachments', function() {
+			var editor;
 
-		describe('when making a new assignment', function() {
 			beforeEach(function() {
-				editor.isNewAssignment = true;
+				editor = fixture('manual');
+				editor.$.data._newFileToAttachment = sinon.stub().returns(getAttachment());
 			});
 
-			it('removes the attachment from the view', function() {
-				editor.attachmentsToSave = [ getAttachment() ];
-				var elementModel = {
-					item: editor.attachmentsToSave[0],
-					set: sinon.stub()
-				};
-				editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+			describe('when making a new assignment', function() {
+				beforeEach(function() {
+					editor.isNewAssignment = true;
+				});
+				it('adds a file', function() {
+					editor.addFiles([ new File([], 'f1') ]);
+					expect(editor.attachmentsToSave.length).to.equal(1);
+				});
+				it('adds multiple files', function() {
+					editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
+					expect(editor.attachmentsToSave.length).to.equal(2);
+				});
+			});
 
-				expect(editor.attachmentsToSave.length).to.equal(1);
-				editor._onAttachmentRemoved({
-					target: editor.$$('d2l-attachment')
+			describe('when editing an assignment', function() {
+				beforeEach(function() {
+					editor.isNewAssignment = false;
+				});
+				it('adds a file', function() {
+					editor.addFiles([ new File([], 'f1') ]);
+					expect(editor.attachmentsToSave.length).to.equal(1);
+				});
+				it('adds multiple files', function() {
+					editor.addFiles([ new File([], 'f1'), new File([], 'f2') ]);
+					expect(editor.attachmentsToSave.length).to.equal(2);
 				});
-				expect(editor.attachmentsToSave.length).to.equal(0);
 			});
 		});
+		describe('removing an attachment', function() {
+			var editor;
 
-		describe('when editing an assignment', function() {
 			beforeEach(function() {
-				editor.isNewAssignment = false;
+				editor = fixture('manual');
 			});
-			it('sets a new attachment to "undo" state', function(done) {
-				editor.attachmentsToSave = [ getAttachment() ];
-				var elementModel = {
-					item: editor.attachmentsToSave[0],
-					set: sinon.stub()
-				};
-				editor.$.attachments.modelForElement = sinon.stub().returns( elementModel );
-				editor._onAttachmentRemoved({
-					target: editor.$$('d2l-attachment')
+
+			describe('when making a new assignment', function() {
+				beforeEach(function() {
+					editor.isNewAssignment = true;
 				});
 
-				expect(editor.existingAttachments.length).to.equal(0);
-				expect(editor.attachmentsToSave.length).to.equal(1);
-				expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
-				done();
-			});
-			it('sets an existing attachment to "undo" state', function() {
-				editor.existingAttachments = [ getExistingAttachment() ];
-				var elementModel = {
-					item: editor.existingAttachments[0],
-					set: sinon.stub()
-				};
-				editor.$.attachments.modelForElement = sinon.stub().returns( elementModel );
-				editor._onAttachmentRemoved({
-					target: editor.$$('d2l-attachment')
+				it('removes the attachment from the view', function() {
+					editor.attachmentsToSave = [ getAttachment() ];
+					var elementModel = {
+						item: editor.attachmentsToSave[0],
+						set: sinon.stub()
+					};
+					editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+
+					expect(editor.attachmentsToSave.length).to.equal(1);
+					editor._onAttachmentRemoved({
+						target: editor.$$('d2l-attachment')
+					});
+					expect(editor.attachmentsToSave.length).to.equal(0);
 				});
-				expect(editor.attachmentsToSave.length).to.equal(0);
-				expect(editor.existingAttachments.length).to.equal(1);
-				expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
 			});
-		});
-	});
 
-	describe('saving an assignment', function() {
-		var editor,
-			attachments,
-			data,
-			savePromise = 'savePromise',
-			deletePromise = 'deletePromise';
-
-		beforeEach(function() {
-			editor = fixture('manual');
-			data = editor.$.data;
-			attachments = {
-				hasActionByName: sinon.stub().returns(true),
-				getActionByName: sinon.stub().returns('action')
-			};
-			data._saveFile = sinon.stub().returns(savePromise);
-			data._removeFile = sinon.stub().returns(deletePromise);
-		});
+			describe('when editing an assignment', function() {
+				beforeEach(function() {
+					editor.isNewAssignment = false;
+				});
+				it('sets a new attachment to "undo" state', function(done) {
+					editor.attachmentsToSave = [ getAttachment() ];
+					var elementModel = {
+						item: editor.attachmentsToSave[0],
+						set: sinon.stub()
+					};
+					editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+					editor._onAttachmentRemoved({
+						target: editor.$$('d2l-attachment')
+					});
 
-		it('adds all the new files', function() {
-			var attachment = getAttachment();
-			attachmentsToSave = [ attachment ];
-			existingAttachments = [];
-			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-			expect(promiseArray.length).to.equal(1);
-			expect(promiseArray[0]).to.equal(savePromise);
-		});
-		it('does not add or delete any files that are new and marked as removed', function() {
-			var attachment = getAttachment();
-			attachment.isDeleted = true;
-			attachmentsToSave = [ attachment ];
-			existingAttachments = [];
-			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-			expect(promiseArray.length).to.equal(0);
-		});
-		it('deletes all the removed files', function() {
-			var attachment = getExistingAttachment();
-			attachment.isDeleted = true;
-			attachmentsToSave = [];
-			existingAttachments = [ attachment ];
-			var promiseArray = data._getAddDeletePromises( attachments, attachmentsToSave, existingAttachments );
-			expect(promiseArray.length).to.equal(1);
-			expect(promiseArray[0]).to.equal(deletePromise);
+					expect(editor.existingAttachments.length).to.equal(0);
+					expect(editor.attachmentsToSave.length).to.equal(1);
+					expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
+					done();
+				});
+				it('sets an existing attachment to "undo" state', function() {
+					editor.existingAttachments = [ getExistingAttachment() ];
+					var elementModel = {
+						item: editor.existingAttachments[0],
+						set: sinon.stub()
+					};
+					editor.$.attachments.modelForElement = sinon.stub().returns(elementModel);
+					editor._onAttachmentRemoved({
+						target: editor.$$('d2l-attachment')
+					});
+					expect(editor.attachmentsToSave.length).to.equal(0);
+					expect(editor.existingAttachments.length).to.equal(1);
+					expect(elementModel.set.calledWith('item.isDeleted', true)).to.equal(true);
+				});
+			});
 		});
-	});
-
-	describe('generating attachment objects', function() {
-		var editor;
 
-		beforeEach(function() {
-			editor = fixture('manual');
-		});
+		describe('saving an assignment', function() {
+			var editor,
+				attachments,
+				data,
+				savePromise = 'savePromise',
+				deletePromise = 'deletePromise';
 
-		it('generates the correct attachment object from a new "File" object', function() {
-			var objectUrl = 'objectUrl';
-			var fileName = 'fileName';
-			URL.createObjectURL = sinon.stub().returns(objectUrl);
-			var newFile = new File([], fileName);
-			var createdAttachment = editor.$.data._newFileToAttachment(newFile);
-
-			expect(createdAttachment).to.deep.include({
-				type: 'Document',
-				name: fileName,
-				id: objectUrl,
-				url: objectUrl,
-				file: newFile,
-				isDeleted: false
-			});
-		});
+			beforeEach(function() {
+				editor = fixture('manual');
+				data = editor.$.data;
+				attachments = {
+					hasActionByName: sinon.stub().returns(true),
+					getActionByName: sinon.stub().returns('action')
+				};
+				data._saveFile = sinon.stub().returns(savePromise);
+				data._removeFile = sinon.stub().returns(deletePromise);
+			});
+
+			it('adds all the new files', function() {
+				var attachment = getAttachment();
+				var attachmentsToSave = [ attachment ];
+				var existingAttachments = [];
+				var promiseArray = data._getAddDeletePromises(attachments, attachmentsToSave, existingAttachments);
+				expect(promiseArray.length).to.equal(1);
+				expect(promiseArray[0]).to.equal(savePromise);
+			});
+			it('does not add or delete any files that are new and marked as removed', function() {
+				var attachment = getAttachment();
+				attachment.isDeleted = true;
+				var attachmentsToSave = [ attachment ];
+				var existingAttachments = [];
+				var promiseArray = data._getAddDeletePromises(attachments, attachmentsToSave, existingAttachments);
+				expect(promiseArray.length).to.equal(0);
+			});
+			it('deletes all the removed files', function() {
+				var attachment = getExistingAttachment();
+				attachment.isDeleted = true;
+				var attachmentsToSave = [];
+				var existingAttachments = [ attachment ];
+				var promiseArray = data._getAddDeletePromises(attachments, attachmentsToSave, existingAttachments);
+				expect(promiseArray.length).to.equal(1);
+				expect(promiseArray[0]).to.equal(deletePromise);
+			});
+		});
+
+		describe('generating attachment objects', function() {
+			var editor;
 
-		it('generates the correct attachment object from file attachment returned from HM', function() {
-			var fileHref = 'fileHref';
-			var deleteAction = 'deleteAction';
-			var fileName = 'fileName';
-			var fileType = 'fileType';
-
-			var file = {
-				getLinkByRel: sinon.stub().returns({ href: fileHref }),
-				getActionByName: sinon.stub().returns(deleteAction),
-				properties: {
-					name: fileName
-				}
-			};
-
-			var createdAttachment = editor.$.data._existingFileToAttachment(file);
-			expect(createdAttachment).to.deep.include({
-				type: 'Document',
-				name: fileName,
-				id: fileHref,
-				url: fileHref,
-				deleteAction: deleteAction,
-				isDeleted: false
+			beforeEach(function() {
+				editor = fixture('manual');
 			});
-		});
 
-		it('generates the correct attachment object from link attachment returned from HM', function() {
-			var linkHref = 'linkHref';
-			var deleteAction = 'deleteAction';
-			var linkName = 'linkName';
-			var linkType = 'linkType';
+			it('generates the correct attachment object from a new "File" object', function() {
+				var objectUrl = 'objectUrl';
+				var fileName = 'fileName';
+				URL.createObjectURL = sinon.stub().returns(objectUrl);
+				var newFile = new File([], fileName);
+				var createdAttachment = editor.$.data._newFileToAttachment(newFile);
 
+				expect(createdAttachment).to.deep.include({
+					type: 'Document',
+					name: fileName,
+					id: objectUrl,
+					url: objectUrl,
+					file: newFile,
+					isDeleted: false
+				});
+			});
 
-			var link = {
-				getActionByName: sinon.stub().returns(deleteAction),
-				properties: {
-					name: linkName,
-					href: linkHref
-				}
-			};
-
-			var createdAttachment = editor.$.data.linkToAttachment(link);
-			expect(createdAttachment).to.deep.include({
-				name: linkName,
-				id: linkHref,
-				url: linkHref,
-				deleteAction: deleteAction,
-				isDeleted: false
-			});
-			expect(createdAttachment.type).to.be.undefined;
-		});
-	});
-
-	describe('Submission options dropdowns', function() {
-		describe('When no submission options are passed', function() {
-			it('Should not show the submission type options dropdown', function(done) {
+			it('generates the correct attachment object from file attachment returned from HM', function() {
+				var fileHref = 'fileHref';
+				var deleteAction = 'deleteAction';
+				var fileName = 'fileName';
 
-				fetch = sinon.stub(window.d2lfetch, 'fetch');
-				var promise = Promise.resolve({
-					ok: true,
-					json: function() {
-						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreateNoSubmissionOptions));
+				var file = {
+					getLinkByRel: sinon.stub().returns({ href: fileHref }),
+					getActionByName: sinon.stub().returns(deleteAction),
+					properties: {
+						name: fileName
 					}
+				};
+
+				var createdAttachment = editor.$.data._existingFileToAttachment(file);
+				expect(createdAttachment).to.deep.include({
+					type: 'Document',
+					name: fileName,
+					id: fileHref,
+					url: fileHref,
+					deleteAction: deleteAction,
+					isDeleted: false
 				});
-				window.d2lfetch.fetch.returns(promise);
-				
-				editor = fixture('fromUrl');
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					expect(editor.$.assignmentSubmissionOptions.hidden).to.be.true;
-					done();
-				});						
 			});
-		});
 
-		describe('When valid submission options are passed', function() {
-			var editor;
-			var submissionOptions = getSubmissionOptions();
+			it('generates the correct attachment object from link attachment returned from HM', function() {
+				var linkHref = 'linkHref';
+				var deleteAction = 'deleteAction';
+				var linkName = 'linkName';
 
-			beforeEach(function() {
-				fetch = sinon.stub(window.d2lfetch, 'fetch');
-				var promise = Promise.resolve({
-					ok: true,
-					json: function() {
-						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
+				var link = {
+					getActionByName: sinon.stub().returns(deleteAction),
+					properties: {
+						name: linkName,
+						href: linkHref
 					}
+				};
+
+				var createdAttachment = editor.$.data.linkToAttachment(link);
+				expect(createdAttachment).to.deep.include({
+					name: linkName,
+					id: linkHref,
+					url: linkHref,
+					deleteAction: deleteAction,
+					isDeleted: false
 				});
-				window.d2lfetch.fetch.returns(promise);
-				editor = fixture('fromUrl');
+				expect(createdAttachment.type).to.be.undefined;
 			});
+		});
 
+		describe('Submission options dropdowns', function() {
+			describe('When no submission options are passed', function() {
+				it('Should not show the submission type options dropdown', function(done) {
 
-			it('Should show the submission type options dropdown', function(done) {
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {							
-					expect(editor.$.assignmentSubmissionOptions.hidden).to.be.false;
-					done();
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
+					var promise = Promise.resolve({
+						ok: true,
+						json: function() {
+							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreateNoSubmissionOptions));
+						}
+					});
+					window.d2lfetch.fetch.returns(promise);
+
+					editor = fixture('fromUrl');
+					editor.addEventListener('d2l-assignment-editor-loaded', function() {
+						expect(editor.$.assignmentSubmissionOptions.hidden).to.be.true;
+						done();
+					});
 				});
 			});
 
-			it('Should hide the completion options when none are associated with the currently selected submission option', function(done) {
-				var submissionTypeWithNoCompletion = submissionOptions.availableSubmssionOptions.value.find(function(option){
-					return option.completionTypes == null;
+			describe('When valid submission options are passed', function() {
+				var editor;
+				var submissionOptions = getSubmissionOptions();
+
+				beforeEach(function() {
+					fetch = sinon.stub(window.d2lfetch, 'fetch');
+					var promise = Promise.resolve({
+						ok: true,
+						json: function() {
+							return Promise.resolve(JSON.stringify(window.testFixtures.assignmentHomeCanCreate));
+						}
+					});
+					window.d2lfetch.fetch.returns(promise);
+					editor = fixture('fromUrl');
 				});
 
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					editor.submissionType = submissionTypeWithNoCompletion.value;
-					flush(function(){
-						expect(editor.$$('#completionType').hidden).to.be.true;
+				it('Should show the submission type options dropdown', function(done) {
+					editor.addEventListener('d2l-assignment-editor-loaded', function() {
+						expect(editor.$.assignmentSubmissionOptions.hidden).to.be.false;
 						done();
-					});					
+					});
 				});
-			});
 
-			it('Should shows the correct completion options that are associated with the currently selected submission option', function(done) {
-				var submissionTypeWithCompletionTypes = submissionOptions.availableSubmssionOptions.value.find(function(option){
-					return option.completionTypes != null;
+				it('Should hide the completion options when none are associated with the currently selected submission option', function(done) {
+					var submissionTypeWithNoCompletion = submissionOptions.availableSubmssionOptions.value.find(function(option) {
+						return option.completionTypes === null;
+					});
+
+					editor.addEventListener('d2l-assignment-editor-loaded', function() {
+						editor.submissionType = submissionTypeWithNoCompletion.value;
+						flush(function() {
+							expect(editor.$$('#completionType').hidden).to.be.true;
+							done();
+						});
+					});
 				});
 
-				editor.addEventListener('d2l-assignment-editor-loaded', function(event) {
-					editor.submissionType = submissionTypeWithCompletionTypes.value;
-					flush(function(){
-						expect(editor.$$('#completionType').hidden).to.be.false;
-						expect(editor.$$('#completionOptionsSelect').length).to.equal(submissionTypeWithCompletionTypes.completionTypes.length);								
-						done();
+				it('Should shows the correct completion options that are associated with the currently selected submission option', function(done) {
+					var submissionTypeWithCompletionTypes = submissionOptions.availableSubmssionOptions.value.find(function(option) {
+						return option.completionTypes !== null;
+					});
+
+					editor.addEventListener('d2l-assignment-editor-loaded', function() {
+						editor.submissionType = submissionTypeWithCompletionTypes.value;
+						flush(function() {
+							expect(editor.$$('#completionType').hidden).to.be.false;
+							expect(editor.$$('#completionOptionsSelect').length).to.equal(submissionTypeWithCompletionTypes.completionTypes.length);
+							done();
+						});
 					});
 				});
 			});
 		});
 	});
-});
-</script>
+	</script>
 	</body>
 </html>
diff --git a/test/d2l-assignment-viewer_test.html b/test/d2l-assignment-viewer_test.html
index 2a13cf0..492fec8 100644
--- a/test/d2l-assignment-viewer_test.html
+++ b/test/d2l-assignment-viewer_test.html
@@ -6,8 +6,8 @@
 
 	<title>d2l-assignment-viewer test</title>
 
-	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-	<script src="../../wct-browser-legacy/browser.js"></script>
+	<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+	<script src="../../../wct-browser-legacy/browser.js"></script>
 
 	<script type="module" src="../d2l-assignment-viewer.js"></script>
 
@@ -25,26 +25,28 @@
 			<d2l-assignment-viewer url="/assignmentStudent"></d2l-assignment-viewer>
 		</template>
 	</test-fixture>
+	<script type="text/javascript" src="https://s.brightspace.com/lib/moment.js/2.15.2/moment.min.js"></script>
+	<script type="text/javascript" src="https://s.brightspace.com/lib/moment-timezone/0.5.10/moment-timezone-with-data.min.js"></script>
 	<script type="module">
-import '../d2l-assignment-viewer.js';
-describe('d2l-assignment-viewer', function() {
-	var viewer;
-	var fetch;
+	import '../d2l-assignment-viewer.js';
+	import SirenParse from 'siren-parser';
+	describe('d2l-assignment-viewer', function() {
+		var fetch;
 
-	afterEach(() => {
-		fetch && fetch.restore();
-	});
+		afterEach(() => {
+			fetch && fetch.restore();
+		});
 
-	describe('loading attachments', function() {
-		it('loads file attachments', function() {
-			var viewer = fixture('basicInstructor');
-			var name1 = 'name1';
-			var name2 = 'name2';
-			var fileHref1 = 'fileHref1';
-			var fileHref2 = 'fileHref2';
+		describe('loading attachments', function() {
+			it('loads file attachments', function() {
+				var viewer = fixture('basicInstructor');
+				var name1 = 'name1';
+				var name2 = 'name2';
+				var fileHref1 = 'fileHref1';
+				var fileHref2 = 'fileHref2';
 
-			var stub = sinon.stub();
-			stub.withArgs('file').returns([
+				var stub = sinon.stub();
+				stub.withArgs('file').returns([
 					{
 						properties: { name: name1 },
 						getLinksByRel: sinon.stub().returns([{ href: fileHref1 }])
@@ -53,461 +55,457 @@
 						properties: { name: name2 },
 						getLinksByRel: sinon.stub().returns([{ href: fileHref2 }])
 					}
-			])
-			stub.withArgs('link').returns([
-				{
-					properties: {name: name1,
-								 href: fileHref1 },
-					getActionByName: sinon.stub().returns('delete')
-				}
-			]);
-			var fileAttachments = {getSubEntitiesByClass: stub};
-
-
-			var files = viewer.$.data._populateFileAttachments(fileAttachments);
-			expect(files.length).to.equal(3);
-			expect(files[0]).to.deep.include({
-				type: 'Document',
-				id: fileHref1,
-				name: name1,
-				url: fileHref1
-			});
-			expect(files[1]).to.deep.include({
-				type: 'Document',
-				id: fileHref2,
-				name: name2,
-				url: fileHref2
-			});
-			expect(files[2]).to.deep.include({
-				id: fileHref1,
-				name: name1,
-				url: fileHref1
+				]);
+				stub.withArgs('link').returns([
+					{
+						properties: {name: name1,
+							href: fileHref1 },
+						getActionByName: sinon.stub().returns('delete')
+					}
+				]);
+				var fileAttachments = {getSubEntitiesByClass: stub};
+
+				var files = viewer.$.data._populateFileAttachments(fileAttachments);
+				expect(files.length).to.equal(3);
+				expect(files[0]).to.deep.include({
+					type: 'Document',
+					id: fileHref1,
+					name: name1,
+					url: fileHref1
+				});
+				expect(files[1]).to.deep.include({
+					type: 'Document',
+					id: fileHref2,
+					name: name2,
+					url: fileHref2
+				});
+				expect(files[2]).to.deep.include({
+					id: fileHref1,
+					name: name1,
+					url: fileHref1
+				});
+				expect(files[2].type).to.be.undefined;
 			});
-			expect(files[2].type).to.be.undefined;
-		})
-	});
+		});
 
-	describe('when loading viewer as instructor', function() {
-		it('loads a non observational assignment', function(done) {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
-				}
+		describe('when loading viewer as instructor', function() {
+			it('loads a non observational assignment', function(done) {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForInstructor));
+					}
+				});
+				fetch.returns(promise);
+
+				var viewer = fixture('basicInstructor');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.true;
+					expect(event.detail.canDeleteAssignment).to.be.true;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.totalUsers).to.equal(280);
+					expect(viewer.totalUsersWithSubmissions).to.equal(50);
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.true;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
+						expect(viewer.instructorSubmissionLabel).to.equal('view_submissions');
+						expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalSubmissions');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
-			fetch.returns(promise);
-
-			var viewer = fixture('basicInstructor');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.true;
-				expect(event.detail.canDeleteAssignment).to.be.true;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.totalUsers).to.equal(280);
-				expect(viewer.totalUsersWithSubmissions).to.equal(50);
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.true;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
-					expect(viewer.instructorSubmissionLabel).to.equal('view_submissions');
-					expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalSubmissions');
-					done.isDone = true;
-					done();
-				})
+
+			it('loads an observational assignment', function(done) {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.observationalAssignmentForInstructor));
+					}
+				});
+				fetch.returns(promise);
+
+				var viewer = fixture('basicInstructor');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.true;
+					expect(event.detail.canDeleteAssignment).to.be.true;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.totalUsers).to.equal(280);
+					expect(viewer.totalUsersWithSubmissions).to.equal(50);
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.true;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
+						expect(viewer.instructorSubmissionLabel).to.equal('view_completions');
+						expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalCompletions');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
 
-		it('loads an observational assignment', function(done) {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.observationalAssignmentForInstructor));
-				}
-			});
-			fetch.returns(promise);
-
-			var viewer = fixture('basicInstructor');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.true;
-				expect(event.detail.canDeleteAssignment).to.be.true;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.totalUsers).to.equal(280);
-				expect(viewer.totalUsersWithSubmissions).to.equal(50);
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.true;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#view-all-submissions').hidden).to.be.false;
-					expect(viewer.instructorSubmissionLabel).to.equal('view_completions');
-					expect(viewer.instructorLabelSubmissionReplacement).to.equal('totalCompletions');
-					done.isDone = true;
-					done();
-				})
-			});
-		});				
-	});			
-
-	describe('when loading viewer as student', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
-				}
+		describe('when loading viewer as student', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.false;
-				expect(viewer.submissionType).to.equal(0);
-				expect(viewer.completionDate).to.be.null;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
-					expect(viewer.submissionLabel).to.equal('submit');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.false;
+					expect(viewer.submissionType).to.equal(0);
+					expect(viewer.completionDate).to.be.null;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
+						expect(viewer.submissionLabel).to.equal('submit');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as user that cannot access link', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForUser));
-				}
-			});
-			var promise2 = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.activityForUser));
-				}
+		describe('when loading viewer as user that cannot access link', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.assignmentForUser));
+					}
+				});
+				var promise2 = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.activityForUser));
+					}
+				});
+				fetch.onCall(0).returns(promise);
+				fetch.onCall(1).returns(promise2);
 			});
-			fetch.onCall(0).returns(promise);
-			fetch.onCall(1).returns(promise2);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.link).to.equal(null);
-				expect(viewer.myActivityUsageLink).to.equal('http://activities.api.dev.brightspace.com/activities/6606_2000_5/usages/123060/users/30223')
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.false;
-				expect(viewer.submissionType).to.equal(0);
-				expect(viewer.completionDate).to.be.null;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission')).to.not.exist;
-					expect(viewer.submissionLabel).to.equal('submit');
-					expect(viewer.$$('span.name-text').hidden).to.be.false;
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal(null);
+					expect(viewer.myActivityUsageLink).to.equal('http://activities.api.dev.brightspace.com/activities/6606_2000_5/usages/123060/users/30223');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.false;
+					expect(viewer.submissionType).to.equal(0);
+					expect(viewer.completionDate).to.be.null;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission')).to.not.exist;
+						expect(viewer.submissionLabel).to.equal('submit');
+						expect(viewer.$$('span.name-text').hidden).to.be.false;
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with graded assignment', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.gradedAssignmentForStudent));
-				}
+		describe('when loading viewer as student with graded assignment', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.gradedAssignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.true;
-				expect(viewer.submitted).to.be.true;
-				expect(viewer.submissionType).to.equal(0);
-				expect(viewer.completionDate).to.be.null;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-					expect(viewer.submissionLabel).to.be.equal('submit_graded');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.true;
+					expect(viewer.submitted).to.be.true;
+					expect(viewer.submissionType).to.equal(0);
+					expect(viewer.completionDate).to.be.null;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+						expect(viewer.submissionLabel).to.be.equal('submit_graded');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with submissions', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.submittedAssignmentForStudent));
-				}
+		describe('when loading viewer as student with submissions', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.submittedAssignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment')
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>')
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z')
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.true;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-					expect(viewer.submissionLabel).to.equal('submit_submitted');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.true;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+						expect(viewer.submissionLabel).to.equal('submit_submitted');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with completed observational assignment', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.completeAssignmentForStudent));
-				}
+		describe('when loading viewer as student with completed observational assignment', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.completeAssignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment');
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.true;
-				expect(viewer.submissionType).to.equal(2);
-				expect(viewer.completionDate).to.equal('2017-12-21T20:59:00.000Z');
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
-					expect(viewer.submissionLabel).to.be.equal('submit_completed');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.true;
+					expect(viewer.submissionType).to.equal(2);
+					expect(viewer.completionDate).to.equal('2017-12-21T20:59:00.000Z');
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.false;
+						expect(viewer.submissionLabel).to.be.equal('submit_completed');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with incomplete observational assignment', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudent));
-				}
+		describe('when loading viewer as student with incomplete observational assignment', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudent));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.false;
-				expect(event.detail.canDeleteAssignment).to.be.false;
-				expect(viewer.name).to.equal('Here is your new assignment');
-				expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
-				expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
-				expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
-				expect(viewer.canViewAllSubmissions).to.be.false;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.false;
-				expect(viewer.submissionType).to.equal(2);
-				expect(viewer.completionDate).to.be.null;
-				expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
-				flush(function() {
-					expect(viewer.$$('#due-date').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hidden).to.be.false;
-					expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
-					expect(viewer.submissionLabel).to.be.equal('submit_view_details');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.false;
+					expect(event.detail.canDeleteAssignment).to.be.false;
+					expect(viewer.name).to.equal('Here is your new assignment');
+					expect(viewer.instructions).to.equal('These are the <b>instructions</b>');
+					expect(viewer.dueDate).to.equal('2017-12-31T20:59:00.000Z');
+					expect(viewer.link).to.equal('https://alafqa1.devlms.brightspace.com/d2l/lms/dropbox/user/folder_submit_files.d2l?db=1&grpid=0&isprv=0&bp=0&ou=6609');
+					expect(viewer.canViewAllSubmissions).to.be.false;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.false;
+					expect(viewer.submissionType).to.equal(2);
+					expect(viewer.completionDate).to.be.null;
+					expect(viewer.$$('s-html').innerText).to.equal('These are the instructions');
+					flush(function() {
+						expect(viewer.$$('#due-date').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hidden).to.be.false;
+						expect(viewer.$$('#submit-submission').hasAttribute('primary')).to.be.true;
+						expect(viewer.submissionLabel).to.be.equal('submit_view_details');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
 
-	describe('when loading viewer as student with incomplete observational assignment, with completion type as marked by learner', function() {
-		before(function() {
-			var completionType = 
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudentMarkedAsComplete));
-				}
+		describe('when loading viewer as student with incomplete observational assignment, with completion type as marked by learner', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						return Promise.resolve(JSON.stringify(window.testFixtures.incompleteAssignmentForStudentMarkedAsComplete));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('loads an assignment', function(done) {
-			var viewer = fixture('basicStudent');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(viewer.graded).to.be.false;
-				expect(viewer.submitted).to.be.false;
-				expect(viewer.submissionType).to.equal(2);
-				expect(viewer.completionDate).to.be.null;
-				flush(function() {
-					expect(viewer.submissionLabel).to.be.equal('submit_mark_as_complete');
-					done.isDone = true;
-					done();
-				})
+			it('loads an assignment', function(done) {
+				var viewer = fixture('basicStudent');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function() {
+					if (done.isDone) return;
+					expect(viewer.graded).to.be.false;
+					expect(viewer.submitted).to.be.false;
+					expect(viewer.submissionType).to.equal(2);
+					expect(viewer.completionDate).to.be.null;
+					flush(function() {
+						expect(viewer.submissionLabel).to.be.equal('submit_mark_as_complete');
+						done.isDone = true;
+						done();
+					});
+				});
 			});
 		});
-	});
-
 
-	describe('when loading assignment without due date as instructor', function() {
-		before(function() {
-			fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true,
-				json: function() {
-					var result = window.testFixtures.assignmentForInstructor;
-					delete result.properties.dueDate;
-					return Promise.resolve(JSON.stringify(result));
-				}
+		describe('when loading assignment without due date as instructor', function() {
+			before(function() {
+				fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true,
+					json: function() {
+						var result = window.testFixtures.assignmentForInstructor;
+						delete result.properties.dueDate;
+						return Promise.resolve(JSON.stringify(result));
+					}
+				});
+				fetch.returns(promise);
 			});
-			fetch.returns(promise);
-		});
 
-		it('hides the due date', function(done) {
-			var viewer = fixture('basicInstructor');
-			viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
-				if (done.isDone) return;
-				expect(event.detail.canEditAssignment).to.be.true;
-				expect(viewer.dueDate).to.be.undefined;
-				flush(function() {
-					expect(viewer.$$('#due-date')).to.be.null;
-					done.isDone = true;
-					done();
+			it('hides the due date', function(done) {
+				var viewer = fixture('basicInstructor');
+				viewer.addEventListener('d2l-assignment-viewer-loaded', function(event) {
+					if (done.isDone) return;
+					expect(event.detail.canEditAssignment).to.be.true;
+					expect(viewer.dueDate).to.be.undefined;
+					flush(function() {
+						expect(viewer.$$('#due-date')).to.be.null;
+						done.isDone = true;
+						done();
+					});
 				});
 			});
 		});
-	});
 
-	describe('when deleting assignment as instructor', function() {
-		it('successfully deletes an assignment', function(done) {
-			var viewer = fixture('basicInstructor');
+		describe('when deleting assignment as instructor', function() {
+			it('successfully deletes an assignment', function(done) {
+				var viewer = fixture('basicInstructor');
 				viewer.$.data.resource
-					= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor));
-
-			var fetch = sinon.stub(window.d2lfetch, 'fetch');
-			var promise = Promise.resolve({
-				ok: true
-			});
-			fetch.returns(promise);
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
+				var fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var promise = Promise.resolve({
+					ok: true
+				});
+				fetch.returns(promise);
 
-			viewer.addEventListener('d2l-assignment-delete-complete', function(event) {
-				if (done.isDone) return;
-				assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
-				done.isDone = true;
-				done();
+				viewer.addEventListener('d2l-assignment-delete-complete', function() {
+					if (done.isDone) return;
+					assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
+					done.isDone = true;
+					done();
+				});
+				viewer.delete();
 			});
-			viewer.delete();
-		});
 
-		it('fails to delete an assignment', function(done) {
-			var viewer = fixture('basicInstructor');
-			viewer.$.data.resource
-				= window.D2L.Hypermedia.Siren.Parse(JSON.stringify(window.testFixtures.assignmentForInstructor));
+			it('fails to delete an assignment', function(done) {
+				var viewer = fixture('basicInstructor');
+				viewer.$.data.resource
+					= SirenParse(JSON.stringify(window.testFixtures.assignmentForInstructor));
 
-			var fetch = sinon.stub(window.d2lfetch, 'fetch');
+				var fetch = sinon.stub(window.d2lfetch, 'fetch');
 
-			var promise = Promise.resolve({
-				ok: false
-			});
-			fetch.returns(promise);
+				var promise = Promise.resolve({
+					ok: false
+				});
+				fetch.returns(promise);
 
-			viewer.addEventListener('d2l-assignment-delete-failed', function(event) {
-				if (done.isDone) return;
-				assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
-				done.isDone = true;
-				done();
+				viewer.addEventListener('d2l-assignment-delete-failed', function() {
+					if (done.isDone) return;
+					assert(fetch.calledWith(sinon.match.has('method', 'DELETE')), 'HTTP method');
+					done.isDone = true;
+					done();
+				});
+				viewer.delete();
 			});
-			viewer.delete();
 		});
 	});
-});
-</script>
+	</script>
 	</body>
 </html>
diff --git a/test/index.html b/test/index.html
index 6a6b5ce..e767aad 100644
--- a/test/index.html
+++ b/test/index.html
@@ -1,7 +1,7 @@
 <html>
 	<head>
-		<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-		<script src="../../wct-browser-legacy/browser.js"></script>
+		<script src="../../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
+		<script src="../../../wct-browser-legacy/browser.js"></script>
 	</head>
 	<body>
 		<script>
