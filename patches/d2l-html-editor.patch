From 0c665980d90b9d2dd4cffbb51ab15da24e74c14e Mon Sep 17 00:00:00 2001
From: Martin Bayly <Martin.Bayly@D2L.com>
Date: Wed, 2 Jan 2019 16:28:11 -0800
Subject: [PATCH 1/4] polymer 3 post conversion fixes

---
 .eslintignore                      |   2 +
 d2l-html-editor-client-framed.html |   1 -
 d2l-html-editor-client.html        |   1 -
 d2l-html-editor-component.js       | 911 +++++++++++++++++++++++++++++
 d2l-html-editor.js                 | 886 +---------------------------
 d2l-insertstuff-styles.js          |   1 -
 demo/d2l-editor-wrapper.js         |  19 +-
 demo/index.html                    |  45 +-
 package.json                       |   8 +-
 tinymce-import.js                  |  10 -
 10 files changed, 954 insertions(+), 930 deletions(-)
 delete mode 100644 d2l-html-editor-client-framed.html
 delete mode 100644 d2l-html-editor-client.html
 create mode 100644 d2l-html-editor-component.js
 delete mode 100644 tinymce-import.js

diff --git a/.eslintignore b/.eslintignore
index 810b6c9..5d3b467 100644
--- a/.eslintignore
+++ b/.eslintignore
@@ -1,3 +1,5 @@
 
 test/acceptance/*
 reports
+d2l_lang_plugin/**/*
+langs/**/*
diff --git a/d2l-html-editor-client-framed.html b/d2l-html-editor-client-framed.html
deleted file mode 100644
index 9485cd9..0000000
--- a/d2l-html-editor-client-framed.html
+++ /dev/null
@@ -1 +0,0 @@
-<script type="text/javascript" src="https://s.brightspace.com/lib/ifrau/0.22.1/ifrau/client.js"></script>
diff --git a/d2l-html-editor-client.html b/d2l-html-editor-client.html
deleted file mode 100644
index f6ee312..0000000
--- a/d2l-html-editor-client.html
+++ /dev/null
@@ -1 +0,0 @@
-<script type="text/javascript" src="./d2l-html-editor-client.js"></script>
diff --git a/d2l-html-editor-component.js b/d2l-html-editor-component.js
new file mode 100644
index 0000000..5013d81
--- /dev/null
+++ b/d2l-html-editor-component.js
@@ -0,0 +1,911 @@
+/*<link rel="import" href="./vui-input-styles.html">*/
+/**
+An element providing a solution to no problem in particular.
+
+Example:
+
+		<d2l-html-editor></d2l-html-editor>
+
+@demo
+*/
+/*
+  FIXME(polymer-modulizer): the above comments were extracted
+  from HTML and may be out of place here. Review them and
+  then delete this comment!
+*/
+import '@polymer/polymer/polymer-legacy.js';
+
+// Removing this updated dependency on d2l-fetch until the d2l-fetch strategy is clearer.
+// This default import could cause the window.d2lfetch instance setup by clients of this
+// component to be overwritten including any middleware they setup.
+// For now the README will be updated to incidate that this component expects an
+// appropriately configured instance of d2l-fetch to be available on the window object.
+// import 'd2l-fetch/d2l-fetch.js';
+
+import './d2l-insertstuff-plugin.js';
+import './d2l-insertstuff-styles.js';
+import './d2l-image-plugin.js';
+import './d2l-textstylerollup-plugin.js';
+import './d2l-formatrollup-plugin.js';
+import './d2l-insertrollup-plugin.js';
+import './d2l-link-plugin.js';
+import './d2l-equation-editor-plugin.js';
+import './d2l-code-plugin.js';
+import './d2l-replacestring-plugin.js';
+import './d2l-fontfamily-plugin.js';
+import './d2l-attributes-plugin.js';
+import './d2l-preview-plugin.js';
+import './d2l-xsplconverter-plugin.js';
+import './d2l-filter-plugin.js';
+import './d2l-placeholder-plugin.js';
+import './d2l-fullpage-plugin.js';
+import './d2l-emoticons-plugin.js';
+import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
+import { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';
+import { pathFromUrl } from '@polymer/polymer/lib/utils/resolve-url.js';
+
+// function addScript(src) {
+// 	const script = document.createElement('script');
+// 	script.src = src;
+// 	document.head.appendChild(script);
+// }
+
+function addLink(rel, name) {
+	const link = document.createElement('link');
+	link.rel = rel;
+	link.href = pathFromUrl(import.meta.url) + name;
+	document.head.appendChild(link);
+}
+
+// addScript('https://s.brightspace.com/lib/tinymce/dev/4.8.5-a11ychecker.1.2.1-53-powerpaste.3.3.3-308-shadow-dom-fork-1/tinymce.js');
+
+// These links are intentionally added to the global document as we are assuming the
+// tinymce toolbars are not encapsulated by a shadow root. Historically this was true
+// for React based applications like QED that always use either an inline fixed_toolbar_container
+// or a target element in the light DOM of the HTML editor. For rubrics we are switching
+// to allowing tinymce to control the placement of the inline toolbar, as this gives better
+// support for toolbar positioning for tall/long edit controls.
+
+addLink('stylesheet', 'd2l-icons.css');
+addLink('stylesheet', 'd2l-equation-editor.css');
+addLink('stylesheet', 'd2l-placeholder.css');
+addLink('stylesheet', 'd2l-powerpaste-spinner.css');
+addLink('stylesheet', 'd2l-insertstuff.css');
+
+const $_documentContainer = document.createElement('template');
+
+$_documentContainer.innerHTML = `<dom-module id="d2l-html-editor">
+
+	<template strip-whitespace="">
+
+		<style include="d2l-insertstuff-styles">
+			:host {
+				display: block;
+				position: relative;
+			}
+
+			:host ::slotted(.toolbar) {
+				position: absolute;
+				top: -2.9rem;
+				z-index: 1001;
+				display: inline-block;
+				right: 0;
+			}
+
+			:host-context([dir='rtl']) ::slotted(.toolbar) {
+				left: 0;
+				right: inherit;
+			}
+
+			:host(:dir(rtl)) ::slotted(.toolbar) {
+				left: 0;
+				right: inherit;
+			}
+
+		</style>
+		<slot></slot>
+	</template>
+
+
+</dom-module>`;
+
+document.head.appendChild($_documentContainer.content);
+/* global tinymce: true */
+Polymer({
+
+	is: 'd2l-html-editor',
+	get importMeta() {
+		return import.meta;
+	},
+	behaviors: [
+		/**
+		 * Do not place plugin behaviors here
+		 * Place plugin behaviors in the _getPluginBehavior function
+		 */
+	],
+
+	/**
+	 * @see tinymce config
+	 */
+	properties: {
+		d2lPluginSettings: {
+			type: String,
+			observer: '_d2lPluginSettingsChanged',
+		},
+		key: {
+			type: String,
+			observer: '_keyChanged',
+		},
+		inline: {
+			type: Number,
+			value: 1
+		},
+		autoFocus: {
+			type: Number,
+			value: 0
+		},
+		minRows: {
+			type: Number,
+			value: 1
+		},
+		maxRows: {
+			type: Number,
+			value: 3
+		},
+		totalPadding: {
+			type: Number,
+			value: 0.9
+		},
+		lineHeight: {
+			type: Number,
+			value: 1.2
+		},
+		minHeight: {
+			type: String,
+			computed: 'computeHeight(totalPadding, minRows, lineHeight)'
+		},
+		maxHeight: {
+			type: String,
+			computed: 'computeHeight(totalPadding, maxRows, lineHeight)'
+		},
+		editorId: String,
+		toolbarId: {
+			type: String,
+			computed: 'computeToolbarId(editorId)'
+		},
+		content: {
+			type: String
+		},
+		baseUrl: {
+			type: String,
+			value: null
+		},
+		documentBaseUrl: {
+			type: String,
+			value: null
+		},
+		cssUrl: {
+			type: String,
+			value: null
+		},
+		appRoot: {
+			type: String,
+			value: null
+		},
+		langAvailable: {
+			type: Object,
+			value: {}
+		},
+		langTag: {
+			type: String,
+			value: null
+		},
+		langDir: {
+			type: String,
+			value: null
+		},
+		imageToolsEnabled: {
+			type: Number,
+			value: 0
+		},
+		powerPasteEnabled: {
+			type: Number,
+			value: 0
+		},
+		powerPasteFormatting: {
+			type: String,
+			value: null
+		},
+		a11ycheckerEnabled: {
+			type: Number,
+			value: 0
+		},
+		allowUnsafe: {
+			type: Boolean,
+			value: false
+		},
+		fullpageEnabled: {
+			type: Number,
+			value: 1
+		},
+		autoFocusEnd: {
+			type: Boolean,
+			value: false
+		},
+		toolbar: {
+			type: String,
+			value: null
+		},
+		plugins: {
+			type: String,
+			value: null
+		},
+		defaultFullpageFontFamily: {
+			type: String,
+			value: null
+		},
+		defaultFullpageFontSize: {
+			type: String,
+			value: null
+		},
+		objectResizing: {
+			type: Boolean,
+			value: true
+		},
+		disabled: {
+			type: Boolean,
+			observer: '_disabledChanged'
+		}
+	},
+
+	/**
+	 * Textarea where tinymce is instantiate
+	 * @return {HTMLElement}
+	 */
+	element: null,
+
+	_disabledChanged: function(disabled) {
+		if (disabled) {
+			this.editor && this.editor.setMode('readonly');
+		} else {
+			this.editor && this.editor.setMode('design');
+		}
+	},
+
+	client: function() {
+		return window.ifrauclient ? window.ifrauclient : window.D2LHtmlEditor.client;
+	},
+
+	// Element Lifecycle
+	registered: function() {
+		var client = this.client()({
+			syncFont: false,
+			syncLang: false,
+			resizeFrame: false,
+			syncTitle: false
+		});
+		this.editorReady = client.connect();
+		this.ifrauClient = client;
+	},
+
+	ready: function() {
+		// `ready` is called after all elements have been configured, but
+		// propagates bottom-up. This element's children are ready, but parents
+		// are not.
+		//
+		// This is the point where you should make modifications to the DOM (when
+		// necessary), or kick off any processes the element wants to perform.
+		// const $_iconsCss = document.createElement('link');
+		// $_iconsCss.rel = 'stylesheet';
+		// $_iconsCss.href = this.appRoot + '../d2l-html-editor/d2l-icons.css';
+		// document.head.appendChild($_iconsCss);
+	},
+
+	attached: function() {
+		// `attached` fires once the element and its parents have been inserted
+		// into a document.
+		//
+		// This is a good place to perform any work related to your element's
+		// visual state or active behavior (measuring sizes, beginning animations,
+		// loading resources, etc).
+
+		this.initialize();
+		this.fire('d2l-html-editor-attached');
+	},
+
+	detached: function() {
+		// The analog to `attached`, `detached` fires when the element has been
+		// removed from a document.
+		//
+		// Use this to clean up anything you did in `attached`.
+		this.cleanup();
+	},
+
+	_findValidLangTag: function() {
+		var formattedLangTag = this._formatLangTag(this.langTag);
+		var htmlLangAttr = this._formatLangTag(window.document.getElementsByTagName('html')[0].getAttribute('lang'));
+		var htmlDefaultLangAttr = this._formatLangTag(window.document.getElementsByTagName('html')[0].getAttribute('data-lang-default'));
+
+		if (this._checkIfLangExists(formattedLangTag)) {
+			this.langTag = formattedLangTag;
+		} else if (this._checkIfLangExists(htmlLangAttr)) {
+			this.langTag = htmlLangAttr;
+		} else if (this._checkIfLangExists(htmlDefaultLangAttr)) {
+			this.langTag = htmlDefaultLangAttr;
+		} else {
+			this.langTag = 'en_US';
+		}
+	},
+
+	//converts the d2l lang tag into a format that fits with tinyMCE lang files
+	_formatLangTag: function(langTag) {
+		if (langTag && langTag.indexOf('-') > -1) {
+			var start = langTag.substring(0, 2);
+			var lowerCaseEnd = langTag.substr(3);
+			var upperCaseEnd = lowerCaseEnd.toUpperCase();
+			return start + '_' + upperCaseEnd;
+		}
+		return langTag;
+	},
+
+	_checkIfLangExists: function(langTag) {
+		if (langTag) {
+			if (langTag in this.langAvailable) {
+				return this.langAvailable[langTag];
+			} else {
+				var langExists = this._checkIfLangFileExists(langTag);
+				this.langAvailable[langTag] = langExists;
+				return langExists;
+			}
+		}
+		return false;
+	},
+
+	_checkIfLangFileExists: function(langTag) {
+		var url = this.appRoot + '../d2l-html-editor/langs/' + langTag + '.js?checkExists';
+		var http = new XMLHttpRequest();
+		http.open('HEAD', url, false);
+		http.send();
+		return Math.floor(http.status / 100) !== 4 && Math.floor(http.status / 100) !== 5;
+	},
+
+	_configurePlugins: function(client) {
+		this.pluginConfig = {};
+
+		var pluginsArr = this.plugins.split(' ');
+		var pluginDefinitions = pluginsArr.map(function(plugin) {
+			var pluginAlreadyLoaded = tinymce.PluginManager.get(plugin);
+			if (pluginAlreadyLoaded) {
+				return null;
+			}
+			var pluginBehavior = this._getPluginBehavior(plugin);
+			return pluginBehavior ? pluginBehavior.plugin : null;
+		}, this);
+
+		var plugins = [];
+		pluginDefinitions.forEach(function(plugin) {
+			if (plugin) {
+				plugins.push(plugin.addPlugin(client, this.pluginConfig));
+			}
+		}, this);
+		return plugins;
+	},
+
+	_getPluginBehavior: function(plugin) {
+		switch (plugin) {
+			case 'd2l_attributes':
+				return window.D2LHtmlEditor.PolymerBehaviors.Attributes;
+			case 'd2l_preview':
+				return window.D2LHtmlEditor.PolymerBehaviors.Preview;
+			case 'd2l_image':
+				return window.D2LHtmlEditor.PolymerBehaviors.Image;
+			case 'd2l_isf':
+				return window.D2LHtmlEditor.PolymerBehaviors.InsertStuff;
+			case 'd2l_link':
+				return window.D2LHtmlEditor.PolymerBehaviors.Link;
+			case 'd2l_fullpage':
+				return window.D2LHtmlEditor.PolymerBehaviors.Fullpage;
+			case 'd2l_code':
+				return window.D2LHtmlEditor.PolymerBehaviors.Code;
+			case 'd2l_replacestring':
+				return window.D2LHtmlEditor.PolymerBehaviors.ReplaceString;
+			case 'd2l_formatrollup':
+				return window.D2LHtmlEditor.PolymerBehaviors.FormatRollup;
+			case 'd2l_textstylerollup':
+				return window.D2LHtmlEditor.PolymerBehaviors.TextStyleRollup;
+			case 'd2l_insertrollup':
+				return window.D2LHtmlEditor.PolymerBehaviors.InsertRollup;
+			case 'd2l_equation':
+				return window.D2LHtmlEditor.PolymerBehaviors.EquationEditor;
+			case 'd2l_xsplconverter':
+				return window.D2LHtmlEditor.PolymerBehaviors.XsplConverter;
+			case 'd2l_filter':
+				return window.D2LHtmlEditor.PolymerBehaviors.Filter;
+			case 'd2l_placeholder':
+				return window.D2LHtmlEditor.PolymerBehaviors.Placeholder;
+			case 'd2l_emoticons':
+				return window.D2LHtmlEditor.PolymerBehaviors.Emoticons;
+			case 'd2l_fontfamily':
+				return window.D2LHtmlEditor.PolymerBehaviors.FontFamily;
+			case 'autolink':
+			case 'table':
+			case 'fullscreen':
+			case 'directionality':
+			case 'hr':
+			case 'textcolor':
+			case 'colorpicker':
+			case 'charmap':
+			case 'link':
+			case 'lists':
+			case 'powerpaste':
+			case 'paste':
+			case 'a11ychecker':
+			default:
+				return null;
+		}
+	},
+
+	_configureTinyMce: function(client) {
+		var plugins = this._configurePlugins(client);
+		return Promise.all(plugins);	// eslint-disable-line no-undef
+	},
+
+	_callService: function(client, serviceId, editor, fn) {
+		client.getService(serviceId, '0.1').then(function(service) {
+			fn.call(null, service, editor);
+		});
+	},
+
+	_setDefaultToolbar: function() {
+		if (this.inline) {
+			this.toolbar = 'bold italic underline d2l_image d2l_isf d2l_equation fullscreen';
+		} else {
+			this.toolbar = 'bold italic underline d2l_textstylerollup | d2l_image d2l_isf d2l_link d2l_insertrollup | d2l_equation | bullist d2l_formatrollup | table | forecolor | styleselect | fontselect fontsizeselect | undo redo | d2l_code' + (this.a11ycheckerEnabled ? ' a11ycheck' : '') + ' d2l_preview | smallscreen';
+		}
+	},
+
+	_setDefaultPlugins: function() {
+		this.plugins = 'd2l_attributes d2l_preview d2l_image d2l_isf d2l_link d2l_emoticons d2l_fontfamily ' + (this.fullpageEnabled ? 'd2l_fullpage ' : '') + 'autolink table fullscreen directionality hr textcolor colorpicker d2l_code d2l_replacestring charmap link lists d2l_formatrollup d2l_textstylerollup d2l_insertrollup d2l_equation d2l_xsplconverter d2l_filter d2l_placeholder' + (this.powerPasteEnabled ? ' powerpaste' : ' paste') + (this.a11ycheckerEnabled ? ' a11ychecker' : '');
+	},
+
+	initialize: function() {
+		var that = this;
+		if (this.toolbar === null) {
+			this._setDefaultToolbar();
+		}
+		if (this.plugins === null) {
+			this._setDefaultPlugins();
+		}
+
+		this.editorReady.then(function() {
+			that._configureTinyMce(that.ifrauClient).then(function() {
+				that.ifrauClient.request('valenceHost').then(function(valenceHost) {
+					that._init(valenceHost);
+				});
+			});
+		});
+	},
+
+	// We cannot cleanup in detached because React seems to cause the web component
+	// to detach/attach during move operations
+	cleanup: function() {
+		var editor = tinymce.EditorManager.get(this.editorId);
+		if (editor) {
+		// prevent save before remove, since it throws an exception when the HTML content contains a table
+			editor.save = function() {};
+			editor.remove();
+		}
+		this.client = null;
+	},
+
+	focus: function() {
+		tinymce.EditorManager.get(this.editorId).focus();
+	},
+
+	getContent: function(args) {
+		return tinymce.EditorManager.get(this.editorId).getContent(args);
+	},
+
+	clearContent: function() {
+		tinymce.EditorManager.get(this.editorId).setContent('');
+	},
+
+	_keyChanged: function(newKey, oldKey) {
+		// Only process key change events where we have an old key meaning
+		// the editor is being re-rendered with different data - usually in a dom-repeat.
+		// If we don't have an old key then this is an initial render and we let the
+		// default initialization mechanism do it's thing.
+		if (!oldKey) {
+			return;
+		}
+
+		afterNextRender(this, function() {
+			var editor = tinymce.EditorManager.get(this.editorId);
+			if (editor) {
+				var decodedContent = decodeURIComponent(this.content);
+				editor.setContent(decodedContent);
+			}
+		}.bind(this));
+	},
+
+	_d2lPluginSettingsChanged: function(pluginSettings) {
+		if (this.ifrauClient.configureSettings) {
+			this.ifrauClient.configureSettings(pluginSettings);
+		}
+	},
+
+	_init: function(valenceHost) {
+		if (null !== this.baseUrl) {
+			tinyMCE.baseURL = this.baseUrl; // eslint-disable-line
+		}
+
+		this.element = this.querySelector('#' + this.editorId);
+		this.element.style.overflowY = 'auto';
+		this.element.style.minHeight = this.minHeight;
+		this.element.style.maxHeight = this.maxHeight;
+
+		this._initTinyMCE(valenceHost);
+	},
+
+	_extend: function(obj, target) {
+		for (var i in obj) {
+			if (obj.hasOwnProperty(i) && !target.hasOwnProperty(i)) {
+				target[i] = obj[i];
+			}
+		}
+		return target;
+	},
+
+	_initTinyMCE: function(valenceHost) {
+		var that = this;
+
+		this._findValidLangTag();
+
+		var contentCss = '';
+		if (!this.inline) {
+			contentCss += this.cssUrl + ',';
+			contentCss += this.appRoot + '../d2l-html-editor/d2l-insertstuff.css' + ',' + this.appRoot + '../d2l-html-editor/d2l-equation-editor.css' + ',' + this.appRoot + '../d2l-html-editor/d2l-placeholder.css';
+		}
+
+		var updateImageUploadSpinners = function() {
+			if (!tinymce.activeEditor) {
+				return;
+			}
+			var body = tinymce.activeEditor.getBody();
+			var images = body.getElementsByTagName('img');
+			var imageSpinnersDiv = body.querySelector('#d2l-html-editor-image-upload-spinners');
+			if (imageSpinnersDiv) {
+				imageSpinnersDiv.parentNode.removeChild(imageSpinnersDiv);
+				imageSpinnersDiv = null;
+			}
+
+			for (var i = 0; i < images.length; i++) {
+				if (images[i].src.indexOf('blob:') === 0
+					&& !images[i].getAttribute('data-mce-selected')	 // if an image is selected in this state it's usually being manipulated by image tools plugin
+				) {
+					images[i].setAttribute('data-mce-bogus', 'all');
+					var img = images[i];
+					var width = img.clientWidth;
+					var height = img.clientHeight;
+					var x = img.offsetLeft;
+					var y = img.offsetTop;
+					var minDim = Math.min(width, height);
+					minDim = Math.min(69, minDim);
+					var html = images[i].outerHTML;
+
+					html = '<div data-mce-bogus="all" style="position:absolute;user-select:none;top:' + y + 'px;left:' + x + 'px;height:' + height + 'px;width:' + width + 'px;">' +
+						'<div data-mce-bogus="all" class="powerpaste-spinner-shim" ></div>' +
+						'<div data-mce-bogus="all" class="powerpaste-spinner-bg" style="font-size:' + minDim / 2 + 'px;'
+						+ 'top:' + (height / 2 - minDim / 2) + 'px;'
+						+ 'left:' + (width / 2 - minDim / 2) + 'px">' +
+						'<div data-mce-bogus="all" class="powerpaste-spinner-slice1">&nbsp;</div><div class="powerpaste-spinner-slice2">&nbsp;</div><div class="powerpaste-spinner-slice3">&nbsp;</div><div class="powerpaste-spinner-slice4">&nbsp;</div><div class="powerpaste-spinner-slice5">&nbsp;</div>' +
+						'</div></div>';
+					var div = document.createElement('div');
+					div.innerHTML = html;
+					div.setAttribute('data-mce-bogus', 'all');
+
+					if (!imageSpinnersDiv) {
+						imageSpinnersDiv = document.createElement('div');
+						imageSpinnersDiv.setAttribute('data-mce-bogus', 'all');
+						imageSpinnersDiv.setAttribute('id', 'd2l-html-editor-image-upload-spinners');
+						body.appendChild(imageSpinnersDiv);
+					}
+
+					imageSpinnersDiv.appendChild(div);
+					imageSpinnersDiv = div;
+				}
+				else {
+					images[i].removeAttribute('data-mce-bogus');
+				}
+			}
+		};
+
+		var config = {
+			d2l_html_editor: that,
+			target: this.element,
+			external_plugins: this.langTag && this.langTag !== 'en_US' && this.langAvailable[this.langTag] ? {'d2l_lang': this.appRoot + '../d2l-html-editor/d2l_lang_plugin/d2l-lang-plugin.js'} : null,
+			plugins: this.plugins,
+			toolbar: this.toolbar,
+			fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
+			fullpage_default_font_family: this.defaultFullpageFontFamily,
+			fullpage_default_font_size: this.defaultFullpageFontSize,
+			style_formats: [
+				{title: 'Paragraph', format: 'p'},
+				{title: 'Address', format: 'address'},
+				{title: 'Preformatted', format: 'pre'},
+				{title: 'Header 1', format: 'h1'},
+				{title: 'Header 2', format: 'h2'},
+				{title: 'Header 3', format: 'h3'},
+				{title: 'Header 4', format: 'h4'},
+				{title: 'Header 5', format: 'h5'},
+				{title: 'Header 6', format: 'h6'}
+			],
+			auto_focus: this.autoFocus ? this.editorId : null,
+			browser_spellcheck: true,
+			menubar: false,
+			statusbar: false,
+			fixed_toolbar_container: '#' + this.toolbarId,
+			inline: this.inline ? true : false,
+			allow_html_in_named_anchor: true,
+			document_base_url: this.documentBaseUrl + '/',
+			content_css: contentCss,
+			skin_url: this.appRoot + '../d2l-html-editor/skin-4.3.7',
+			convert_urls: false,
+			relative_urls: false,
+			language_url: this.langTag && this.langAvailable[this.langTag] ? this.appRoot + '../d2l-html-editor/langs/' + this.langTag + '.js' : null,
+			language: this.langTag && this.langAvailable[this.langTag] ? this.langTag : null,
+			directionality: this.langDir,
+			object_resizing: this.objectResizing,
+			powerpaste_word_import: this.powerPasteFormatting,
+			powerpaste_allow_local_images: this.powerPasteEnabled ? true : false,
+			powerpaste_block_drop : false,
+			paste_as_text: this.powerPasteEnabled ? false : true,
+			paste_text_sticky: this.powerPasteEnabled ? false : true,
+			paste_preprocess: function(plugin, args) {
+				if (!that.powerPasteEnabled) {
+					// Stops Paste plugin from converting pasted image links to image
+					args.content += ' ';
+				}
+			},
+			images_upload_handler: function(blobInfo, replaceImageUrlFunction) {
+				var blob = blobInfo.blob();
+				var filename = blobInfo.filename();
+
+				var successCallback = function(newUrl) {
+					replaceImageUrlFunction(newUrl);
+					setTimeout(updateImageUploadSpinners, 1);	// need to wait one frame for the urls to be updated before we get rid of the image spinners
+				};
+				var failCallBack = function() {
+					// fail, but we make the url invalid so the user knows something went wrong
+					successCallback('pasteFailed');
+				};
+
+				that.fire('d2l-html-editor-image-upload-started');
+				var formData = new FormData();
+				formData.append('file', blob, filename);
+				window.d2lfetch.fetch(valenceHost + '/d2l/api/le/unstable/file/AddTempFile', {
+					method: 'POST',
+					body: formData
+				}).then(function(response) {
+					if (response.ok) {
+						return response.body();
+					} else {
+						failCallBack();
+					}
+				}).then(function(body) {
+					successCallback(body);
+				}).catch(function() {
+					failCallBack();
+				}).finally(function() {
+					that.fire('change', {content: that.editor.getContent()});
+					that.fire('d2l-html-editor-image-upload-completed');
+				});
+			},
+			setup: function(editor) {
+				that.editor = editor;
+				function translateAccessibility(node) {
+					if (node.nodeType === 1) {
+
+						if (node.hasAttribute('aria-label')) {
+							node.setAttribute('aria-label', tinymce.EditorManager.i18n.translate(node.getAttribute('aria-label')));
+						}
+
+						if (node.hasAttribute('alt')) {
+							node.setAttribute('alt', tinymce.EditorManager.i18n.translate(node.getAttribute('alt')));
+						}
+
+						node = node.firstElementChild;
+						while (node) {
+							translateAccessibility(node, editor);
+							node = node.nextSibling;
+						}
+					}
+				}
+
+				function passEditorIdTranslate(editorId) {
+					var editorStartNode = document.querySelector('d2l-html-editor[editor-id="' + editorId + '"]');
+					if (editorStartNode) {
+						translateAccessibility(editorStartNode);
+					}
+				}
+
+				function fixButtonLabels(editor) {
+					var editorElement = document.getElementById(editor.id);
+					if (!editorElement) {
+						return;
+					}
+
+					var cont = document.getElementById(editor.id).parentElement;
+
+					var btnDivs = cont.getElementsByClassName('mce-btn');
+					var length = btnDivs ? btnDivs.length : -1;
+					for (var i = 0; i < length; i ++) {
+						btnDivs[i].removeAttribute('aria-labelledby');
+					}
+				}
+
+				function findTables(editor) {
+					if (!document.getElementById(editor.id)) {
+						return;
+					}
+					var tables;
+					var cont = document.getElementById(editor.id).parentElement;
+					var iframes = cont.getElementsByTagName('iframe');
+					if (iframes.length > 0) {
+						for (var i = 0; i < iframes.length; i++) {
+							try {
+								tables = iframes[i].contentDocument.getElementsByTagName('table');
+								updateTableAttributes(tables);
+							} catch (e) {
+								/*This is being left empty, as we don't want to pollute the console log, and don't currently have a means of keeping track of logged exceptions.
+								This try-catch was needed to catch exceptions related to attempting to check the contentDocument of cross-origin iframes, which was a problem
+								in the non full-screen question editor text areas (specifically as a result of issues with Kaltura videos).*/
+							}
+						}
+					} else {
+						tables = cont.getElementsByTagName('table');
+						updateTableAttributes(tables);
+					}
+				}
+
+				function updateTableAttributes(tables) {
+					var attributeValue, tableBorder;
+					var length = tables ? tables.length : -1;
+					for (var i = 0; i < length; i ++) {
+						attributeValue = tables[i].getAttribute('style');
+						tableBorder = parseFloat(tables[i].getAttribute('border'));
+						if (isNaN(tableBorder) && attributeValue && attributeValue.indexOf('border-color') > -1) {
+							tables[i].setAttribute('border', 1);
+							tables[i].setAttribute('class', '');
+						} else if (tableBorder < 0) {
+							tables[i].setAttribute('border', 0);
+							tables[i].setAttribute('class', 'mce-item-table');
+						}
+						attributeValue = tables[i].getAttribute('data-mce-style');
+						tableBorder = parseFloat(tables[i].getAttribute('border'));
+						if (!(isNaN(tableBorder) || tableBorder === 0) && attributeValue && attributeValue.indexOf('border-style: solid;') === -1) {
+							tables[i].setAttribute('data-mce-style', attributeValue + 'border-style: solid;');
+						} else if (tableBorder === 0 && attributeValue && attributeValue.indexOf('border-style: solid;') > -1) {
+							attributeValue = attributeValue.replace('border-style: solid;', '');
+							tables[i].setAttribute('data-mce-style', attributeValue);
+						}
+					}
+				}
+
+				editor.on('setcontent', function(event) {
+					findTables(editor);
+
+					// The content of the first setcontent event is always "",
+					// if there is content to be set, it will be in the second setcontent event
+					if (event.content && config.auto_focus && that.autoFocusEnd) {
+						// Set cursor to end of input
+						editor.focus();
+						editor.selection.select(editor.getBody(), true);
+						editor.selection.collapse(false);
+						that.autoFocusEnd = false;
+					}
+				});
+
+				editor.on('change redo undo', function() {
+					updateImageUploadSpinners();
+					findTables(editor);
+					that.fire('change', {content: editor.getContent()});
+				});
+
+				editor.on('focusin', function(e) {
+					that.fire('focus', e);
+					// give time for buttons to load
+					setTimeout(function() {
+						fixButtonLabels(editor);
+					}, 2000);
+				});
+
+				editor.on('focusout', function(e) {
+					that.fire('blur', e);
+				});
+
+				editor.on('keyup', function() {
+					// that.element.value = editor.getContent();
+				});
+
+				editor.addButton('fullscreen', {
+					title: 'Open in Full Screen Editor',
+					icon: 'd2l_fullscreen',
+					onclick: function() {
+						that.fire('fullscreen');
+					},
+					onPostRender: function() {
+						passEditorIdTranslate(that.editorId);
+					}
+				});
+
+				editor.addButton('smallscreen', {
+					title: 'Close Full Screen Editor',
+					icon: 'd2l_smallscreen',
+					onclick: function() {
+						editor.execCommand('mceFullScreen');
+						that.fire('restore');
+					},
+					onPostRender: function() {
+						passEditorIdTranslate(that.editorId);
+					}
+				});
+
+				if (!this.inline) {
+					editor.on('init', function() {
+						editor.execCommand('mceFullScreen');
+						editor.getBody().setAttribute('aria-label', tinymce.EditorManager.i18n.translate('Press ALT-F10 for toolbar, and press ESC to exit toolbar once inside'));
+						var container = editor.getContainer();
+						var langTag = container.parentElement.getAttribute('lang-tag');
+						editor.getDoc().querySelector('html').setAttribute('lang', langTag ? langTag : 'en-us');
+
+						var titleNode = document.createElement('title');
+						var textNode = document.createTextNode(tinymce.EditorManager.i18n.translate('Press ALT-F10 for toolbar, and press ESC to exit toolbar once inside'));
+						titleNode.appendChild(textNode);
+
+						var headElement = editor.getDoc().querySelector('head');
+						headElement.appendChild(titleNode);
+
+						var btns = container.querySelectorAll('.mce-colorbutton > button');
+						var length = btns ? btns.length : -1;
+						for (var i = 0; i < length; i ++) {
+							btns[i].setAttribute('role', 'presentation');
+						}
+					});
+				}
+			}
+		};
+
+		if (this.allowUnsafe) {
+			config.valid_elements = '*[*]';
+		} else {
+			config.extended_valid_elements = 'span[*]';
+		}
+
+		if (this.imageToolsEnabled) {
+			config.plugins += ' image imagetools';
+			if (valenceHost) {
+				// get the root domain name of the valence host
+				var matches = valenceHost.toLowerCase().match(/^https?:\/\/([^/:?#]+)(?:[/:?#]|$)/i);
+				var domainName = matches && matches[1];
+				if (domainName) {
+					config.imagetools_cors_hosts = [domainName];
+					config.imagetools_credentials_hosts = [domainName];
+				}
+			}
+		}
+
+		tinymce.init(this._extend(this.pluginConfig, config));
+
+		// need to reset auto focus property to prevent unwanted focus during re-ordering of the options
+		this.autoFocus = 0;
+	},
+
+	computeToolbarId: function(editorId) {
+		return editorId + '-toolbar';
+	},
+
+	computeHeight: function(totalPadding, rows, lineHeight) {
+		return totalPadding + (lineHeight * rows) + 'rem';
+	}
+});
diff --git a/d2l-html-editor.js b/d2l-html-editor.js
index 0921795..1a5169f 100644
--- a/d2l-html-editor.js
+++ b/d2l-html-editor.js
@@ -1,870 +1,18 @@
-/*<link rel="import" href="./vui-input-styles.html">*/
-/**
-An element providing a solution to no problem in particular.
-
-Example:
-
-		<d2l-html-editor></d2l-html-editor>
-
-@demo
-*/
-/*
-  FIXME(polymer-modulizer): the above comments were extracted
-  from HTML and may be out of place here. Review them and
-  then delete this comment!
-*/
-import '@polymer/polymer/polymer-legacy.js';
-
-import 'd2l-fetch/d2l-fetch.js';
-import './tinymce-import.js';
-import './d2l-insertstuff-plugin.js';
-import './d2l-insertstuff-styles.js';
-import './d2l-image-plugin.js';
-import './d2l-textstylerollup-plugin.js';
-import './d2l-formatrollup-plugin.js';
-import './d2l-insertrollup-plugin.js';
-import './d2l-link-plugin.js';
-import './d2l-equation-editor-plugin.js';
-import './d2l-code-plugin.js';
-import './d2l-replacestring-plugin.js';
-import './d2l-fontfamily-plugin.js';
-import './d2l-attributes-plugin.js';
-import './d2l-preview-plugin.js';
-import './d2l-xsplconverter-plugin.js';
-import './d2l-filter-plugin.js';
-import './d2l-placeholder-plugin.js';
-import './d2l-fullpage-plugin.js';
-import './d2l-emoticons-plugin.js';
-import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
-import { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';
-const $_documentContainer = document.createElement('template');
-
-$_documentContainer.innerHTML = `<dom-module id="d2l-html-editor">
-
-	<template strip-whitespace="">
-
-		<style include="d2l-insertstuff-styles">
-			:host {
-				display: block;
-				position: relative;
-			}
-
-			:host ::slotted(.toolbar) {
-				position: absolute;
-				top: -2.9rem;
-				z-index: 1001;
-				display: inline-block;
-				right: 0;
-			}
-
-			:host-context([dir='rtl']) ::slotted(.toolbar) {
-				left: 0;
-				right: inherit;
-			}
-
-			:host(:dir(rtl)) ::slotted(.toolbar) {
-				left: 0;
-				right: inherit;
-			}
-
-		</style>
-		<slot></slot>
-	</template>
-	
-
-</dom-module>`;
-
-document.head.appendChild($_documentContainer.content);
-/* global tinymce: true */
-Polymer({
-
-	is: 'd2l-html-editor',
-
-	behaviors: [
-		/**
-		 * Do not place plugin behaviors here
-		 * Place plugin behaviors in the _getPluginBehavior function
-		 */
-	],
-
-	/**
-	 * @see tinymce config
-	 */
-	properties: {
-		d2lPluginSettings: {
-			type: String,
-			observer: '_d2lPluginSettingsChanged',
-		},
-		key: {
-			type: String,
-			observer: '_keyChanged',
-		},
-		inline: {
-			type: Number,
-			value: 1
-		},
-		autoFocus: {
-			type: Number,
-			value: 0
-		},
-		minRows: {
-			type: Number,
-			value: 1
-		},
-		maxRows: {
-			type: Number,
-			value: 3
-		},
-		totalPadding: {
-			type: Number,
-			value: 0.9
-		},
-		lineHeight: {
-			type: Number,
-			value: 1.2
-		},
-		minHeight: {
-			type: String,
-			computed: 'computeHeight(totalPadding, minRows, lineHeight)'
-		},
-		maxHeight: {
-			type: String,
-			computed: 'computeHeight(totalPadding, maxRows, lineHeight)'
-		},
-		editorId: String,
-		toolbarId: {
-			type: String,
-			computed: 'computeToolbarId(editorId)'
-		},
-		content: {
-			type: String
-		},
-		baseUrl: {
-			type: String,
-			value: null
-		},
-		documentBaseUrl: {
-			type: String,
-			value: null
-		},
-		cssUrl: {
-			type: String,
-			value: null
-		},
-		appRoot: {
-			type: String,
-			value: null
-		},
-		langAvailable: {
-			type: Object,
-			value: {}
-		},
-		langTag: {
-			type: String,
-			value: null
-		},
-		langDir: {
-			type: String,
-			value: null
-		},
-		imageToolsEnabled: {
-			type: Number,
-			value: 0
-		},
-		powerPasteEnabled: {
-			type: Number,
-			value: 0
-		},
-		powerPasteFormatting: {
-			type: String,
-			value: null
-		},
-		a11ycheckerEnabled: {
-			type: Number,
-			value: 0
-		},
-		allowUnsafe: {
-			type: Boolean,
-			value: false
-		},
-		fullpageEnabled: {
-			type: Number,
-			value: 1
-		},
-		autoFocusEnd: {
-			type: Boolean,
-			value: false
-		},
-		toolbar: {
-			type: String,
-			value: null
-		},
-		plugins: {
-			type: String,
-			value: null
-		},
-		defaultFullpageFontFamily: {
-			type: String,
-			value: null
-		},
-		defaultFullpageFontSize: {
-			type: String,
-			value: null
-		},
-		objectResizing: {
-			type: Boolean,
-			value: true
-		},
-		disabled: {
-			type: Boolean,
-			observer: '_disabledChanged'
-		}
-	},
-
-	/**
-	 * Textarea where tinymce is instantiate
-	 * @return {HTMLElement}
-	 */
-	element: null,
-
-	_disabledChanged: function(disabled) {
-		if (disabled) {
-			this.editor && this.editor.setMode('readonly');
-		} else {
-			this.editor && this.editor.setMode('design');
-		}
-	},
-
-	client: function() {
-		return window.ifrauclient ? window.ifrauclient : window.D2LHtmlEditor.client;
-	},
-
-	// Element Lifecycle
-	registered: function() {
-		var client = this.client()({
-			syncFont: false,
-			syncLang: false,
-			resizeFrame: false,
-			syncTitle: false
-		});
-		this.editorReady = client.connect();
-		this.ifrauClient = client;
-	},
-
-	ready: function() {
-		// `ready` is called after all elements have been configured, but
-		// propagates bottom-up. This element's children are ready, but parents
-		// are not.
-		//
-		// This is the point where you should make modifications to the DOM (when
-		// necessary), or kick off any processes the element wants to perform.
-	},
-
-	attached: function() {
-		// `attached` fires once the element and its parents have been inserted
-		// into a document.
-		//
-		// This is a good place to perform any work related to your element's
-		// visual state or active behavior (measuring sizes, beginning animations,
-		// loading resources, etc).
-
-		this.initialize();
-		this.fire('d2l-html-editor-attached');
-	},
-
-	detached: function() {
-		// The analog to `attached`, `detached` fires when the element has been
-		// removed from a document.
-		//
-		// Use this to clean up anything you did in `attached`.
-		this.cleanup();
-	},
-
-	_findValidLangTag: function() {
-		var formattedLangTag = this._formatLangTag(this.langTag);
-		var htmlLangAttr = this._formatLangTag(window.document.getElementsByTagName('html')[0].getAttribute('lang'));
-		var htmlDefaultLangAttr = this._formatLangTag(window.document.getElementsByTagName('html')[0].getAttribute('data-lang-default'));
-
-		if (this._checkIfLangExists(formattedLangTag)) {
-			this.langTag = formattedLangTag;
-		} else if (this._checkIfLangExists(htmlLangAttr)) {
-			this.langTag = htmlLangAttr;
-		} else if (this._checkIfLangExists(htmlDefaultLangAttr)) {
-			this.langTag = htmlDefaultLangAttr;
-		} else {
-			this.langTag = 'en_US';
-		}
-	},
-
-	//converts the d2l lang tag into a format that fits with tinyMCE lang files
-	_formatLangTag: function(langTag) {
-		if (langTag && langTag.indexOf('-') > -1) {
-			var start = langTag.substring(0, 2);
-			var lowerCaseEnd = langTag.substr(3);
-			var upperCaseEnd = lowerCaseEnd.toUpperCase();
-			return start + '_' + upperCaseEnd;
-		}
-		return langTag;
-	},
-
-	_checkIfLangExists: function(langTag) {
-		if (langTag) {
-			if (langTag in this.langAvailable) {
-				return this.langAvailable[langTag];
-			} else {
-				var langExists = this._checkIfLangFileExists(langTag);
-				this.langAvailable[langTag] = langExists;
-				return langExists;
-			}
-		}
-		return false;
-	},
-
-	_checkIfLangFileExists: function(langTag) {
-		var url = this.appRoot + '../d2l-html-editor/langs/' + langTag + '.js?checkExists';
-		var http = new XMLHttpRequest();
-		http.open('HEAD', url, false);
-		http.send();
-		return Math.floor(http.status / 100) !== 4 && Math.floor(http.status / 100) !== 5;
-	},
-
-	_configurePlugins: function(client) {
-		this.pluginConfig = {};
-
-		var pluginsArr = this.plugins.split(' ');
-		var pluginDefinitions = pluginsArr.map(function(plugin) {
-			var pluginAlreadyLoaded = tinymce.PluginManager.get(plugin);
-			if (pluginAlreadyLoaded) {
-				return null;
-			}
-			var pluginBehavior = this._getPluginBehavior(plugin);
-			return pluginBehavior ? pluginBehavior.plugin : null;
-		}, this);
-
-		var plugins = [];
-		pluginDefinitions.forEach(function(plugin) {
-			if (plugin) {
-				plugins.push(plugin.addPlugin(client, this.pluginConfig));
-			}
-		}, this);
-		return plugins;
-	},
-
-	_getPluginBehavior: function(plugin) {
-		switch (plugin) {
-			case 'd2l_attributes':
-				return window.D2LHtmlEditor.PolymerBehaviors.Attributes;
-			case 'd2l_preview':
-				return window.D2LHtmlEditor.PolymerBehaviors.Preview;
-			case 'd2l_image':
-				return window.D2LHtmlEditor.PolymerBehaviors.Image;
-			case 'd2l_isf':
-				return window.D2LHtmlEditor.PolymerBehaviors.InsertStuff;
-			case 'd2l_link':
-				return window.D2LHtmlEditor.PolymerBehaviors.Link;
-			case 'd2l_fullpage':
-				return window.D2LHtmlEditor.PolymerBehaviors.Fullpage;
-			case 'd2l_code':
-				return window.D2LHtmlEditor.PolymerBehaviors.Code;
-			case 'd2l_replacestring':
-				return window.D2LHtmlEditor.PolymerBehaviors.ReplaceString;
-			case 'd2l_formatrollup':
-				return window.D2LHtmlEditor.PolymerBehaviors.FormatRollup;
-			case 'd2l_textstylerollup':
-				return window.D2LHtmlEditor.PolymerBehaviors.TextStyleRollup;
-			case 'd2l_insertrollup':
-				return window.D2LHtmlEditor.PolymerBehaviors.InsertRollup;
-			case 'd2l_equation':
-				return window.D2LHtmlEditor.PolymerBehaviors.EquationEditor;
-			case 'd2l_xsplconverter':
-				return window.D2LHtmlEditor.PolymerBehaviors.XsplConverter;
-			case 'd2l_filter':
-				return window.D2LHtmlEditor.PolymerBehaviors.Filter;
-			case 'd2l_placeholder':
-				return window.D2LHtmlEditor.PolymerBehaviors.Placeholder;
-			case 'd2l_emoticons':
-				return window.D2LHtmlEditor.PolymerBehaviors.Emoticons;
-			case 'd2l_fontfamily':
-				return window.D2LHtmlEditor.PolymerBehaviors.FontFamily;
-			case 'autolink':
-			case 'table':
-			case 'fullscreen':
-			case 'directionality':
-			case 'hr':
-			case 'textcolor':
-			case 'colorpicker':
-			case 'charmap':
-			case 'link':
-			case 'lists':
-			case 'powerpaste':
-			case 'paste':
-			case 'a11ychecker':
-			default:
-				return null;
-		}
-	},
-
-	_configureTinyMce: function(client) {
-		var plugins = this._configurePlugins(client);
-		return Promise.all(plugins);	// eslint-disable-line no-undef
-	},
-
-	_callService: function(client, serviceId, editor, fn) {
-		client.getService(serviceId, '0.1').then(function(service) {
-			fn.call(null, service, editor);
-		});
-	},
-
-	_setDefaultToolbar: function() {
-		if (this.inline) {
-			this.toolbar = 'bold italic underline d2l_image d2l_isf d2l_equation fullscreen';
-		} else {
-			this.toolbar = 'bold italic underline d2l_textstylerollup | d2l_image d2l_isf d2l_link d2l_insertrollup | d2l_equation | bullist d2l_formatrollup | table | forecolor | styleselect | fontselect fontsizeselect | undo redo | d2l_code' + (this.a11ycheckerEnabled ? ' a11ycheck' : '') + ' d2l_preview | smallscreen';
-		}
-	},
-
-	_setDefaultPlugins: function() {
-		this.plugins = 'd2l_attributes d2l_preview d2l_image d2l_isf d2l_link d2l_emoticons d2l_fontfamily ' + (this.fullpageEnabled ? 'd2l_fullpage ' : '') + 'autolink table fullscreen directionality hr textcolor colorpicker d2l_code d2l_replacestring charmap link lists d2l_formatrollup d2l_textstylerollup d2l_insertrollup d2l_equation d2l_xsplconverter d2l_filter d2l_placeholder' + (this.powerPasteEnabled ? ' powerpaste' : ' paste') + (this.a11ycheckerEnabled ? ' a11ychecker' : '');
-	},
-
-	initialize: function() {
-		var that = this;
-		if (this.toolbar === null) {
-			this._setDefaultToolbar();
-		}
-		if (this.plugins === null) {
-			this._setDefaultPlugins();
-		}
-
-		this.editorReady.then(function() {
-			that._configureTinyMce(that.ifrauClient).then(function() {
-				that.ifrauClient.request('valenceHost').then(function(valenceHost) {
-					that._init(valenceHost);
-				});
-			});
-		});
-	},
-
-	// We cannot cleanup in detached because React seems to cause the web component
-	// to detach/attach during move operations
-	cleanup: function() {
-		var editor = tinymce.EditorManager.get(this.editorId);
-		if (editor) {
-		// prevent save before remove, since it throws an exception when the HTML content contains a table
-			editor.save = function() {};
-			editor.remove();
-		}
-		this.client = null;
-	},
-
-	focus: function() {
-		tinymce.EditorManager.get(this.editorId).focus();
-	},
-
-	getContent: function(args) {
-		return tinymce.EditorManager.get(this.editorId).getContent(args);
-	},
-
-	clearContent: function() {
-		tinymce.EditorManager.get(this.editorId).setContent('');
-	},
-
-	_keyChanged: function(newKey, oldKey) {
-		// Only process key change events where we have an old key meaning
-		// the editor is being re-rendered with different data - usually in a dom-repeat.
-		// If we don't have an old key then this is an initial render and we let the
-		// default initialization mechanism do it's thing.
-		if (!oldKey) {
-			return;
-		}
-
-		afterNextRender(this, function() {
-			var editor = tinymce.EditorManager.get(this.editorId);
-			if (editor) {
-				var decodedContent = decodeURIComponent(this.content);
-				editor.setContent(decodedContent);
-			}
-		}.bind(this));
-	},
-
-	_d2lPluginSettingsChanged: function(pluginSettings) {
-		if (this.ifrauClient.configureSettings) {
-			this.ifrauClient.configureSettings(pluginSettings);
-		}
-	},
-
-	_init: function(valenceHost) {
-		if (null !== this.baseUrl) {
-			tinyMCE.baseURL = this.baseUrl; // eslint-disable-line
-		}
-
-		this.element = this.querySelector('#' + this.editorId);
-		this.element.style.overflowY = 'auto';
-		this.element.style.minHeight = this.minHeight;
-		this.element.style.maxHeight = this.maxHeight;
-
-		this._initTinyMCE(valenceHost);
-	},
-
-	_extend: function(obj, target) {
-		for (var i in obj) {
-			if (obj.hasOwnProperty(i) && !target.hasOwnProperty(i)) {
-				target[i] = obj[i];
-			}
-		}
-		return target;
-	},
-
-	_initTinyMCE: function(valenceHost) {
-		var that = this;
-
-		this._findValidLangTag();
-
-		var contentCss = '';
-		if (!this.inline) {
-			contentCss += this.cssUrl + ',';
-			contentCss += this.appRoot + '../d2l-html-editor/d2l-insertstuff.css' + ',' + this.appRoot + '../d2l-html-editor/d2l-equation-editor.css' + ',' + this.appRoot + '../d2l-html-editor/d2l-placeholder.css';
-		}
-
-		var updateImageUploadSpinners = function() {
-			if (!tinymce.activeEditor) {
-				return;
-			}
-			var body = tinymce.activeEditor.getBody();
-			var images = body.getElementsByTagName('img');
-			var imageSpinnersDiv = body.querySelector('#d2l-html-editor-image-upload-spinners');
-			if (imageSpinnersDiv) {
-				imageSpinnersDiv.parentNode.removeChild(imageSpinnersDiv);
-				imageSpinnersDiv = null;
-			}
-
-			for (var i = 0; i < images.length; i++) {
-				if (images[i].src.indexOf('blob:') === 0
-					&& !images[i].getAttribute('data-mce-selected')	 // if an image is selected in this state it's usually being manipulated by image tools plugin
-				) {
-					images[i].setAttribute('data-mce-bogus', 'all');
-					var img = images[i];
-					var width = img.clientWidth;
-					var height = img.clientHeight;
-					var x = img.offsetLeft;
-					var y = img.offsetTop;
-					var minDim = Math.min(width, height);
-					minDim = Math.min(69, minDim);
-					var html = images[i].outerHTML;
-
-					html = '<div data-mce-bogus="all" style="position:absolute;user-select:none;top:' + y + 'px;left:' + x + 'px;height:' + height + 'px;width:' + width + 'px;">' +
-						'<div data-mce-bogus="all" class="powerpaste-spinner-shim" ></div>' +
-						'<div data-mce-bogus="all" class="powerpaste-spinner-bg" style="font-size:' + minDim / 2 + 'px;'
-						+ 'top:' + (height / 2 - minDim / 2) + 'px;'
-						+ 'left:' + (width / 2 - minDim / 2) + 'px">' +
-						'<div data-mce-bogus="all" class="powerpaste-spinner-slice1">&nbsp;</div><div class="powerpaste-spinner-slice2">&nbsp;</div><div class="powerpaste-spinner-slice3">&nbsp;</div><div class="powerpaste-spinner-slice4">&nbsp;</div><div class="powerpaste-spinner-slice5">&nbsp;</div>' +
-						'</div></div>';
-					var div = document.createElement('div');
-					div.innerHTML = html;
-					div.setAttribute('data-mce-bogus', 'all');
-
-					if (!imageSpinnersDiv) {
-						imageSpinnersDiv = document.createElement('div');
-						imageSpinnersDiv.setAttribute('data-mce-bogus', 'all');
-						imageSpinnersDiv.setAttribute('id', 'd2l-html-editor-image-upload-spinners');
-						body.appendChild(imageSpinnersDiv);
-					}
-
-					imageSpinnersDiv.appendChild(div);
-					imageSpinnersDiv = div;
-				}
-				else {
-					images[i].removeAttribute('data-mce-bogus');
-				}
-			}
-		};
-
-		var config = {
-			d2l_html_editor: that,
-			target: this.element,
-			external_plugins: this.langTag && this.langTag !== 'en_US' && this.langAvailable[this.langTag] ? {'d2l_lang': this.appRoot + '../d2l-html-editor/d2l_lang_plugin/d2l-lang-plugin.js'} : null,
-			plugins: this.plugins,
-			toolbar: this.toolbar,
-			fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
-			fullpage_default_font_family: this.defaultFullpageFontFamily,
-			fullpage_default_font_size: this.defaultFullpageFontSize,
-			style_formats: [
-				{title: 'Paragraph', format: 'p'},
-				{title: 'Address', format: 'address'},
-				{title: 'Preformatted', format: 'pre'},
-				{title: 'Header 1', format: 'h1'},
-				{title: 'Header 2', format: 'h2'},
-				{title: 'Header 3', format: 'h3'},
-				{title: 'Header 4', format: 'h4'},
-				{title: 'Header 5', format: 'h5'},
-				{title: 'Header 6', format: 'h6'}
-			],
-			auto_focus: this.autoFocus ? this.editorId : null,
-			browser_spellcheck: true,
-			menubar: false,
-			statusbar: false,
-			fixed_toolbar_container: '#' + this.toolbarId,
-			inline: this.inline ? true : false,
-			allow_html_in_named_anchor: true,
-			document_base_url: this.documentBaseUrl + '/',
-			content_css: contentCss,
-			skin_url: this.appRoot + '../d2l-html-editor/skin-4.3.7',
-			convert_urls: false,
-			relative_urls: false,
-			language_url: this.langTag && this.langAvailable[this.langTag] ? this.appRoot + '../d2l-html-editor/langs/' + this.langTag + '.js' : null,
-			language: this.langTag && this.langAvailable[this.langTag] ? this.langTag : null,
-			directionality: this.langDir,
-			object_resizing: this.objectResizing,
-			powerpaste_word_import: this.powerPasteFormatting,
-			powerpaste_allow_local_images: this.powerPasteEnabled ? true : false,
-			powerpaste_block_drop : false,
-			paste_as_text: this.powerPasteEnabled ? false : true,
-			paste_text_sticky: this.powerPasteEnabled ? false : true,
-			paste_preprocess: function(plugin, args) {
-				if (!that.powerPasteEnabled) {
-					// Stops Paste plugin from converting pasted image links to image
-					args.content += ' ';
-				}
-			},
-			images_upload_handler: function(blobInfo, replaceImageUrlFunction) {
-				var blob = blobInfo.blob();
-				var filename = blobInfo.filename();
-
-				var successCallback = function(newUrl) {
-					replaceImageUrlFunction(newUrl);
-					setTimeout(updateImageUploadSpinners, 1);	// need to wait one frame for the urls to be updated before we get rid of the image spinners
-				};
-				var failCallBack = function() {
-					// fail, but we make the url invalid so the user knows something went wrong
-					successCallback('pasteFailed');
-				};
-
-				that.fire('d2l-html-editor-image-upload-started');
-				var formData = new FormData();
-				formData.append('file', blob, filename);
-				window.d2lfetch.fetch(valenceHost + '/d2l/api/le/unstable/file/AddTempFile', {
-					method: 'POST',
-					body: formData
-				}).then(function(response) {
-					if (response.ok) {
-						return response.body();
-					} else {
-						failCallBack();
-					}
-				}).then(function(body) {
-					successCallback(body);
-				}).catch(function() {
-					failCallBack();
-				}).finally(function() {
-					that.fire('change', {content: that.editor.getContent()});
-					that.fire('d2l-html-editor-image-upload-completed');
-				});
-			},
-			setup: function(editor) {
-				that.editor = editor;
-				function translateAccessibility(node) {
-					if (node.nodeType === 1) {
-
-						if (node.hasAttribute('aria-label')) {
-							node.setAttribute('aria-label', tinymce.EditorManager.i18n.translate(node.getAttribute('aria-label')));
-						}
-
-						if (node.hasAttribute('alt')) {
-							node.setAttribute('alt', tinymce.EditorManager.i18n.translate(node.getAttribute('alt')));
-						}
-
-						node = node.firstElementChild;
-						while (node) {
-							translateAccessibility(node, editor);
-							node = node.nextSibling;
-						}
-					}
-				}
-
-				function passEditorIdTranslate(editorId) {
-					var editorStartNode = document.querySelector('d2l-html-editor[editor-id="' + editorId + '"]');
-					if (editorStartNode) {
-						translateAccessibility(editorStartNode);
-					}
-				}
-
-				function fixButtonLabels(editor) {
-					var editorElement = document.getElementById(editor.id);
-					if (!editorElement) {
-						return;
-					}
-
-					var cont = document.getElementById(editor.id).parentElement;
-
-					var btnDivs = cont.getElementsByClassName('mce-btn');
-					var length = btnDivs ? btnDivs.length : -1;
-					for (var i = 0; i < length; i ++) {
-						btnDivs[i].removeAttribute('aria-labelledby');
-					}
-				}
-
-				function findTables(editor) {
-					if (!document.getElementById(editor.id)) {
-						return;
-					}
-					var tables;
-					var cont = document.getElementById(editor.id).parentElement;
-					var iframes = cont.getElementsByTagName('iframe');
-					if (iframes.length > 0) {
-						for (var i = 0; i < iframes.length; i++) {
-							try {
-								tables = iframes[i].contentDocument.getElementsByTagName('table');
-								updateTableAttributes(tables);
-							} catch (e) {
-								/*This is being left empty, as we don't want to pollute the console log, and don't currently have a means of keeping track of logged exceptions.
-								This try-catch was needed to catch exceptions related to attempting to check the contentDocument of cross-origin iframes, which was a problem
-								in the non full-screen question editor text areas (specifically as a result of issues with Kaltura videos).*/
-							}
-						}
-					} else {
-						tables = cont.getElementsByTagName('table');
-						updateTableAttributes(tables);
-					}
-				}
-
-				function updateTableAttributes(tables) {
-					var attributeValue, tableBorder;
-					var length = tables ? tables.length : -1;
-					for (var i = 0; i < length; i ++) {
-						attributeValue = tables[i].getAttribute('style');
-						tableBorder = parseFloat(tables[i].getAttribute('border'));
-						if (isNaN(tableBorder) && attributeValue && attributeValue.indexOf('border-color') > -1) {
-							tables[i].setAttribute('border', 1);
-							tables[i].setAttribute('class', '');
-						} else if (tableBorder < 0) {
-							tables[i].setAttribute('border', 0);
-							tables[i].setAttribute('class', 'mce-item-table');
-						}
-						attributeValue = tables[i].getAttribute('data-mce-style');
-						tableBorder = parseFloat(tables[i].getAttribute('border'));
-						if (!(isNaN(tableBorder) || tableBorder === 0) && attributeValue && attributeValue.indexOf('border-style: solid;') === -1) {
-							tables[i].setAttribute('data-mce-style', attributeValue + 'border-style: solid;');
-						} else if (tableBorder === 0 && attributeValue && attributeValue.indexOf('border-style: solid;') > -1) {
-							attributeValue = attributeValue.replace('border-style: solid;', '');
-							tables[i].setAttribute('data-mce-style', attributeValue);
-						}
-					}
-				}
-
-				editor.on('setcontent', function(event) {
-					findTables(editor);
-
-					// The content of the first setcontent event is always "",
-					// if there is content to be set, it will be in the second setcontent event
-					if (event.content && config.auto_focus && that.autoFocusEnd) {
-						// Set cursor to end of input
-						editor.focus();
-						editor.selection.select(editor.getBody(), true);
-						editor.selection.collapse(false);
-						that.autoFocusEnd = false;
-					}
-				});
-
-				editor.on('change redo undo', function() {
-					updateImageUploadSpinners();
-					findTables(editor);
-					that.fire('change', {content: editor.getContent()});
-				});
-
-				editor.on('focusin', function(e) {
-					that.fire('focus', e);
-					// give time for buttons to load
-					setTimeout(function() {
-						fixButtonLabels(editor);
-					}, 2000);
-				});
-
-				editor.on('focusout', function(e) {
-					that.fire('blur', e);
-				});
-
-				editor.on('keyup', function() {
-					// that.element.value = editor.getContent();
-				});
-
-				editor.addButton('fullscreen', {
-					title: 'Open in Full Screen Editor',
-					icon: 'd2l_fullscreen',
-					onclick: function() {
-						that.fire('fullscreen');
-					},
-					onPostRender: function() {
-						passEditorIdTranslate(that.editorId);
-					}
-				});
-
-				editor.addButton('smallscreen', {
-					title: 'Close Full Screen Editor',
-					icon: 'd2l_smallscreen',
-					onclick: function() {
-						editor.execCommand('mceFullScreen');
-						that.fire('restore');
-					},
-					onPostRender: function() {
-						passEditorIdTranslate(that.editorId);
-					}
-				});
-
-				if (!this.inline) {
-					editor.on('init', function() {
-						editor.execCommand('mceFullScreen');
-						editor.getBody().setAttribute('aria-label', tinymce.EditorManager.i18n.translate('Press ALT-F10 for toolbar, and press ESC to exit toolbar once inside'));
-						var container = editor.getContainer();
-						var langTag = container.parentElement.getAttribute('lang-tag');
-						editor.getDoc().querySelector('html').setAttribute('lang', langTag ? langTag : 'en-us');
-
-						var titleNode = document.createElement('title');
-						var textNode = document.createTextNode(tinymce.EditorManager.i18n.translate('Press ALT-F10 for toolbar, and press ESC to exit toolbar once inside'));
-						titleNode.appendChild(textNode);
-
-						var headElement = editor.getDoc().querySelector('head');
-						headElement.appendChild(titleNode);
-
-						var btns = container.querySelectorAll('.mce-colorbutton > button');
-						var length = btns ? btns.length : -1;
-						for (var i = 0; i < length; i ++) {
-							btns[i].setAttribute('role', 'presentation');
-						}
-					});
-				}
-			}
-		};
-
-		if (this.allowUnsafe) {
-			config.valid_elements = '*[*]';
-		} else {
-			config.extended_valid_elements = 'span[*]';
-		}
-
-		if (this.imageToolsEnabled) {
-			config.plugins += ' image imagetools';
-			if (valenceHost) {
-				// get the root domain name of the valence host
-				var matches = valenceHost.toLowerCase().match(/^https?:\/\/([^/:?#]+)(?:[/:?#]|$)/i);
-				var domainName = matches && matches[1];
-				if (domainName) {
-					config.imagetools_cors_hosts = [domainName];
-					config.imagetools_credentials_hosts = [domainName];
-				}
-			}
-		}
-
-		tinymce.init(this._extend(this.pluginConfig, config));
-
-		// need to reset auto focus property to prevent unwanted focus during re-ordering of the options
-		this.autoFocus = 0;
-	},
-
-	computeToolbarId: function(editorId) {
-		return editorId + '-toolbar';
-	},
-
-	computeHeight: function(totalPadding, rows, lineHeight) {
-		return totalPadding + (lineHeight * rows) + 'rem';
-	}
+// This hocus pocus is to avoid the need for clients to have to explicitly add a script tag
+// to include tinymce.
+// TinyMCE uses the location of the script file to find other assets like themes and plugins.
+// It uses a couple of strategies to find the location of the script file including looking for
+// a script tag in the document and examining document.currentScript. Neither of these work
+// when tinymce is included using an es6 import with Polymer. However, it does have an undocumented
+// mechanism to use a `tinyMCEPreInit` object to set the base URL. So we are using that
+// here. However, to ensure this is set before the tinymce import is processed, we have to use a dynamic
+// import. Hence we dynamically import tinymce, and then we dynamically import the d2l-html-editor
+// component.
+const tinymceBaseUrl = 'https://s.brightspace.com/lib/tinymce/dev/4.8.5-a11ychecker.1.2.1-53-powerpaste.3.3.3-308-shadow-dom-fork-1';
+window.tinyMCEPreInit = {
+	baseURL: tinymceBaseUrl,
+	suffix: ''
+};
+import(`${tinymceBaseUrl}/tinymce.js`).then(function() {
+	import('./d2l-html-editor-component.js');
 });
diff --git a/d2l-insertstuff-styles.js b/d2l-insertstuff-styles.js
index 76c88da..f2b9343 100644
--- a/d2l-insertstuff-styles.js
+++ b/d2l-insertstuff-styles.js
@@ -30,4 +30,3 @@ document.head.appendChild($_documentContainer.content);
   from HTML and may be out of place here. Review them and
   then delete this comment!
 */
-;
diff --git a/demo/d2l-editor-wrapper.js b/demo/d2l-editor-wrapper.js
index 4653f24..fcda177 100644
--- a/demo/d2l-editor-wrapper.js
+++ b/demo/d2l-editor-wrapper.js
@@ -27,16 +27,24 @@ $_documentContainer.innerHTML = `<dom-module id="d2l-editor-wrapper">
 
 		</style>
 		<h2>Hello [[prop1]]!</h2>
-		<d2l-html-editor editor-id="[[prop1]]" toolbar="[[_toolbar]]" plugins="[[_plugins]]">
+		<d2l-html-editor
+			editor-id="[[prop1]]"
+			toolbar="[[_toolbar]]"
+			plugins="[[_plugins]]"
+			app-root="[[_appRoot]]"
+		>
 			<div id="[[prop1]]" class="d2l-richtext-editor-container"></div>
 		</d2l-html-editor>
 	</template>
-	
+
 </dom-module>`;
 
 document.head.appendChild($_documentContainer.content);
 Polymer({
 	is: 'd2l-editor-wrapper',
+	get importMeta() {
+		return import.meta;
+	},
 	properties: {
 		prop1: {
 			type: String,
@@ -49,10 +57,15 @@ Polymer({
 			type: String,
 			value: 'lists paste d2l_placeholder d2l_filter d2l_replacestring',
 		},
+		_appRoot: {
+			type: String,
+			value: function() {
+				return this.resolveUrl('../');
+			},
+		},
 	},
 	attached: function() {
 		var editor = this.$$('d2l-html-editor');
-		editor.appRoot = editor.resolveUrl('../root/');
 		editor.d2lPluginSettings = {};
 	}
 });
diff --git a/demo/index.html b/demo/index.html
index 0c81e8b..f0c35fe 100644
--- a/demo/index.html
+++ b/demo/index.html
@@ -14,9 +14,7 @@ subject to an additional IP rights grant found at http://polymer.github.io/PATEN
 	<meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes">
 	<title>d2l-html-editor Demo</title>
 	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
-	<script type="module" src="./d2l-html-editor-client.js"></script>
 	<script type="module" src="./d2l-editor-wrapper.js"></script>
-	<script type="module" src="../d2l-html-editor.js"></script>
 
 	<custom-style>
 		  <style is="custom-style">
@@ -36,47 +34,12 @@ subject to an additional IP rights grant found at http://polymer.github.io/PATEN
 	  </custom-style>
   </head>
   <body>
+	<p>Demo 1</p>
 	<d2l-editor-wrapper prop1="demo1"></d2l-editor-wrapper>
-	<p>
-	  Liverpool will take on German giants Bayern Munich in the Champions League last 16, while Manchester United have been drawn against Paris St-Germain.
-
-	  Premier League champions Manchester City and Tottenham also face Bundesliga sides, with City meeting Schalke and Spurs playing Borussia Dortmund.
-
-	  The first legs will take place on 12-13 and 19-20 February, with the return fixtures on 5-6 and 12-13 March.
-
-	  Group winners will be away from home in the first legs.
-
-	  Teams could not be drawn against sides from the same country in the last 16, nor against teams who they played in the group stage.
-
-	  Elsewhere, holders Real Madrid will face Dutch side Ajax, who have reached the knockout stages for the first time since 2005-06, while Serie A champions Juventus face Europa League winners Atletico Madrid.
-
-	  Spanish champions Barcelona meet French side Lyon, while Italian club Roma face Portuguese champions Porto.
-	  Liverpool will take on German giants Bayern Munich in the Champions League last 16, while Manchester United have been drawn against Paris St-Germain.
-
-	  Premier League champions Manchester City and Tottenham also face Bundesliga sides, with City meeting Schalke and Spurs playing Borussia Dortmund.
-
-	  The first legs will take place on 12-13 and 19-20 February, with the return fixtures on 5-6 and 12-13 March.
-
-	  Group winners will be away from home in the first legs.
-
-	  Teams could not be drawn against sides from the same country in the last 16, nor against teams who they played in the group stage.
-
-	  Elsewhere, holders Real Madrid will face Dutch side Ajax, who have reached the knockout stages for the first time since 2005-06, while Serie A champions Juventus face Europa League winners Atletico Madrid.
-
-	  Spanish champions Barcelona meet French side Lyon, while Italian club Roma face Portuguese champions Porto.
-	  Liverpool will take on German giants Bayern Munich in the Champions League last 16, while Manchester United have been drawn against Paris St-Germain.
-
-	  Premier League champions Manchester City and Tottenham also face Bundesliga sides, with City meeting Schalke and Spurs playing Borussia Dortmund.
 
-	  The first legs will take place on 12-13 and 19-20 February, with the return fixtures on 5-6 and 12-13 March.
-
-	  Group winners will be away from home in the first legs.
-
-	  Teams could not be drawn against sides from the same country in the last 16, nor against teams who they played in the group stage.
-
-	  Elsewhere, holders Real Madrid will face Dutch side Ajax, who have reached the knockout stages for the first time since 2005-06, while Serie A champions Juventus face Europa League winners Atletico Madrid.
-
-	  Spanish champions Barcelona meet French side Lyon, while Italian club Roma face Portuguese champions Porto.
+	<p>Demo 2</p>
+	<d2l-editor-wrapper prop1="demo2"></d2l-editor-wrapper>
+	<p>
 	  Liverpool will take on German giants Bayern Munich in the Champions League last 16, while Manchester United have been drawn against Paris St-Germain.
 
 	  Premier League champions Manchester City and Tottenham also face Bundesliga sides, with City meeting Schalke and Spurs playing Borussia Dortmund.
diff --git a/package.json b/package.json
index 2fc2c06..7f6fbd1 100644
--- a/package.json
+++ b/package.json
@@ -21,8 +21,7 @@
     "serve": "polymer serve",
     "lint": "npm run lint:wc && npm run lint:js",
     "lint:js": "eslint . --ext .js,.html test/**/*.js test/**/*.html demo/**/*.js demo/**/*.html",
-    "lint:js": "eslint . --ext .js,.html test/**/*.js test/**/*.html demo/**/*.js demo/**/*.html",
-    "lint:wc": "polymer lint",
+    "lint:wc": "polymer lint *.js",
     "test": "npm run lint && npm run test:polymer:local",
     "test:polymer:local": "cross-env LAUNCHPAD_BROWSERS=chrome polymer test --skip-plugin sauce",
     "test:polymer:sauce": "polymer test --skip-plugin local"
@@ -52,7 +51,8 @@
   },
   "dependencies": {
     "@polymer/polymer": "^3.0.0",
-    "d2l-icons": "BrightspaceUI/icons#semver:^6",
-    "d2l-fetch": "Brightspace/d2l-fetch.git#semver:^2"
+    "d2l-fetch": "Brightspace/d2l-fetch.git#semver:^2",
+    "d2l-fetch-auth": "github:Brightspace/d2l-fetch-auth",
+    "d2l-icons": "BrightspaceUI/icons#semver:^6"
   }
 }
diff --git a/tinymce-import.js b/tinymce-import.js
deleted file mode 100644
index 02d3835..0000000
--- a/tinymce-import.js
+++ /dev/null
@@ -1,10 +0,0 @@
-/*<script type="text/javascript" src="https://cdn.tinymce.com/4/tinymce.js"></script>*/
-/* <script type="text/javascript" src="http://localhost:3000/js/tinymce/tinymce.js"></script> */
-/*<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.3.10/tinymce.min.js"></script> */
-/* <script type="text/javascript" src="https://s.brightspace.com/lib/tinymce/4.7.11-a11ychecker.1.2.1-53-powerpaste.3.3.0-283-polymer2-hack/tinymce.min.js"></script> */
-/*
-  FIXME(polymer-modulizer): the above comments were extracted
-  from HTML and may be out of place here. Review them and
-  then delete this comment!
-*/
-;
-- 
2.18.0.windows.1


From 913db4aea02632d9e6c71a50352f36c3b019d374 Mon Sep 17 00:00:00 2001
From: Martin Bayly <Martin.Bayly@D2L.com>
Date: Wed, 2 Jan 2019 17:33:38 -0800
Subject: [PATCH 2/4] polymer serve with demo page does not seem to work with
 dynamic imports. In FF complains "import declarations may only appear at top
 level of a module". So switching demo to use non-dynamic component and
 explicitly importing tinymce

---
 d2l-html-editor.js         | 2 +-
 demo/d2l-editor-wrapper.js | 2 +-
 demo/index.html            | 1 +
 polymer.json               | 3 ++-
 4 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/d2l-html-editor.js b/d2l-html-editor.js
index 1a5169f..87e9396 100644
--- a/d2l-html-editor.js
+++ b/d2l-html-editor.js
@@ -13,6 +13,6 @@ window.tinyMCEPreInit = {
 	baseURL: tinymceBaseUrl,
 	suffix: ''
 };
-import(`${tinymceBaseUrl}/tinymce.js`).then(function() {
+import(tinymceBaseUrl + '/tinymce.js').then(function() {
 	import('./d2l-html-editor-component.js');
 });
diff --git a/demo/d2l-editor-wrapper.js b/demo/d2l-editor-wrapper.js
index fcda177..34f3ff3 100644
--- a/demo/d2l-editor-wrapper.js
+++ b/demo/d2l-editor-wrapper.js
@@ -9,7 +9,7 @@
 import '@polymer/polymer/polymer-legacy.js';
 
 import './d2l-html-editor-client.js';
-import '../d2l-html-editor.js';
+import '../d2l-html-editor-component.js';
 import { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';
 const $_documentContainer = document.createElement('template');
 
diff --git a/demo/index.html b/demo/index.html
index f0c35fe..dc2bb8d 100644
--- a/demo/index.html
+++ b/demo/index.html
@@ -13,6 +13,7 @@ subject to an additional IP rights grant found at http://polymer.github.io/PATEN
 	<meta charset="utf-8">
 	<meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes">
 	<title>d2l-html-editor Demo</title>
+	<script src="https://s.brightspace.com/lib/tinymce/dev/4.8.5-a11ychecker.1.2.1-53-powerpaste.3.3.3-308-shadow-dom-fork-1/tinymce.js"></script>
 	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
 	<script type="module" src="./d2l-editor-wrapper.js"></script>
 
diff --git a/polymer.json b/polymer.json
index 6796130..84ac8ab 100644
--- a/polymer.json
+++ b/polymer.json
@@ -5,7 +5,8 @@
       "polymer-3"
     ],
     "ignoreWarnings": [
-      "not-loadable"
+      "not-loadable",
+      "non-literal-import"
     ]
   }
 }
-- 
2.18.0.windows.1


From bc688ed16d95538d934ca48447b3662f0433c201 Mon Sep 17 00:00:00 2001
From: Martin Bayly <Martin.Bayly@D2L.com>
Date: Fri, 4 Jan 2019 08:46:07 -0800
Subject: [PATCH 3/4] add workaround for toolbar focus issues in IE11

---
 d2l-html-editor-component.js | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/d2l-html-editor-component.js b/d2l-html-editor-component.js
index 5013d81..df8d1e4 100644
--- a/d2l-html-editor-component.js
+++ b/d2l-html-editor-component.js
@@ -496,6 +496,7 @@ Polymer({
 			editor.remove();
 		}
 		this.client = null;
+		this.element.removeEventListener('focusin', this._focusInHandler);
 	},
 
 	focus: function() {
@@ -543,10 +544,32 @@ Polymer({
 		this.element.style.overflowY = 'auto';
 		this.element.style.minHeight = this.minHeight;
 		this.element.style.maxHeight = this.maxHeight;
+		this.element.addEventListener('focusin', this._focusInHandler);
 
 		this._initTinyMCE(valenceHost);
 	},
 
+	// This handler is required to prevent issues in IE11 where the toolbar
+	// is shown and then immediately hidden again when an editor gains focus. It occurs because
+	// tinymce registers a document level 'focus' listener to hide the toolbar when the
+	// document gets focus outside the editor. For browsers that don't
+	// support document.documentElement.onFocusIn, it uses a 'focus' event in 'capture'
+	// phase. This seems to be most desktop browsers (Edge, FF, Chrome) even though they
+	// do support the 'focusin' event. However, for IE11 it does use 'focusin'. In contrast
+	// to 'focus', 'focusin' bubbles, so after the editor gets focus the document level
+	// handler fires. Tinymce contains code to try and determine if the target event is related
+	// to the editor. Pre-Polymer 2 this worked for IE11, because event retargetting was not
+	// simulated for shady DOM. However, since Polymer 2, it looks like event retargetting
+	// is implemented by the polyfills. So when the document level handler gets the event
+	// it appears to have come from the top level web component in the document that
+	// encapsulates the editor, and so the handler thinks the editor lost focus, and so
+	// immediately hides the toolbar again. Stopping propagation for this event when
+	// it does come from the editor doesn't seem to have any side effects and works around
+	// the issue.
+	_focusInHandler: function(e) {
+		e.stopPropagation();
+	},
+
 	_extend: function(obj, target) {
 		for (var i in obj) {
 			if (obj.hasOwnProperty(i) && !target.hasOwnProperty(i)) {
-- 
2.18.0.windows.1


From 2a2221fbbc40a8bc33efe79f1683bd31687b8386 Mon Sep 17 00:00:00 2001
From: Martin Bayly <Martin.Bayly@D2L.com>
Date: Fri, 4 Jan 2019 17:49:07 -0800
Subject: [PATCH 4/4] new version of tinymce fork with FF shadow dom selection
 fix

---
 d2l-html-editor.js | 2 +-
 demo/index.html    | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/d2l-html-editor.js b/d2l-html-editor.js
index 87e9396..e438a2e 100644
--- a/d2l-html-editor.js
+++ b/d2l-html-editor.js
@@ -8,7 +8,7 @@
 // here. However, to ensure this is set before the tinymce import is processed, we have to use a dynamic
 // import. Hence we dynamically import tinymce, and then we dynamically import the d2l-html-editor
 // component.
-const tinymceBaseUrl = 'https://s.brightspace.com/lib/tinymce/dev/4.8.5-a11ychecker.1.2.1-53-powerpaste.3.3.3-308-shadow-dom-fork-1';
+const tinymceBaseUrl = 'https://s.brightspace.com/lib/tinymce/dev/4.8.5-a11ychecker.1.2.1-53-powerpaste.3.3.3-308-shadow-dom-fork-2';
 window.tinyMCEPreInit = {
 	baseURL: tinymceBaseUrl,
 	suffix: ''
diff --git a/demo/index.html b/demo/index.html
index dc2bb8d..d4f874b 100644
--- a/demo/index.html
+++ b/demo/index.html
@@ -13,7 +13,7 @@ subject to an additional IP rights grant found at http://polymer.github.io/PATEN
 	<meta charset="utf-8">
 	<meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes">
 	<title>d2l-html-editor Demo</title>
-	<script src="https://s.brightspace.com/lib/tinymce/dev/4.8.5-a11ychecker.1.2.1-53-powerpaste.3.3.3-308-shadow-dom-fork-1/tinymce.js"></script>
+	<script src="https://s.brightspace.com/lib/tinymce/dev/4.8.5-a11ychecker.1.2.1-53-powerpaste.3.3.3-308-shadow-dom-fork-2/tinymce.js"></script>
 	<script src="../../@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
 	<script type="module" src="./d2l-editor-wrapper.js"></script>
 
-- 
2.18.0.windows.1

